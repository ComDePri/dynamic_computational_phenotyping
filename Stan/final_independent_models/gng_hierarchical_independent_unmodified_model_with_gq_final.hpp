
// Code generated by stanc v2.30.1
#include <stan/model/model_header.hpp>
namespace gng_hierarchical_independent_unmodified_model_with_gq_final_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 202> locations_array__ = 
{" (found before start of program)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 86, column 4 to column 26)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 87, column 4 to column 38)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 88, column 4 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 89, column 4 to column 38)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 91, column 4 to column 24)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 92, column 4 to column 24)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 93, column 4 to column 25)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 94, column 4 to column 23)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 95, column 4 to column 24)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 100, column 4 to column 20)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 101, column 4 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 102, column 4 to column 39)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 103, column 4 to column 39)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 104, column 4 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 108, column 12 to column 77)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 109, column 12 to column 77)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 110, column 12 to column 72)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 111, column 12 to column 77)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 112, column 12 to column 79)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 107, column 23 to line 113, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 107, column 8 to line 113, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 106, column 19 to line 114, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 106, column 4 to line 114, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 143, column 4 to column 45)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 144, column 4 to column 42)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 146, column 4 to column 32)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 148, column 4 to column 10)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 155, column 20 to column 50)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 156, column 20 to column 47)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 154, column 33 to line 157, column 17)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 154, column 16 to line 157, column 17)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 153, column 36 to line 158, column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 153, column 12 to line 158, column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 152, column 23 to line 159, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 152, column 8 to line 159, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 151, column 19 to line 160, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 151, column 4 to line 160, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 166, column 12 to column 38)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 172, column 20 to column 57)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 173, column 20 to column 57)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 174, column 20 to column 57)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 175, column 20 to column 57)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 176, column 20 to column 57)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 177, column 20 to column 57)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 180, column 24 to column 127)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 181, column 24 to column 77)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 182, column 24 to column 115)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 184, column 24 to column 70)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 185, column 24 to column 66)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 183, column 24 to line 186, column 25)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 189, column 24 to column 71)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 192, column 24 to column 90)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 194, column 24 to column 114)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 198, column 24 to column 127)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 205, column 28 to column 137)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 204, column 29 to line 206, column 25)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 202, column 28 to column 135)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 201, column 51 to line 203, column 25)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 201, column 24 to line 206, column 25)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 179, column 48 to line 207, column 21)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 179, column 20 to line 207, column 21)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 170, column 33 to line 209, column 17)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 170, column 16 to line 209, column 17)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 168, column 39 to line 210, column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 168, column 12 to line 210, column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 164, column 23 to line 211, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 164, column 8 to line 211, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 163, column 19 to line 212, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 163, column 4 to line 212, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 120, column 4 to column 26)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 121, column 4 to column 28)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 125, column 12 to column 69)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 124, column 25 to line 126, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 124, column 4 to line 126, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 128, column 4 to column 41)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 131, column 4 to column 51)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 132, column 4 to column 51)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 133, column 4 to column 52)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 134, column 4 to column 50)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 135, column 4 to column 51)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 137, column 5 to line 138, column 68)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 58, column 4 to column 10)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 59, column 4 to column 10)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 61, column 4 to column 14)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 62, column 29 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 62, column 31 to column 32)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 62, column 4 to column 34)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 63, column 4 to column 28)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 64, column 24 to column 25)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 64, column 27 to column 28)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 64, column 4 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 65, column 31 to column 32)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 65, column 33 to column 34)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 65, column 35 to column 45)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 65, column 4 to column 47)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 66, column 32 to column 33)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 66, column 34 to column 35)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 66, column 36 to column 46)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 66, column 4 to column 48)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 67, column 30 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 67, column 32 to column 33)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 67, column 34 to column 44)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 67, column 4 to column 46)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 68, column 28 to column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 68, column 30 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 68, column 32 to column 42)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 68, column 4 to column 44)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 70, column 4 to column 14)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 71, column 29 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 71, column 31 to column 32)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 71, column 4 to column 34)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 72, column 4 to column 20)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 73, column 4 to column 28)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 74, column 42 to column 43)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 74, column 44 to column 45)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 74, column 46 to column 48)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 74, column 4 to column 50)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 75, column 34 to column 35)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 75, column 36 to column 37)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 75, column 38 to column 40)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 75, column 41 to column 51)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 75, column 4 to column 53)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 76, column 29 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 76, column 31 to column 32)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 76, column 33 to column 35)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 76, column 37 to column 47)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 76, column 4 to column 49)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 77, column 21 to column 22)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 77, column 24 to column 25)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 77, column 27 to column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 77, column 31 to column 41)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 77, column 4 to column 43)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 82, column 4 to column 24)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 86, column 11 to column 18)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 87, column 20 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 88, column 19 to column 26)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 88, column 28 to column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 89, column 29 to column 36)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 91, column 19 to column 20)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 91, column 21 to column 22)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 92, column 19 to column 20)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 92, column 21 to column 22)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 93, column 20 to column 21)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 93, column 22 to column 23)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 94, column 18 to column 19)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 94, column 20 to column 21)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 95, column 19 to column 20)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 95, column 21 to column 22)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 100, column 15 to column 16)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 100, column 17 to column 18)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 101, column 25 to column 26)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 101, column 27 to column 28)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 102, column 34 to column 35)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 102, column 36 to column 37)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 103, column 34 to column 35)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 103, column 36 to column 37)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 104, column 26 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 104, column 28 to column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 143, column 24 to column 34)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 143, column 36 to column 38)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 143, column 40 to column 41)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 143, column 42 to column 43)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 144, column 21 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 144, column 33 to column 35)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 144, column 37 to column 38)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 144, column 39 to column 40)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 146, column 26 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 146, column 29 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 9, column 1 to column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 12, column 2 to column 26)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 20, column 21 to column 58)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 21, column 21 to column 58)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 22, column 21 to column 57)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 23, column 21 to column 58)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 24, column 21 to column 55)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 25, column 21 to column 56)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 28, column 25 to column 124)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 29, column 25 to column 75)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 30, column 25 to column 113)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 31, column 25 to column 70)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 32, column 25 to column 66)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 34, column 25 to column 92)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 37, column 25 to column 124)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 43, column 29 to column 134)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 42, column 62 to line 44, column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 42, column 30 to line 44, column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 40, column 29 to column 132)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 39, column 56 to line 41, column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 39, column 25 to line 44, column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 27, column 48 to line 45, column 22)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 27, column 21 to line 45, column 22)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 18, column 33 to line 46, column 18)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 18, column 17 to line 46, column 18)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 16, column 36 to line 47, column 10)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 16, column 9 to line 47, column 10)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 14, column 17 to line 48, column 3)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 14, column 2 to line 48, column 3)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 10, column 28 to line 49, column 2)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 10, column 1 to line 49, column 2)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 50, column 1 to column 11)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/gng_hierarchical_independent_unmodified_model_with_gq_final.stan', line 7, column 77 to line 51, column 2)"};

struct partial_sum_functor__ {
  template <typename T3__, typename T9__, typename T10__, typename T11__,
            typename T12__, typename T13__,
            stan::require_all_t<stan::is_stan_scalar<T3__>,
                                stan::is_stan_scalar<T9__>,
                                stan::is_stan_scalar<T10__>,
                                stan::is_stan_scalar<T11__>,
                                stan::is_stan_scalar<T12__>,
                                stan::is_stan_scalar<T13__>>* = nullptr>
  stan::promote_args_t<T3__, T9__, T10__, T11__, T12__,
                       stan::promote_args_t<T13__>>
  operator()(const std::vector<std::vector<std::vector<int>>>& choice_itc,
             const int& start, const int& end,
             const std::vector<std::vector<std::vector<std::vector<T3__>>>>& outcome_gng,
             const std::vector<std::vector<int>>& idx_gng_obs,
             const std::vector<std::vector<std::vector<std::vector<int>>>>& pressed_gng,
             const std::vector<std::vector<std::vector<std::vector<int>>>>& cue_gng,
             const std::vector<std::vector<std::vector<int>>>& Tr_gng,
             const int& Bl, const std::vector<std::vector<T9__>>& b_gng,
             const std::vector<std::vector<T10__>>& pi_gng,
             const std::vector<std::vector<T11__>>& xi_gng,
             const std::vector<std::vector<T12__>>& ep_gng,
             const std::vector<std::vector<T13__>>& rho_gng, const int& W,
             std::ostream* pstream__) const;
};
struct partial_sum_rsfunctor__ {
  template <typename T3__, typename T9__, typename T10__, typename T11__,
            typename T12__, typename T13__,
            stan::require_all_t<stan::is_stan_scalar<T3__>,
                                stan::is_stan_scalar<T9__>,
                                stan::is_stan_scalar<T10__>,
                                stan::is_stan_scalar<T11__>,
                                stan::is_stan_scalar<T12__>,
                                stan::is_stan_scalar<T13__>>* = nullptr>
  stan::promote_args_t<T3__, T9__, T10__, T11__, T12__,
                       stan::promote_args_t<T13__>>
  operator()(const std::vector<std::vector<std::vector<int>>>& choice_itc,
             const int& start, const int& end, std::ostream* pstream__,
             const std::vector<std::vector<std::vector<std::vector<T3__>>>>& outcome_gng,
             const std::vector<std::vector<int>>& idx_gng_obs,
             const std::vector<std::vector<std::vector<std::vector<int>>>>& pressed_gng,
             const std::vector<std::vector<std::vector<std::vector<int>>>>& cue_gng,
             const std::vector<std::vector<std::vector<int>>>& Tr_gng,
             const int& Bl, const std::vector<std::vector<T9__>>& b_gng,
             const std::vector<std::vector<T10__>>& pi_gng,
             const std::vector<std::vector<T11__>>& xi_gng,
             const std::vector<std::vector<T12__>>& ep_gng,
             const std::vector<std::vector<T13__>>& rho_gng, const int& W) const;
};

template <typename T3__, typename T9__, typename T10__, typename T11__,
          typename T12__, typename T13__,
          stan::require_all_t<stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T9__>,
                              stan::is_stan_scalar<T10__>,
                              stan::is_stan_scalar<T11__>,
                              stan::is_stan_scalar<T12__>,
                              stan::is_stan_scalar<T13__>>* = nullptr>
  stan::promote_args_t<T3__, T9__, T10__, T11__, T12__,
                     stan::promote_args_t<T13__>>
  partial_sum(const std::vector<std::vector<std::vector<int>>>& choice_itc,
              const int& start, const int& end,
              const std::vector<std::vector<std::vector<std::vector<T3__>>>>& outcome_gng,
              const std::vector<std::vector<int>>& idx_gng_obs,
              const std::vector<std::vector<std::vector<std::vector<int>>>>& pressed_gng,
              const std::vector<std::vector<std::vector<std::vector<int>>>>& cue_gng,
              const std::vector<std::vector<std::vector<int>>>& Tr_gng,
              const int& Bl, const std::vector<std::vector<T9__>>& b_gng,
              const std::vector<std::vector<T10__>>& pi_gng,
              const std::vector<std::vector<T11__>>& xi_gng,
              const std::vector<std::vector<T12__>>& ep_gng,
              const std::vector<std::vector<T13__>>& rho_gng, const int& W,
              std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T3__, T9__, T10__, T11__, T12__,
                                 stan::promote_args_t<T13__>>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ lt = DUMMY_VAR__;
      current_statement__ = 169;
      lt = 0;
      current_statement__ = 199;
      for (int n = 1; n <= ((end - start) + 1); ++n) {
        int s = std::numeric_limits<int>::min();
        current_statement__ = 170;
        s = (start + (n - 1));
        current_statement__ = 197;
        for (int w = 1; w <= W; ++w) {
          current_statement__ = 195;
          if (stan::math::logical_neq(
                stan::model::rvalue(idx_gng_obs, "idx_gng_obs",
                  stan::model::index_uni(s), stan::model::index_uni(w)), 0)) {
            current_statement__ = 193;
            for (int b = 1; b <= Bl; ++b) {
              Eigen::Matrix<local_scalar_t__, -1, 1> wv_g =
                 Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(4,
                   DUMMY_VAR__);
              current_statement__ = 171;
              stan::model::assign(wv_g, stan::math::rep_vector(0.0, 4),
                "assigning variable wv_g");
              Eigen::Matrix<local_scalar_t__, -1, 1> wv_ng =
                 Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(4,
                   DUMMY_VAR__);
              current_statement__ = 172;
              stan::model::assign(wv_ng, stan::math::rep_vector(0.0, 4),
                "assigning variable wv_ng");
              Eigen::Matrix<local_scalar_t__, -1, 1> qv_g =
                 Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(4,
                   DUMMY_VAR__);
              current_statement__ = 173;
              stan::model::assign(qv_g, stan::math::rep_vector(0.0, 4),
                "assigning variable qv_g");
              Eigen::Matrix<local_scalar_t__, -1, 1> qv_ng =
                 Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(4,
                   DUMMY_VAR__);
              current_statement__ = 174;
              stan::model::assign(qv_ng, stan::math::rep_vector(0.0, 4),
                "assigning variable qv_ng");
              Eigen::Matrix<local_scalar_t__, -1, 1> sv =
                 Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(4,
                   DUMMY_VAR__);
              current_statement__ = 175;
              stan::model::assign(sv, stan::math::rep_vector(0.0, 4),
                "assigning variable sv");
              Eigen::Matrix<local_scalar_t__, -1, 1> pGo =
                 Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(4,
                   DUMMY_VAR__);
              current_statement__ = 176;
              stan::model::assign(pGo, stan::math::rep_vector(0.0, 4),
                "assigning variable pGo");
              current_statement__ = 191;
              for (int t = 1;
                   t <= stan::model::rvalue(Tr_gng, "Tr_gng",
                          stan::model::index_uni(s),
                            stan::model::index_uni(w),
                            stan::model::index_uni(b));
                   ++t) {
                current_statement__ = 177;
                stan::model::assign(wv_g,
                  ((stan::model::rvalue(qv_g, "qv_g",
                      stan::model::index_uni(stan::model::rvalue(cue_gng,
                                               "cue_gng",
                                               stan::model::index_uni(s),
                                                 stan::model::index_uni(w),
                                                 stan::model::index_uni(b),
                                                 stan::model::index_uni(t))))
                     +
                     stan::model::rvalue(b_gng, "b_gng",
                       stan::model::index_uni(s), stan::model::index_uni(w)))
                    +
                    (stan::model::rvalue(pi_gng, "pi_gng",
                       stan::model::index_uni(s), stan::model::index_uni(w))
                      *
                      stan::model::rvalue(sv, "sv",
                        stan::model::index_uni(stan::model::rvalue(cue_gng,
                                                 "cue_gng",
                                                 stan::model::index_uni(s),
                                                   stan::model::index_uni(w),
                                                   stan::model::index_uni(b),
                                                   stan::model::index_uni(t)))))),
                  "assigning variable wv_g", stan::model::index_uni(stan::model::rvalue(
                                                                    cue_gng,
                                                                    "cue_gng",
                                                                    stan::model::index_uni(s),
                                                                    stan::model::index_uni(w),
                                                                    stan::model::index_uni(b),
                                                                    stan::model::index_uni(t))));
                current_statement__ = 178;
                stan::model::assign(wv_ng,
                  stan::model::rvalue(qv_ng, "qv_ng",
                    stan::model::index_uni(stan::model::rvalue(cue_gng,
                                             "cue_gng",
                                             stan::model::index_uni(s),
                                               stan::model::index_uni(w),
                                               stan::model::index_uni(b),
                                               stan::model::index_uni(t)))),
                  "assigning variable wv_ng", stan::model::index_uni(
                                                stan::model::rvalue(cue_gng,
                                                  "cue_gng",
                                                  stan::model::index_uni(s),
                                                    stan::model::index_uni(w),
                                                    stan::model::index_uni(b),
                                                    stan::model::index_uni(t))));
                current_statement__ = 179;
                stan::model::assign(pGo,
                  stan::math::inv_logit(
                    (stan::model::rvalue(wv_g, "wv_g",
                       stan::model::index_uni(stan::model::rvalue(cue_gng,
                                                "cue_gng",
                                                stan::model::index_uni(s),
                                                  stan::model::index_uni(w),
                                                  stan::model::index_uni(b),
                                                  stan::model::index_uni(t))))
                      -
                      stan::model::rvalue(wv_ng, "wv_ng",
                        stan::model::index_uni(stan::model::rvalue(cue_gng,
                                                 "cue_gng",
                                                 stan::model::index_uni(s),
                                                   stan::model::index_uni(w),
                                                   stan::model::index_uni(b),
                                                   stan::model::index_uni(t)))))),
                  "assigning variable pGo", stan::model::index_uni(stan::model::rvalue(
                                                                    cue_gng,
                                                                    "cue_gng",
                                                                    stan::model::index_uni(s),
                                                                    stan::model::index_uni(w),
                                                                    stan::model::index_uni(b),
                                                                    stan::model::index_uni(t))));
                current_statement__ = 180;
                stan::model::assign(pGo,
                  (stan::model::rvalue(pGo, "pGo",
                     stan::model::index_uni(stan::model::rvalue(cue_gng,
                                              "cue_gng",
                                              stan::model::index_uni(s),
                                                stan::model::index_uni(w),
                                                stan::model::index_uni(b),
                                                stan::model::index_uni(t))))
                    *
                    (1 -
                      stan::model::rvalue(xi_gng, "xi_gng",
                        stan::model::index_uni(s), stan::model::index_uni(w)))),
                  "assigning variable pGo", stan::model::index_uni(stan::model::rvalue(
                                                                    cue_gng,
                                                                    "cue_gng",
                                                                    stan::model::index_uni(s),
                                                                    stan::model::index_uni(w),
                                                                    stan::model::index_uni(b),
                                                                    stan::model::index_uni(t))));
                current_statement__ = 181;
                stan::model::assign(pGo,
                  (stan::model::rvalue(pGo, "pGo",
                     stan::model::index_uni(stan::model::rvalue(cue_gng,
                                              "cue_gng",
                                              stan::model::index_uni(s),
                                                stan::model::index_uni(w),
                                                stan::model::index_uni(b),
                                                stan::model::index_uni(t))))
                    +
                    (stan::model::rvalue(xi_gng, "xi_gng",
                       stan::model::index_uni(s), stan::model::index_uni(w))
                      / 2)),
                  "assigning variable pGo", stan::model::index_uni(stan::model::rvalue(
                                                                    cue_gng,
                                                                    "cue_gng",
                                                                    stan::model::index_uni(s),
                                                                    stan::model::index_uni(w),
                                                                    stan::model::index_uni(b),
                                                                    stan::model::index_uni(t))));
                current_statement__ = 182;
                lt = (lt +
                       stan::math::bernoulli_lpmf<false>(
                         stan::model::rvalue(pressed_gng, "pressed_gng",
                           stan::model::index_uni(s),
                             stan::model::index_uni(w),
                             stan::model::index_uni(b),
                             stan::model::index_uni(t)),
                         stan::model::rvalue(pGo, "pGo",
                           stan::model::index_uni(stan::model::rvalue(
                                                    cue_gng, "cue_gng",
                                                    stan::model::index_uni(s),
                                                      stan::model::index_uni(w),
                                                      stan::model::index_uni(b),
                                                      stan::model::index_uni(t))))));
                current_statement__ = 183;
                stan::model::assign(sv,
                  (stan::model::rvalue(sv, "sv",
                     stan::model::index_uni(stan::model::rvalue(cue_gng,
                                              "cue_gng",
                                              stan::model::index_uni(s),
                                                stan::model::index_uni(w),
                                                stan::model::index_uni(b),
                                                stan::model::index_uni(t))))
                    +
                    (stan::model::rvalue(ep_gng, "ep_gng",
                       stan::model::index_uni(s), stan::model::index_uni(w))
                      *
                      ((stan::model::rvalue(rho_gng, "rho_gng",
                          stan::model::index_uni(s),
                            stan::model::index_uni(w)) *
                         stan::model::rvalue(outcome_gng, "outcome_gng",
                           stan::model::index_uni(s),
                             stan::model::index_uni(w),
                             stan::model::index_uni(b),
                             stan::model::index_uni(t))) -
                        stan::model::rvalue(sv, "sv",
                          stan::model::index_uni(stan::model::rvalue(cue_gng,
                                                   "cue_gng",
                                                   stan::model::index_uni(s),
                                                     stan::model::index_uni(w),
                                                     stan::model::index_uni(b),
                                                     stan::model::index_uni(t))))))),
                  "assigning variable sv", stan::model::index_uni(stan::model::rvalue(
                                                                    cue_gng,
                                                                    "cue_gng",
                                                                    stan::model::index_uni(s),
                                                                    stan::model::index_uni(w),
                                                                    stan::model::index_uni(b),
                                                                    stan::model::index_uni(t))));
                current_statement__ = 189;
                if (stan::math::logical_eq(
                      stan::model::rvalue(pressed_gng, "pressed_gng",
                        stan::model::index_uni(s), stan::model::index_uni(w),
                          stan::model::index_uni(b),
                          stan::model::index_uni(t)), 1)) {
                  current_statement__ = 187;
                  stan::model::assign(qv_g,
                    (stan::model::rvalue(qv_g, "qv_g",
                       stan::model::index_uni(stan::model::rvalue(cue_gng,
                                                "cue_gng",
                                                stan::model::index_uni(s),
                                                  stan::model::index_uni(w),
                                                  stan::model::index_uni(b),
                                                  stan::model::index_uni(t))))
                      +
                      (stan::model::rvalue(ep_gng, "ep_gng",
                         stan::model::index_uni(s), stan::model::index_uni(w))
                        *
                        ((stan::model::rvalue(rho_gng, "rho_gng",
                            stan::model::index_uni(s),
                              stan::model::index_uni(w)) *
                           stan::model::rvalue(outcome_gng, "outcome_gng",
                             stan::model::index_uni(s),
                               stan::model::index_uni(w),
                               stan::model::index_uni(b),
                               stan::model::index_uni(t))) -
                          stan::model::rvalue(qv_g, "qv_g",
                            stan::model::index_uni(stan::model::rvalue(
                                                     cue_gng, "cue_gng",
                                                     stan::model::index_uni(s),
                                                       stan::model::index_uni(w),
                                                       stan::model::index_uni(b),
                                                       stan::model::index_uni(t))))))),
                    "assigning variable qv_g", stan::model::index_uni(
                                                 stan::model::rvalue(cue_gng,
                                                   "cue_gng",
                                                   stan::model::index_uni(s),
                                                     stan::model::index_uni(w),
                                                     stan::model::index_uni(b),
                                                     stan::model::index_uni(t))));
                } else {
                  current_statement__ = 186;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(pressed_gng, "pressed_gng",
                          stan::model::index_uni(s),
                            stan::model::index_uni(w),
                            stan::model::index_uni(b),
                            stan::model::index_uni(t)), 0)) {
                    current_statement__ = 184;
                    stan::model::assign(qv_ng,
                      (stan::model::rvalue(qv_ng, "qv_ng",
                         stan::model::index_uni(stan::model::rvalue(cue_gng,
                                                  "cue_gng",
                                                  stan::model::index_uni(s),
                                                    stan::model::index_uni(w),
                                                    stan::model::index_uni(b),
                                                    stan::model::index_uni(t))))
                        +
                        (stan::model::rvalue(ep_gng, "ep_gng",
                           stan::model::index_uni(s),
                             stan::model::index_uni(w)) *
                          ((stan::model::rvalue(rho_gng, "rho_gng",
                              stan::model::index_uni(s),
                                stan::model::index_uni(w)) *
                             stan::model::rvalue(outcome_gng, "outcome_gng",
                               stan::model::index_uni(s),
                                 stan::model::index_uni(w),
                                 stan::model::index_uni(b),
                                 stan::model::index_uni(t))) -
                            stan::model::rvalue(qv_ng, "qv_ng",
                              stan::model::index_uni(stan::model::rvalue(
                                                       cue_gng, "cue_gng",
                                                       stan::model::index_uni(s),
                                                         stan::model::index_uni(w),
                                                         stan::model::index_uni(b),
                                                         stan::model::index_uni(t))))))),
                      "assigning variable qv_ng", stan::model::index_uni(
                                                    stan::model::rvalue(
                                                      cue_gng, "cue_gng",
                                                      stan::model::index_uni(s),
                                                        stan::model::index_uni(w),
                                                        stan::model::index_uni(b),
                                                        stan::model::index_uni(t))));
                  } 
                }
              }
            }
          } 
        }
      }
      current_statement__ = 200;
      return lt;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T3__, typename T9__, typename T10__, typename T11__,
          typename T12__, typename T13__,
          stan::require_all_t<stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T9__>,
                              stan::is_stan_scalar<T10__>,
                              stan::is_stan_scalar<T11__>,
                              stan::is_stan_scalar<T12__>,
                              stan::is_stan_scalar<T13__>>*>
stan::promote_args_t<T3__, T9__, T10__, T11__, T12__,
                     stan::promote_args_t<T13__>>
partial_sum_functor__::operator()(const std::vector<std::vector<std::vector<int>>>& choice_itc,
                                  const int& start, const int& end,
                                  const std::vector<std::vector<std::vector<std::vector<T3__>>>>& outcome_gng,
                                  const std::vector<std::vector<int>>& idx_gng_obs,
                                  const std::vector<std::vector<std::vector<std::vector<int>>>>& pressed_gng,
                                  const std::vector<std::vector<std::vector<std::vector<int>>>>& cue_gng,
                                  const std::vector<std::vector<std::vector<int>>>& Tr_gng,
                                  const int& Bl,
                                  const std::vector<std::vector<T9__>>& b_gng,
                                  const std::vector<std::vector<T10__>>& pi_gng,
                                  const std::vector<std::vector<T11__>>& xi_gng,
                                  const std::vector<std::vector<T12__>>& ep_gng,
                                  const std::vector<std::vector<T13__>>& rho_gng,
                                  const int& W, std::ostream* pstream__) 
const
{
  return partial_sum(choice_itc, start, end, outcome_gng, idx_gng_obs,
           pressed_gng, cue_gng, Tr_gng, Bl, b_gng, pi_gng, xi_gng, ep_gng,
           rho_gng, W, pstream__);
}

template <typename T3__, typename T9__, typename T10__, typename T11__,
          typename T12__, typename T13__,
          stan::require_all_t<stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T9__>,
                              stan::is_stan_scalar<T10__>,
                              stan::is_stan_scalar<T11__>,
                              stan::is_stan_scalar<T12__>,
                              stan::is_stan_scalar<T13__>>*>
stan::promote_args_t<T3__, T9__, T10__, T11__, T12__,
                     stan::promote_args_t<T13__>>
partial_sum_rsfunctor__::operator()(const std::vector<std::vector<std::vector<int>>>& choice_itc,
                                    const int& start, const int& end,
                                    std::ostream* pstream__,
                                    const std::vector<std::vector<std::vector<std::vector<T3__>>>>& outcome_gng,
                                    const std::vector<std::vector<int>>& idx_gng_obs,
                                    const std::vector<std::vector<std::vector<std::vector<int>>>>& pressed_gng,
                                    const std::vector<std::vector<std::vector<std::vector<int>>>>& cue_gng,
                                    const std::vector<std::vector<std::vector<int>>>& Tr_gng,
                                    const int& Bl,
                                    const std::vector<std::vector<T9__>>& b_gng,
                                    const std::vector<std::vector<T10__>>& pi_gng,
                                    const std::vector<std::vector<T11__>>& xi_gng,
                                    const std::vector<std::vector<T12__>>& ep_gng,
                                    const std::vector<std::vector<T13__>>& rho_gng,
                                    const int& W)  const
{
  return partial_sum(choice_itc, start + 1, end + 1, outcome_gng,
           idx_gng_obs, pressed_gng, cue_gng, Tr_gng, Bl, b_gng, pi_gng,
           xi_gng, ep_gng, rho_gng, W, pstream__);
}


class gng_hierarchical_independent_unmodified_model_with_gq_final_model final : public model_base_crtp<gng_hierarchical_independent_unmodified_model_with_gq_final_model> {

 private:
  int N;
  int W;
  int P_itc;
  std::vector<std::vector<int>> idx_itc_obs;
  int Tr_max_itc;
  std::vector<std::vector<int>> Tr_itc;
  std::vector<std::vector<std::vector<double>>> amount_later;
  std::vector<std::vector<std::vector<double>>> amount_sooner;
  std::vector<std::vector<std::vector<double>>> delay_later;
  std::vector<std::vector<std::vector<int>>> choice_itc;
  int P_gng;
  std::vector<std::vector<int>> idx_gng_obs;
  int Bl;
  int Tr_max_gng;
  std::vector<std::vector<std::vector<int>>> Tr_gng;
  std::vector<std::vector<std::vector<std::vector<int>>>> cue_gng;
  std::vector<std::vector<std::vector<std::vector<int>>>> pressed_gng;
  std::vector<std::vector<std::vector<std::vector<double>>>> outcome_gng;
  int num_par; 
  
 
 public:
  ~gng_hierarchical_independent_unmodified_model_with_gq_final_model() { }
  
  inline std::string model_name() const final { return "gng_hierarchical_independent_unmodified_model_with_gq_final_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.30.1", "stancflags = "};
  }
  
  
  gng_hierarchical_independent_unmodified_model_with_gq_final_model(stan::io::var_context& context__,
                                                                    unsigned int random_seed__ = 0,
                                                                    std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "gng_hierarchical_independent_unmodified_model_with_gq_final_model_namespace::gng_hierarchical_independent_unmodified_model_with_gq_final_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 82;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 82;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 83;
      context__.validate_dims("data initialization","W","int",
           std::vector<size_t>{});
      W = std::numeric_limits<int>::min();
      
      
      current_statement__ = 83;
      W = context__.vals_i("W")[(1 - 1)];
      current_statement__ = 84;
      context__.validate_dims("data initialization","P_itc","int",
           std::vector<size_t>{});
      P_itc = std::numeric_limits<int>::min();
      
      
      current_statement__ = 84;
      P_itc = context__.vals_i("P_itc")[(1 - 1)];
      current_statement__ = 85;
      stan::math::validate_non_negative_index("idx_itc_obs", "N", N);
      current_statement__ = 86;
      stan::math::validate_non_negative_index("idx_itc_obs", "W", W);
      current_statement__ = 87;
      context__.validate_dims("data initialization","idx_itc_obs","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W)});
      idx_itc_obs = 
        std::vector<std::vector<int>>(N, 
          std::vector<int>(W, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> idx_itc_obs_flat__;
        current_statement__ = 87;
        idx_itc_obs_flat__ = context__.vals_i("idx_itc_obs");
        current_statement__ = 87;
        pos__ = 1;
        current_statement__ = 87;
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          current_statement__ = 87;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 87;
            stan::model::assign(idx_itc_obs, idx_itc_obs_flat__[(pos__ - 1)],
              "assigning variable idx_itc_obs", stan::model::index_uni(sym2__),
                                                  stan::model::index_uni(sym1__));
            current_statement__ = 87;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 87;
      stan::math::check_greater_or_equal(function__, "idx_itc_obs",
                                            idx_itc_obs, 0);
      current_statement__ = 88;
      context__.validate_dims("data initialization","Tr_max_itc","int",
           std::vector<size_t>{});
      Tr_max_itc = std::numeric_limits<int>::min();
      
      
      current_statement__ = 88;
      Tr_max_itc = context__.vals_i("Tr_max_itc")[(1 - 1)];
      current_statement__ = 88;
      stan::math::check_greater_or_equal(function__, "Tr_max_itc",
                                            Tr_max_itc, 0);
      current_statement__ = 89;
      stan::math::validate_non_negative_index("Tr_itc", "N", N);
      current_statement__ = 90;
      stan::math::validate_non_negative_index("Tr_itc", "W", W);
      current_statement__ = 91;
      context__.validate_dims("data initialization","Tr_itc","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W)});
      Tr_itc = 
        std::vector<std::vector<int>>(N, 
          std::vector<int>(W, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> Tr_itc_flat__;
        current_statement__ = 91;
        Tr_itc_flat__ = context__.vals_i("Tr_itc");
        current_statement__ = 91;
        pos__ = 1;
        current_statement__ = 91;
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          current_statement__ = 91;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 91;
            stan::model::assign(Tr_itc, Tr_itc_flat__[(pos__ - 1)],
              "assigning variable Tr_itc", stan::model::index_uni(sym2__),
                                             stan::model::index_uni(sym1__));
            current_statement__ = 91;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 91;
      stan::math::check_greater_or_equal(function__, "Tr_itc", Tr_itc, 0);
      current_statement__ = 92;
      stan::math::validate_non_negative_index("amount_later", "N", N);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("amount_later", "W", W);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("amount_later", "Tr_max_itc",
                                              Tr_max_itc);
      current_statement__ = 95;
      context__.validate_dims("data initialization","amount_later","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_itc)});
      amount_later = 
        std::vector<std::vector<std::vector<double>>>(N, 
          std::vector<std::vector<double>>(W, 
            std::vector<double>(Tr_max_itc, 
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> amount_later_flat__;
        current_statement__ = 95;
        amount_later_flat__ = context__.vals_r("amount_later");
        current_statement__ = 95;
        pos__ = 1;
        current_statement__ = 95;
        for (int sym1__ = 1; sym1__ <= Tr_max_itc; ++sym1__) {
          current_statement__ = 95;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 95;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 95;
              stan::model::assign(amount_later,
                amount_later_flat__[(pos__ - 1)],
                "assigning variable amount_later", stan::model::index_uni(sym3__),
                                                     stan::model::index_uni(sym2__),
                                                     stan::model::index_uni(sym1__));
              current_statement__ = 95;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 95;
      stan::math::check_greater_or_equal(function__, "amount_later",
                                            amount_later, 0);
      current_statement__ = 96;
      stan::math::validate_non_negative_index("amount_sooner", "N", N);
      current_statement__ = 97;
      stan::math::validate_non_negative_index("amount_sooner", "W", W);
      current_statement__ = 98;
      stan::math::validate_non_negative_index("amount_sooner", "Tr_max_itc",
                                              Tr_max_itc);
      current_statement__ = 99;
      context__.validate_dims("data initialization","amount_sooner","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_itc)});
      amount_sooner = 
        std::vector<std::vector<std::vector<double>>>(N, 
          std::vector<std::vector<double>>(W, 
            std::vector<double>(Tr_max_itc, 
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> amount_sooner_flat__;
        current_statement__ = 99;
        amount_sooner_flat__ = context__.vals_r("amount_sooner");
        current_statement__ = 99;
        pos__ = 1;
        current_statement__ = 99;
        for (int sym1__ = 1; sym1__ <= Tr_max_itc; ++sym1__) {
          current_statement__ = 99;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 99;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 99;
              stan::model::assign(amount_sooner,
                amount_sooner_flat__[(pos__ - 1)],
                "assigning variable amount_sooner", stan::model::index_uni(sym3__),
                                                      stan::model::index_uni(sym2__),
                                                      stan::model::index_uni(sym1__));
              current_statement__ = 99;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 99;
      stan::math::check_greater_or_equal(function__, "amount_sooner",
                                            amount_sooner, 0);
      current_statement__ = 100;
      stan::math::validate_non_negative_index("delay_later", "N", N);
      current_statement__ = 101;
      stan::math::validate_non_negative_index("delay_later", "W", W);
      current_statement__ = 102;
      stan::math::validate_non_negative_index("delay_later", "Tr_max_itc",
                                              Tr_max_itc);
      current_statement__ = 103;
      context__.validate_dims("data initialization","delay_later","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_itc)});
      delay_later = 
        std::vector<std::vector<std::vector<double>>>(N, 
          std::vector<std::vector<double>>(W, 
            std::vector<double>(Tr_max_itc, 
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> delay_later_flat__;
        current_statement__ = 103;
        delay_later_flat__ = context__.vals_r("delay_later");
        current_statement__ = 103;
        pos__ = 1;
        current_statement__ = 103;
        for (int sym1__ = 1; sym1__ <= Tr_max_itc; ++sym1__) {
          current_statement__ = 103;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 103;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 103;
              stan::model::assign(delay_later,
                delay_later_flat__[(pos__ - 1)],
                "assigning variable delay_later", stan::model::index_uni(sym3__),
                                                    stan::model::index_uni(sym2__),
                                                    stan::model::index_uni(sym1__));
              current_statement__ = 103;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 103;
      stan::math::check_greater_or_equal(function__, "delay_later",
                                            delay_later, 0);
      current_statement__ = 104;
      stan::math::validate_non_negative_index("choice_itc", "N", N);
      current_statement__ = 105;
      stan::math::validate_non_negative_index("choice_itc", "W", W);
      current_statement__ = 106;
      stan::math::validate_non_negative_index("choice_itc", "Tr_max_itc",
                                              Tr_max_itc);
      current_statement__ = 107;
      context__.validate_dims("data initialization","choice_itc","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_itc)});
      choice_itc = 
        std::vector<std::vector<std::vector<int>>>(N, 
          std::vector<std::vector<int>>(W, 
            std::vector<int>(Tr_max_itc, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> choice_itc_flat__;
        current_statement__ = 107;
        choice_itc_flat__ = context__.vals_i("choice_itc");
        current_statement__ = 107;
        pos__ = 1;
        current_statement__ = 107;
        for (int sym1__ = 1; sym1__ <= Tr_max_itc; ++sym1__) {
          current_statement__ = 107;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 107;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 107;
              stan::model::assign(choice_itc, choice_itc_flat__[(pos__ - 1)],
                "assigning variable choice_itc", stan::model::index_uni(sym3__),
                                                   stan::model::index_uni(sym2__),
                                                   stan::model::index_uni(sym1__));
              current_statement__ = 107;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 107;
      stan::math::check_less_or_equal(function__, "choice_itc", choice_itc, 1);
      current_statement__ = 108;
      context__.validate_dims("data initialization","P_gng","int",
           std::vector<size_t>{});
      P_gng = std::numeric_limits<int>::min();
      
      
      current_statement__ = 108;
      P_gng = context__.vals_i("P_gng")[(1 - 1)];
      current_statement__ = 109;
      stan::math::validate_non_negative_index("idx_gng_obs", "N", N);
      current_statement__ = 110;
      stan::math::validate_non_negative_index("idx_gng_obs", "W", W);
      current_statement__ = 111;
      context__.validate_dims("data initialization","idx_gng_obs","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W)});
      idx_gng_obs = 
        std::vector<std::vector<int>>(N, 
          std::vector<int>(W, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> idx_gng_obs_flat__;
        current_statement__ = 111;
        idx_gng_obs_flat__ = context__.vals_i("idx_gng_obs");
        current_statement__ = 111;
        pos__ = 1;
        current_statement__ = 111;
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          current_statement__ = 111;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 111;
            stan::model::assign(idx_gng_obs, idx_gng_obs_flat__[(pos__ - 1)],
              "assigning variable idx_gng_obs", stan::model::index_uni(sym2__),
                                                  stan::model::index_uni(sym1__));
            current_statement__ = 111;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 111;
      stan::math::check_greater_or_equal(function__, "idx_gng_obs",
                                            idx_gng_obs, 0);
      current_statement__ = 112;
      context__.validate_dims("data initialization","Bl","int",
           std::vector<size_t>{});
      Bl = std::numeric_limits<int>::min();
      
      
      current_statement__ = 112;
      Bl = context__.vals_i("Bl")[(1 - 1)];
      current_statement__ = 112;
      stan::math::check_greater_or_equal(function__, "Bl", Bl, 0);
      current_statement__ = 113;
      context__.validate_dims("data initialization","Tr_max_gng","int",
           std::vector<size_t>{});
      Tr_max_gng = std::numeric_limits<int>::min();
      
      
      current_statement__ = 113;
      Tr_max_gng = context__.vals_i("Tr_max_gng")[(1 - 1)];
      current_statement__ = 113;
      stan::math::check_greater_or_equal(function__, "Tr_max_gng",
                                            Tr_max_gng, 1);
      current_statement__ = 114;
      stan::math::validate_non_negative_index("Tr_gng", "N", N);
      current_statement__ = 115;
      stan::math::validate_non_negative_index("Tr_gng", "W", W);
      current_statement__ = 116;
      stan::math::validate_non_negative_index("Tr_gng", "Bl", Bl);
      current_statement__ = 117;
      context__.validate_dims("data initialization","Tr_gng","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Bl)});
      Tr_gng = 
        std::vector<std::vector<std::vector<int>>>(N, 
          std::vector<std::vector<int>>(W, 
            std::vector<int>(Bl, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> Tr_gng_flat__;
        current_statement__ = 117;
        Tr_gng_flat__ = context__.vals_i("Tr_gng");
        current_statement__ = 117;
        pos__ = 1;
        current_statement__ = 117;
        for (int sym1__ = 1; sym1__ <= Bl; ++sym1__) {
          current_statement__ = 117;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 117;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 117;
              stan::model::assign(Tr_gng, Tr_gng_flat__[(pos__ - 1)],
                "assigning variable Tr_gng", stan::model::index_uni(sym3__),
                                               stan::model::index_uni(sym2__),
                                               stan::model::index_uni(sym1__));
              current_statement__ = 117;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 117;
      stan::math::check_greater_or_equal(function__, "Tr_gng", Tr_gng, 0);
      current_statement__ = 117;
      stan::math::check_less_or_equal(function__, "Tr_gng", Tr_gng,
                                         Tr_max_gng);
      current_statement__ = 118;
      stan::math::validate_non_negative_index("cue_gng", "N", N);
      current_statement__ = 119;
      stan::math::validate_non_negative_index("cue_gng", "W", W);
      current_statement__ = 120;
      stan::math::validate_non_negative_index("cue_gng", "Bl", Bl);
      current_statement__ = 121;
      stan::math::validate_non_negative_index("cue_gng", "Tr_max_gng",
                                              Tr_max_gng);
      current_statement__ = 122;
      context__.validate_dims("data initialization","cue_gng","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Bl),
            static_cast<size_t>(Tr_max_gng)});
      cue_gng = 
        std::vector<std::vector<std::vector<std::vector<int>>>>(N, 
          std::vector<std::vector<std::vector<int>>>(W, 
            std::vector<std::vector<int>>(Bl, 
              std::vector<int>(Tr_max_gng, std::numeric_limits<int>::min()))));
      
      
      {
        std::vector<int> cue_gng_flat__;
        current_statement__ = 122;
        cue_gng_flat__ = context__.vals_i("cue_gng");
        current_statement__ = 122;
        pos__ = 1;
        current_statement__ = 122;
        for (int sym1__ = 1; sym1__ <= Tr_max_gng; ++sym1__) {
          current_statement__ = 122;
          for (int sym2__ = 1; sym2__ <= Bl; ++sym2__) {
            current_statement__ = 122;
            for (int sym3__ = 1; sym3__ <= W; ++sym3__) {
              current_statement__ = 122;
              for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                current_statement__ = 122;
                stan::model::assign(cue_gng, cue_gng_flat__[(pos__ - 1)],
                  "assigning variable cue_gng", stan::model::index_uni(sym4__),
                                                  stan::model::index_uni(sym3__),
                                                  stan::model::index_uni(sym2__),
                                                  stan::model::index_uni(sym1__));
                current_statement__ = 122;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      current_statement__ = 122;
      stan::math::check_greater_or_equal(function__, "cue_gng", cue_gng, 0);
      current_statement__ = 122;
      stan::math::check_less_or_equal(function__, "cue_gng", cue_gng, 4);
      current_statement__ = 123;
      stan::math::validate_non_negative_index("pressed_gng", "N", N);
      current_statement__ = 124;
      stan::math::validate_non_negative_index("pressed_gng", "W", W);
      current_statement__ = 125;
      stan::math::validate_non_negative_index("pressed_gng", "Bl", Bl);
      current_statement__ = 126;
      stan::math::validate_non_negative_index("pressed_gng", "Tr_max_gng",
                                              Tr_max_gng);
      current_statement__ = 127;
      context__.validate_dims("data initialization","pressed_gng","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Bl),
            static_cast<size_t>(Tr_max_gng)});
      pressed_gng = 
        std::vector<std::vector<std::vector<std::vector<int>>>>(N, 
          std::vector<std::vector<std::vector<int>>>(W, 
            std::vector<std::vector<int>>(Bl, 
              std::vector<int>(Tr_max_gng, std::numeric_limits<int>::min()))));
      
      
      {
        std::vector<int> pressed_gng_flat__;
        current_statement__ = 127;
        pressed_gng_flat__ = context__.vals_i("pressed_gng");
        current_statement__ = 127;
        pos__ = 1;
        current_statement__ = 127;
        for (int sym1__ = 1; sym1__ <= Tr_max_gng; ++sym1__) {
          current_statement__ = 127;
          for (int sym2__ = 1; sym2__ <= Bl; ++sym2__) {
            current_statement__ = 127;
            for (int sym3__ = 1; sym3__ <= W; ++sym3__) {
              current_statement__ = 127;
              for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                current_statement__ = 127;
                stan::model::assign(pressed_gng,
                  pressed_gng_flat__[(pos__ - 1)],
                  "assigning variable pressed_gng", stan::model::index_uni(sym4__),
                                                      stan::model::index_uni(sym3__),
                                                      stan::model::index_uni(sym2__),
                                                      stan::model::index_uni(sym1__));
                current_statement__ = 127;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      current_statement__ = 127;
      stan::math::check_less_or_equal(function__, "pressed_gng", pressed_gng,
                                         1);
      current_statement__ = 128;
      stan::math::validate_non_negative_index("outcome_gng", "N", N);
      current_statement__ = 129;
      stan::math::validate_non_negative_index("outcome_gng", "W", W);
      current_statement__ = 130;
      stan::math::validate_non_negative_index("outcome_gng", "Bl", Bl);
      current_statement__ = 131;
      stan::math::validate_non_negative_index("outcome_gng", "Tr_max_gng",
                                              Tr_max_gng);
      current_statement__ = 132;
      context__.validate_dims("data initialization","outcome_gng","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Bl),
            static_cast<size_t>(Tr_max_gng)});
      outcome_gng = 
        std::vector<std::vector<std::vector<std::vector<double>>>>(N, 
          std::vector<std::vector<std::vector<double>>>(W, 
            std::vector<std::vector<double>>(Bl, 
              std::vector<double>(Tr_max_gng, 
                std::numeric_limits<double>::quiet_NaN()))));
      
      
      {
        std::vector<local_scalar_t__> outcome_gng_flat__;
        current_statement__ = 132;
        outcome_gng_flat__ = context__.vals_r("outcome_gng");
        current_statement__ = 132;
        pos__ = 1;
        current_statement__ = 132;
        for (int sym1__ = 1; sym1__ <= Tr_max_gng; ++sym1__) {
          current_statement__ = 132;
          for (int sym2__ = 1; sym2__ <= Bl; ++sym2__) {
            current_statement__ = 132;
            for (int sym3__ = 1; sym3__ <= W; ++sym3__) {
              current_statement__ = 132;
              for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                current_statement__ = 132;
                stan::model::assign(outcome_gng,
                  outcome_gng_flat__[(pos__ - 1)],
                  "assigning variable outcome_gng", stan::model::index_uni(sym4__),
                                                      stan::model::index_uni(sym3__),
                                                      stan::model::index_uni(sym2__),
                                                      stan::model::index_uni(sym1__));
                current_statement__ = 132;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      current_statement__ = 133;
      num_par = std::numeric_limits<int>::min();
      
      
      current_statement__ = 133;
      num_par = P_gng;
      current_statement__ = 134;
      stan::math::validate_non_negative_index("mu_pr", "num_par", num_par);
      current_statement__ = 135;
      stan::math::validate_non_negative_index("sigma_pr", "num_par", num_par);
      current_statement__ = 136;
      stan::math::validate_non_negative_index("mu_pr_sub", "num_par", num_par);
      current_statement__ = 137;
      stan::math::validate_non_negative_index("mu_pr_sub", "N", N);
      current_statement__ = 138;
      stan::math::validate_non_negative_index("sigma_pr_r", "num_par",
                                              num_par);
      current_statement__ = 139;
      stan::math::validate_non_negative_index("xi_gng_pr", "N", N);
      current_statement__ = 140;
      stan::math::validate_non_negative_index("xi_gng_pr", "W", W);
      current_statement__ = 141;
      stan::math::validate_non_negative_index("ep_gng_pr", "N", N);
      current_statement__ = 142;
      stan::math::validate_non_negative_index("ep_gng_pr", "W", W);
      current_statement__ = 143;
      stan::math::validate_non_negative_index("rho_gng_pr", "N", N);
      current_statement__ = 144;
      stan::math::validate_non_negative_index("rho_gng_pr", "W", W);
      current_statement__ = 145;
      stan::math::validate_non_negative_index("b_gng_pr", "N", N);
      current_statement__ = 146;
      stan::math::validate_non_negative_index("b_gng_pr", "W", W);
      current_statement__ = 147;
      stan::math::validate_non_negative_index("pi_gng_pr", "N", N);
      current_statement__ = 148;
      stan::math::validate_non_negative_index("pi_gng_pr", "W", W);
      current_statement__ = 149;
      stan::math::validate_non_negative_index("b_gng", "N", N);
      current_statement__ = 150;
      stan::math::validate_non_negative_index("b_gng", "W", W);
      current_statement__ = 151;
      stan::math::validate_non_negative_index("pi_gng", "N", N);
      current_statement__ = 152;
      stan::math::validate_non_negative_index("pi_gng", "W", W);
      current_statement__ = 153;
      stan::math::validate_non_negative_index("xi_gng", "N", N);
      current_statement__ = 154;
      stan::math::validate_non_negative_index("xi_gng", "W", W);
      current_statement__ = 155;
      stan::math::validate_non_negative_index("ep_gng", "N", N);
      current_statement__ = 156;
      stan::math::validate_non_negative_index("ep_gng", "W", W);
      current_statement__ = 157;
      stan::math::validate_non_negative_index("rho_gng", "N", N);
      current_statement__ = 158;
      stan::math::validate_non_negative_index("rho_gng", "W", W);
      current_statement__ = 159;
      stan::math::validate_non_negative_index("choice_ppc_gng", "Tr_max_gng",
                                              Tr_max_gng);
      current_statement__ = 160;
      stan::math::validate_non_negative_index("choice_ppc_gng", "Bl", Bl);
      current_statement__ = 161;
      stan::math::validate_non_negative_index("choice_ppc_gng", "W", W);
      current_statement__ = 162;
      stan::math::validate_non_negative_index("choice_ppc_gng", "N", N);
      current_statement__ = 163;
      stan::math::validate_non_negative_index("pGo_ppc_gng", "Tr_max_gng",
                                              Tr_max_gng);
      current_statement__ = 164;
      stan::math::validate_non_negative_index("pGo_ppc_gng", "Bl", Bl);
      current_statement__ = 165;
      stan::math::validate_non_negative_index("pGo_ppc_gng", "W", W);
      current_statement__ = 166;
      stan::math::validate_non_negative_index("pGo_ppc_gng", "N", N);
      current_statement__ = 167;
      stan::math::validate_non_negative_index("log_lik_all_subs", "N", N);
      current_statement__ = 168;
      stan::math::validate_non_negative_index("log_lik_all_subs", "W", W);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = num_par + num_par + (num_par * N) + num_par + (N * W)
       + (N * W) + (N * W) + (N * W) + (N * W);
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "gng_hierarchical_independent_unmodified_model_with_gq_final_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_pr =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(num_par,
           DUMMY_VAR__);
      current_statement__ = 1;
      mu_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                num_par);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_pr =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(num_par,
           DUMMY_VAR__);
      current_statement__ = 2;
      sigma_pr = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                   lp__, num_par);
      std::vector<std::vector<local_scalar_t__>> mu_pr_sub =
         std::vector<std::vector<local_scalar_t__>>(num_par, 
           std::vector<local_scalar_t__>(N, DUMMY_VAR__));
      current_statement__ = 3;
      mu_pr_sub = in__.template read<
                    std::vector<std::vector<local_scalar_t__>>>(num_par, N);
      std::vector<local_scalar_t__> sigma_pr_r =
         std::vector<local_scalar_t__>(num_par, DUMMY_VAR__);
      current_statement__ = 4;
      sigma_pr_r = in__.template read_constrain_lb<
                     std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                     num_par);
      std::vector<std::vector<local_scalar_t__>> xi_gng_pr =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      current_statement__ = 5;
      xi_gng_pr = in__.template read<
                    std::vector<std::vector<local_scalar_t__>>>(N, W);
      std::vector<std::vector<local_scalar_t__>> ep_gng_pr =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      current_statement__ = 6;
      ep_gng_pr = in__.template read<
                    std::vector<std::vector<local_scalar_t__>>>(N, W);
      std::vector<std::vector<local_scalar_t__>> rho_gng_pr =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      current_statement__ = 7;
      rho_gng_pr = in__.template read<
                     std::vector<std::vector<local_scalar_t__>>>(N, W);
      std::vector<std::vector<local_scalar_t__>> b_gng_pr =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      current_statement__ = 8;
      b_gng_pr = in__.template read<
                   std::vector<std::vector<local_scalar_t__>>>(N, W);
      std::vector<std::vector<local_scalar_t__>> pi_gng_pr =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      current_statement__ = 9;
      pi_gng_pr = in__.template read<
                    std::vector<std::vector<local_scalar_t__>>>(N, W);
      std::vector<std::vector<local_scalar_t__>> b_gng =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      std::vector<std::vector<local_scalar_t__>> pi_gng =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      std::vector<std::vector<local_scalar_t__>> xi_gng =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      std::vector<std::vector<local_scalar_t__>> ep_gng =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      std::vector<std::vector<local_scalar_t__>> rho_gng =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      current_statement__ = 23;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 21;
        for (int w = 1; w <= W; ++w) {
          current_statement__ = 15;
          stan::model::assign(xi_gng,
            stan::math::Phi(
              (stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
                 stan::model::index_uni(1), stan::model::index_uni(n)) +
                (stan::model::rvalue(sigma_pr_r, "sigma_pr_r",
                   stan::model::index_uni(1)) *
                  stan::model::rvalue(xi_gng_pr, "xi_gng_pr",
                    stan::model::index_uni(n), stan::model::index_uni(w))))),
            "assigning variable xi_gng", stan::model::index_uni(n),
                                           stan::model::index_uni(w));
          current_statement__ = 16;
          stan::model::assign(ep_gng,
            stan::math::Phi(
              (stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
                 stan::model::index_uni(2), stan::model::index_uni(n)) +
                (stan::model::rvalue(sigma_pr_r, "sigma_pr_r",
                   stan::model::index_uni(2)) *
                  stan::model::rvalue(ep_gng_pr, "ep_gng_pr",
                    stan::model::index_uni(n), stan::model::index_uni(w))))),
            "assigning variable ep_gng", stan::model::index_uni(n),
                                           stan::model::index_uni(w));
          current_statement__ = 17;
          stan::model::assign(b_gng,
            (stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
               stan::model::index_uni(3), stan::model::index_uni(n)) +
              (stan::model::rvalue(sigma_pr_r, "sigma_pr_r",
                 stan::model::index_uni(3)) *
                stan::model::rvalue(b_gng_pr, "b_gng_pr",
                  stan::model::index_uni(n), stan::model::index_uni(w)))),
            "assigning variable b_gng", stan::model::index_uni(n),
                                          stan::model::index_uni(w));
          current_statement__ = 18;
          stan::model::assign(pi_gng,
            stan::math::exp(
              (stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
                 stan::model::index_uni(4), stan::model::index_uni(n)) +
                (stan::model::rvalue(sigma_pr_r, "sigma_pr_r",
                   stan::model::index_uni(4)) *
                  stan::model::rvalue(pi_gng_pr, "pi_gng_pr",
                    stan::model::index_uni(n), stan::model::index_uni(w))))),
            "assigning variable pi_gng", stan::model::index_uni(n),
                                           stan::model::index_uni(w));
          current_statement__ = 19;
          stan::model::assign(rho_gng,
            stan::math::exp(
              (stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
                 stan::model::index_uni(5), stan::model::index_uni(n)) +
                (stan::model::rvalue(sigma_pr_r, "sigma_pr_r",
                   stan::model::index_uni(5)) *
                  stan::model::rvalue(rho_gng_pr, "rho_gng_pr",
                    stan::model::index_uni(n), stan::model::index_uni(w))))),
            "assigning variable rho_gng", stan::model::index_uni(n),
                                            stan::model::index_uni(w));
        }
      }
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "pi_gng", pi_gng, 0);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "xi_gng", xi_gng, 0);
      current_statement__ = 12;
      stan::math::check_less_or_equal(function__, "xi_gng", xi_gng, 1);
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "ep_gng", ep_gng, 0);
      current_statement__ = 13;
      stan::math::check_less_or_equal(function__, "ep_gng", ep_gng, 1);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "rho_gng", rho_gng, 0);
      {
        current_statement__ = 70;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_pr, 0, 1));
        current_statement__ = 71;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_pr, 0, 1));
        current_statement__ = 74;
        for (int p = 1; p <= num_par; ++p) {
          current_statement__ = 72;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::math::to_vector(
                stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
                  stan::model::index_uni(p), stan::model::index_omni())),
              stan::model::rvalue(mu_pr, "mu_pr", stan::model::index_uni(p)),
              stan::model::rvalue(sigma_pr, "sigma_pr",
                stan::model::index_uni(p))));
        }
        current_statement__ = 75;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::math::to_vector(sigma_pr_r), 0, 1));
        current_statement__ = 76;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::math::to_vector(stan::math::to_matrix(xi_gng_pr)), 0, 1));
        current_statement__ = 77;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::math::to_vector(stan::math::to_matrix(ep_gng_pr)), 0, 1));
        current_statement__ = 78;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::math::to_vector(stan::math::to_matrix(rho_gng_pr)), 0, 1));
        current_statement__ = 79;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::math::to_vector(stan::math::to_matrix(b_gng_pr)), 0, 1));
        current_statement__ = 80;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::math::to_vector(stan::math::to_matrix(pi_gng_pr)), 0, 1));
        current_statement__ = 81;
        lp_accum__.add(
          stan::math::reduce_sum<partial_sum_rsfunctor__>(choice_itc, 1,
            pstream__, outcome_gng, idx_gng_obs, pressed_gng, cue_gng,
            Tr_gng, Bl, b_gng, pi_gng, xi_gng, ep_gng, rho_gng, W));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "gng_hierarchical_independent_unmodified_model_with_gq_final_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> mu_pr =
         Eigen::Matrix<double, -1, 1>::Constant(num_par,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      mu_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                num_par);
      Eigen::Matrix<double, -1, 1> sigma_pr =
         Eigen::Matrix<double, -1, 1>::Constant(num_par,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      sigma_pr = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                   lp__, num_par);
      std::vector<std::vector<double>> mu_pr_sub =
         std::vector<std::vector<double>>(num_par, 
           std::vector<double>(N, std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 3;
      mu_pr_sub = in__.template read<
                    std::vector<std::vector<local_scalar_t__>>>(num_par, N);
      std::vector<double> sigma_pr_r =
         std::vector<double>(num_par, 
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      sigma_pr_r = in__.template read_constrain_lb<
                     std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                     num_par);
      std::vector<std::vector<double>> xi_gng_pr =
         std::vector<std::vector<double>>(N, 
           std::vector<double>(W, std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 5;
      xi_gng_pr = in__.template read<
                    std::vector<std::vector<local_scalar_t__>>>(N, W);
      std::vector<std::vector<double>> ep_gng_pr =
         std::vector<std::vector<double>>(N, 
           std::vector<double>(W, std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 6;
      ep_gng_pr = in__.template read<
                    std::vector<std::vector<local_scalar_t__>>>(N, W);
      std::vector<std::vector<double>> rho_gng_pr =
         std::vector<std::vector<double>>(N, 
           std::vector<double>(W, std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 7;
      rho_gng_pr = in__.template read<
                     std::vector<std::vector<local_scalar_t__>>>(N, W);
      std::vector<std::vector<double>> b_gng_pr =
         std::vector<std::vector<double>>(N, 
           std::vector<double>(W, std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 8;
      b_gng_pr = in__.template read<
                   std::vector<std::vector<local_scalar_t__>>>(N, W);
      std::vector<std::vector<double>> pi_gng_pr =
         std::vector<std::vector<double>>(N, 
           std::vector<double>(W, std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 9;
      pi_gng_pr = in__.template read<
                    std::vector<std::vector<local_scalar_t__>>>(N, W);
      std::vector<std::vector<double>> b_gng =
         std::vector<std::vector<double>>(N, 
           std::vector<double>(W, std::numeric_limits<double>::quiet_NaN()));
      std::vector<std::vector<double>> pi_gng =
         std::vector<std::vector<double>>(N, 
           std::vector<double>(W, std::numeric_limits<double>::quiet_NaN()));
      std::vector<std::vector<double>> xi_gng =
         std::vector<std::vector<double>>(N, 
           std::vector<double>(W, std::numeric_limits<double>::quiet_NaN()));
      std::vector<std::vector<double>> ep_gng =
         std::vector<std::vector<double>>(N, 
           std::vector<double>(W, std::numeric_limits<double>::quiet_NaN()));
      std::vector<std::vector<double>> rho_gng =
         std::vector<std::vector<double>>(N, 
           std::vector<double>(W, std::numeric_limits<double>::quiet_NaN()));
      out__.write(mu_pr);
      out__.write(sigma_pr);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= num_par; ++sym2__) {
          out__.write(mu_pr_sub[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(sigma_pr_r);
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(xi_gng_pr[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(ep_gng_pr[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(rho_gng_pr[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(b_gng_pr[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(pi_gng_pr[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 23;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 21;
        for (int w = 1; w <= W; ++w) {
          current_statement__ = 15;
          stan::model::assign(xi_gng,
            stan::math::Phi(
              (stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
                 stan::model::index_uni(1), stan::model::index_uni(n)) +
                (stan::model::rvalue(sigma_pr_r, "sigma_pr_r",
                   stan::model::index_uni(1)) *
                  stan::model::rvalue(xi_gng_pr, "xi_gng_pr",
                    stan::model::index_uni(n), stan::model::index_uni(w))))),
            "assigning variable xi_gng", stan::model::index_uni(n),
                                           stan::model::index_uni(w));
          current_statement__ = 16;
          stan::model::assign(ep_gng,
            stan::math::Phi(
              (stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
                 stan::model::index_uni(2), stan::model::index_uni(n)) +
                (stan::model::rvalue(sigma_pr_r, "sigma_pr_r",
                   stan::model::index_uni(2)) *
                  stan::model::rvalue(ep_gng_pr, "ep_gng_pr",
                    stan::model::index_uni(n), stan::model::index_uni(w))))),
            "assigning variable ep_gng", stan::model::index_uni(n),
                                           stan::model::index_uni(w));
          current_statement__ = 17;
          stan::model::assign(b_gng,
            (stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
               stan::model::index_uni(3), stan::model::index_uni(n)) +
              (stan::model::rvalue(sigma_pr_r, "sigma_pr_r",
                 stan::model::index_uni(3)) *
                stan::model::rvalue(b_gng_pr, "b_gng_pr",
                  stan::model::index_uni(n), stan::model::index_uni(w)))),
            "assigning variable b_gng", stan::model::index_uni(n),
                                          stan::model::index_uni(w));
          current_statement__ = 18;
          stan::model::assign(pi_gng,
            stan::math::exp(
              (stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
                 stan::model::index_uni(4), stan::model::index_uni(n)) +
                (stan::model::rvalue(sigma_pr_r, "sigma_pr_r",
                   stan::model::index_uni(4)) *
                  stan::model::rvalue(pi_gng_pr, "pi_gng_pr",
                    stan::model::index_uni(n), stan::model::index_uni(w))))),
            "assigning variable pi_gng", stan::model::index_uni(n),
                                           stan::model::index_uni(w));
          current_statement__ = 19;
          stan::model::assign(rho_gng,
            stan::math::exp(
              (stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
                 stan::model::index_uni(5), stan::model::index_uni(n)) +
                (stan::model::rvalue(sigma_pr_r, "sigma_pr_r",
                   stan::model::index_uni(5)) *
                  stan::model::rvalue(rho_gng_pr, "rho_gng_pr",
                    stan::model::index_uni(n), stan::model::index_uni(w))))),
            "assigning variable rho_gng", stan::model::index_uni(n),
                                            stan::model::index_uni(w));
        }
      }
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "pi_gng", pi_gng, 0);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "xi_gng", xi_gng, 0);
      current_statement__ = 12;
      stan::math::check_less_or_equal(function__, "xi_gng", xi_gng, 1);
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "ep_gng", ep_gng, 0);
      current_statement__ = 13;
      stan::math::check_less_or_equal(function__, "ep_gng", ep_gng, 1);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "rho_gng", rho_gng, 0);
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            out__.write(b_gng[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            out__.write(pi_gng[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            out__.write(xi_gng[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            out__.write(ep_gng[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            out__.write(rho_gng[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<std::vector<std::vector<std::vector<double>>>> choice_ppc_gng =
         std::vector<std::vector<std::vector<std::vector<double>>>>(
           Tr_max_gng, 
           std::vector<std::vector<std::vector<double>>>(Bl, 
             std::vector<std::vector<double>>(W, 
               std::vector<double>(N, 
                 std::numeric_limits<double>::quiet_NaN()))));
      std::vector<std::vector<std::vector<std::vector<double>>>> pGo_ppc_gng =
         std::vector<std::vector<std::vector<std::vector<double>>>>(
           Tr_max_gng, 
           std::vector<std::vector<std::vector<double>>>(Bl, 
             std::vector<std::vector<double>>(W, 
               std::vector<double>(N, 
                 std::numeric_limits<double>::quiet_NaN()))));
      std::vector<std::vector<double>> log_lik_all_subs =
         std::vector<std::vector<double>>(N, 
           std::vector<double>(W, std::numeric_limits<double>::quiet_NaN()));
      int b = std::numeric_limits<int>::min();
      current_statement__ = 37;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 35;
        for (int w = 1; w <= W; ++w) {
          current_statement__ = 33;
          for (int t = 1; t <= Tr_max_gng; ++t) {
            current_statement__ = 31;
            for (int bl = 1; bl <= Bl; ++bl) {
              current_statement__ = 28;
              stan::model::assign(choice_ppc_gng, -2,
                "assigning variable choice_ppc_gng", stan::model::index_uni(t),
                                                       stan::model::index_uni(bl),
                                                       stan::model::index_uni(w),
                                                       stan::model::index_uni(n));
              current_statement__ = 29;
              stan::model::assign(pGo_ppc_gng, -2,
                "assigning variable pGo_ppc_gng", stan::model::index_uni(t),
                                                    stan::model::index_uni(bl),
                                                    stan::model::index_uni(w),
                                                    stan::model::index_uni(n));
            }
          }
        }
      }
      current_statement__ = 69;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 67;
        for (int w = 1; w <= W; ++w) {
          current_statement__ = 38;
          stan::model::assign(log_lik_all_subs, 0,
            "assigning variable log_lik_all_subs", stan::model::index_uni(n),
                                                     stan::model::index_uni(w));
          current_statement__ = 65;
          if (stan::math::logical_neq(
                stan::model::rvalue(idx_gng_obs, "idx_gng_obs",
                  stan::model::index_uni(n), stan::model::index_uni(w)), 0)) {
            current_statement__ = 63;
            for (int bl = 1; bl <= Bl; ++bl) {
              Eigen::Matrix<double, -1, 1> wv_g =
                 Eigen::Matrix<double, -1, 1>::Constant(4,
                   std::numeric_limits<double>::quiet_NaN());
              current_statement__ = 39;
              stan::model::assign(wv_g, stan::math::rep_vector(0.0, 4),
                "assigning variable wv_g");
              Eigen::Matrix<double, -1, 1> wv_ng =
                 Eigen::Matrix<double, -1, 1>::Constant(4,
                   std::numeric_limits<double>::quiet_NaN());
              current_statement__ = 40;
              stan::model::assign(wv_ng, stan::math::rep_vector(0.0, 4),
                "assigning variable wv_ng");
              Eigen::Matrix<double, -1, 1> qv_g =
                 Eigen::Matrix<double, -1, 1>::Constant(4,
                   std::numeric_limits<double>::quiet_NaN());
              current_statement__ = 41;
              stan::model::assign(qv_g, stan::math::rep_vector(0.0, 4),
                "assigning variable qv_g");
              Eigen::Matrix<double, -1, 1> qv_ng =
                 Eigen::Matrix<double, -1, 1>::Constant(4,
                   std::numeric_limits<double>::quiet_NaN());
              current_statement__ = 42;
              stan::model::assign(qv_ng, stan::math::rep_vector(0.0, 4),
                "assigning variable qv_ng");
              Eigen::Matrix<double, -1, 1> sv =
                 Eigen::Matrix<double, -1, 1>::Constant(4,
                   std::numeric_limits<double>::quiet_NaN());
              current_statement__ = 43;
              stan::model::assign(sv, stan::math::rep_vector(0.0, 4),
                "assigning variable sv");
              Eigen::Matrix<double, -1, 1> pGo =
                 Eigen::Matrix<double, -1, 1>::Constant(4,
                   std::numeric_limits<double>::quiet_NaN());
              current_statement__ = 44;
              stan::model::assign(pGo, stan::math::rep_vector(0.0, 4),
                "assigning variable pGo");
              current_statement__ = 61;
              for (int t = 1;
                   t <= stan::model::rvalue(Tr_gng, "Tr_gng",
                          stan::model::index_uni(n),
                            stan::model::index_uni(w),
                            stan::model::index_uni(bl));
                   ++t) {
                current_statement__ = 45;
                stan::model::assign(wv_g,
                  ((stan::model::rvalue(qv_g, "qv_g",
                      stan::model::index_uni(stan::model::rvalue(cue_gng,
                                               "cue_gng",
                                               stan::model::index_uni(n),
                                                 stan::model::index_uni(w),
                                                 stan::model::index_uni(bl),
                                                 stan::model::index_uni(t))))
                     +
                     stan::model::rvalue(b_gng, "b_gng",
                       stan::model::index_uni(n), stan::model::index_uni(w)))
                    +
                    (stan::model::rvalue(pi_gng, "pi_gng",
                       stan::model::index_uni(n), stan::model::index_uni(w))
                      *
                      stan::model::rvalue(sv, "sv",
                        stan::model::index_uni(stan::model::rvalue(cue_gng,
                                                 "cue_gng",
                                                 stan::model::index_uni(n),
                                                   stan::model::index_uni(w),
                                                   stan::model::index_uni(bl),
                                                   stan::model::index_uni(t)))))),
                  "assigning variable wv_g", stan::model::index_uni(stan::model::rvalue(
                                                                    cue_gng,
                                                                    "cue_gng",
                                                                    stan::model::index_uni(n),
                                                                    stan::model::index_uni(w),
                                                                    stan::model::index_uni(bl),
                                                                    stan::model::index_uni(t))));
                current_statement__ = 46;
                stan::model::assign(wv_ng,
                  stan::model::rvalue(qv_ng, "qv_ng",
                    stan::model::index_uni(stan::model::rvalue(cue_gng,
                                             "cue_gng",
                                             stan::model::index_uni(n),
                                               stan::model::index_uni(w),
                                               stan::model::index_uni(bl),
                                               stan::model::index_uni(t)))),
                  "assigning variable wv_ng", stan::model::index_uni(
                                                stan::model::rvalue(cue_gng,
                                                  "cue_gng",
                                                  stan::model::index_uni(n),
                                                    stan::model::index_uni(w),
                                                    stan::model::index_uni(bl),
                                                    stan::model::index_uni(t))));
                current_statement__ = 47;
                stan::model::assign(pGo,
                  stan::math::inv_logit(
                    (stan::model::rvalue(wv_g, "wv_g",
                       stan::model::index_uni(stan::model::rvalue(cue_gng,
                                                "cue_gng",
                                                stan::model::index_uni(n),
                                                  stan::model::index_uni(w),
                                                  stan::model::index_uni(bl),
                                                  stan::model::index_uni(t))))
                      -
                      stan::model::rvalue(wv_ng, "wv_ng",
                        stan::model::index_uni(stan::model::rvalue(cue_gng,
                                                 "cue_gng",
                                                 stan::model::index_uni(n),
                                                   stan::model::index_uni(w),
                                                   stan::model::index_uni(bl),
                                                   stan::model::index_uni(t)))))),
                  "assigning variable pGo", stan::model::index_uni(stan::model::rvalue(
                                                                    cue_gng,
                                                                    "cue_gng",
                                                                    stan::model::index_uni(n),
                                                                    stan::model::index_uni(w),
                                                                    stan::model::index_uni(bl),
                                                                    stan::model::index_uni(t))));
                {
                  current_statement__ = 48;
                  stan::model::assign(pGo,
                    (stan::model::rvalue(pGo, "pGo",
                       stan::model::index_uni(stan::model::rvalue(cue_gng,
                                                "cue_gng",
                                                stan::model::index_uni(n),
                                                  stan::model::index_uni(w),
                                                  stan::model::index_uni(bl),
                                                  stan::model::index_uni(t))))
                      *
                      (1 -
                        stan::model::rvalue(xi_gng, "xi_gng",
                          stan::model::index_uni(n),
                            stan::model::index_uni(w)))),
                    "assigning variable pGo", stan::model::index_uni(
                                                stan::model::rvalue(cue_gng,
                                                  "cue_gng",
                                                  stan::model::index_uni(n),
                                                    stan::model::index_uni(w),
                                                    stan::model::index_uni(bl),
                                                    stan::model::index_uni(t))));
                  current_statement__ = 49;
                  stan::model::assign(pGo,
                    (stan::model::rvalue(pGo, "pGo",
                       stan::model::index_uni(stan::model::rvalue(cue_gng,
                                                "cue_gng",
                                                stan::model::index_uni(n),
                                                  stan::model::index_uni(w),
                                                  stan::model::index_uni(bl),
                                                  stan::model::index_uni(t))))
                      +
                      (stan::model::rvalue(xi_gng, "xi_gng",
                         stan::model::index_uni(n), stan::model::index_uni(w))
                        / 2)),
                    "assigning variable pGo", stan::model::index_uni(
                                                stan::model::rvalue(cue_gng,
                                                  "cue_gng",
                                                  stan::model::index_uni(n),
                                                    stan::model::index_uni(w),
                                                    stan::model::index_uni(bl),
                                                    stan::model::index_uni(t))));
                }
                current_statement__ = 51;
                stan::model::assign(pGo_ppc_gng,
                  stan::model::rvalue(pGo, "pGo",
                    stan::model::index_uni(stan::model::rvalue(cue_gng,
                                             "cue_gng",
                                             stan::model::index_uni(n),
                                               stan::model::index_uni(w),
                                               stan::model::index_uni(bl),
                                               stan::model::index_uni(t)))),
                  "assigning variable pGo_ppc_gng", stan::model::index_uni(t),
                                                      stan::model::index_uni(bl),
                                                      stan::model::index_uni(w),
                                                      stan::model::index_uni(n));
                current_statement__ = 52;
                stan::model::assign(choice_ppc_gng,
                  stan::math::bernoulli_rng(
                    stan::model::rvalue(pGo, "pGo",
                      stan::model::index_uni(stan::model::rvalue(cue_gng,
                                               "cue_gng",
                                               stan::model::index_uni(n),
                                                 stan::model::index_uni(w),
                                                 stan::model::index_uni(bl),
                                                 stan::model::index_uni(t)))),
                    base_rng__),
                  "assigning variable choice_ppc_gng", stan::model::index_uni(t),
                                                         stan::model::index_uni(bl),
                                                         stan::model::index_uni(w),
                                                         stan::model::index_uni(n));
                current_statement__ = 53;
                stan::model::assign(log_lik_all_subs,
                  (stan::model::rvalue(log_lik_all_subs, "log_lik_all_subs",
                     stan::model::index_uni(n), stan::model::index_uni(w)) +
                    stan::math::bernoulli_lpmf<false>(
                      stan::model::rvalue(pressed_gng, "pressed_gng",
                        stan::model::index_uni(n), stan::model::index_uni(w),
                          stan::model::index_uni(bl),
                          stan::model::index_uni(t)),
                      stan::model::rvalue(pGo, "pGo",
                        stan::model::index_uni(stan::model::rvalue(cue_gng,
                                                 "cue_gng",
                                                 stan::model::index_uni(n),
                                                   stan::model::index_uni(w),
                                                   stan::model::index_uni(bl),
                                                   stan::model::index_uni(t)))))),
                  "assigning variable log_lik_all_subs", stan::model::index_uni(n),
                                                           stan::model::index_uni(w));
                current_statement__ = 54;
                stan::model::assign(sv,
                  (stan::model::rvalue(sv, "sv",
                     stan::model::index_uni(stan::model::rvalue(cue_gng,
                                              "cue_gng",
                                              stan::model::index_uni(n),
                                                stan::model::index_uni(w),
                                                stan::model::index_uni(bl),
                                                stan::model::index_uni(t))))
                    +
                    (stan::model::rvalue(ep_gng, "ep_gng",
                       stan::model::index_uni(n), stan::model::index_uni(w))
                      *
                      ((stan::model::rvalue(rho_gng, "rho_gng",
                          stan::model::index_uni(n),
                            stan::model::index_uni(w)) *
                         stan::model::rvalue(outcome_gng, "outcome_gng",
                           stan::model::index_uni(n),
                             stan::model::index_uni(w),
                             stan::model::index_uni(bl),
                             stan::model::index_uni(t))) -
                        stan::model::rvalue(sv, "sv",
                          stan::model::index_uni(stan::model::rvalue(cue_gng,
                                                   "cue_gng",
                                                   stan::model::index_uni(n),
                                                     stan::model::index_uni(w),
                                                     stan::model::index_uni(bl),
                                                     stan::model::index_uni(t))))))),
                  "assigning variable sv", stan::model::index_uni(stan::model::rvalue(
                                                                    cue_gng,
                                                                    "cue_gng",
                                                                    stan::model::index_uni(n),
                                                                    stan::model::index_uni(w),
                                                                    stan::model::index_uni(bl),
                                                                    stan::model::index_uni(t))));
                current_statement__ = 59;
                if (stan::model::rvalue(pressed_gng, "pressed_gng",
                      stan::model::index_uni(n), stan::model::index_uni(w),
                        stan::model::index_uni(bl), stan::model::index_uni(t))) {
                  current_statement__ = 57;
                  stan::model::assign(qv_g,
                    (stan::model::rvalue(qv_g, "qv_g",
                       stan::model::index_uni(stan::model::rvalue(cue_gng,
                                                "cue_gng",
                                                stan::model::index_uni(n),
                                                  stan::model::index_uni(w),
                                                  stan::model::index_uni(bl),
                                                  stan::model::index_uni(t))))
                      +
                      (stan::model::rvalue(ep_gng, "ep_gng",
                         stan::model::index_uni(n), stan::model::index_uni(w))
                        *
                        ((stan::model::rvalue(rho_gng, "rho_gng",
                            stan::model::index_uni(n),
                              stan::model::index_uni(w)) *
                           stan::model::rvalue(outcome_gng, "outcome_gng",
                             stan::model::index_uni(n),
                               stan::model::index_uni(w),
                               stan::model::index_uni(bl),
                               stan::model::index_uni(t))) -
                          stan::model::rvalue(qv_g, "qv_g",
                            stan::model::index_uni(stan::model::rvalue(
                                                     cue_gng, "cue_gng",
                                                     stan::model::index_uni(n),
                                                       stan::model::index_uni(w),
                                                       stan::model::index_uni(bl),
                                                       stan::model::index_uni(t))))))),
                    "assigning variable qv_g", stan::model::index_uni(
                                                 stan::model::rvalue(cue_gng,
                                                   "cue_gng",
                                                   stan::model::index_uni(n),
                                                     stan::model::index_uni(w),
                                                     stan::model::index_uni(bl),
                                                     stan::model::index_uni(t))));
                } else {
                  current_statement__ = 55;
                  stan::model::assign(qv_ng,
                    (stan::model::rvalue(qv_ng, "qv_ng",
                       stan::model::index_uni(stan::model::rvalue(cue_gng,
                                                "cue_gng",
                                                stan::model::index_uni(n),
                                                  stan::model::index_uni(w),
                                                  stan::model::index_uni(bl),
                                                  stan::model::index_uni(t))))
                      +
                      (stan::model::rvalue(ep_gng, "ep_gng",
                         stan::model::index_uni(n), stan::model::index_uni(w))
                        *
                        ((stan::model::rvalue(rho_gng, "rho_gng",
                            stan::model::index_uni(n),
                              stan::model::index_uni(w)) *
                           stan::model::rvalue(outcome_gng, "outcome_gng",
                             stan::model::index_uni(n),
                               stan::model::index_uni(w),
                               stan::model::index_uni(bl),
                               stan::model::index_uni(t))) -
                          stan::model::rvalue(qv_ng, "qv_ng",
                            stan::model::index_uni(stan::model::rvalue(
                                                     cue_gng, "cue_gng",
                                                     stan::model::index_uni(n),
                                                       stan::model::index_uni(w),
                                                       stan::model::index_uni(bl),
                                                       stan::model::index_uni(t))))))),
                    "assigning variable qv_ng", stan::model::index_uni(
                                                  stan::model::rvalue(
                                                    cue_gng, "cue_gng",
                                                    stan::model::index_uni(n),
                                                      stan::model::index_uni(w),
                                                      stan::model::index_uni(bl),
                                                      stan::model::index_uni(t))));
                }
              }
            }
          } 
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= Bl; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= Tr_max_gng; ++sym4__) {
              out__.write(
                choice_ppc_gng[(sym4__ - 1)][(sym3__ - 1)][(sym2__ - 1)][
                (sym1__ - 1)]);
            }
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= Bl; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= Tr_max_gng; ++sym4__) {
              out__.write(
                pGo_ppc_gng[(sym4__ - 1)][(sym3__ - 1)][(sym2__ - 1)][
                (sym1__ - 1)]);
            }
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(log_lik_all_subs[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(b);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_pr =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(num_par,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
        stan::model::assign(mu_pr, in__.read<local_scalar_t__>(),
          "assigning variable mu_pr", stan::model::index_uni(sym1__));
      }
      out__.write(mu_pr);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_pr =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(num_par,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
        stan::model::assign(sigma_pr, in__.read<local_scalar_t__>(),
          "assigning variable sigma_pr", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, sigma_pr);
      std::vector<std::vector<local_scalar_t__>> mu_pr_sub =
         std::vector<std::vector<local_scalar_t__>>(num_par, 
           std::vector<local_scalar_t__>(N, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= num_par; ++sym2__) {
          mu_pr_sub[(sym2__ - 1)][(sym1__ - 1)] = in__.read<
                                                    local_scalar_t__>();
        }
      }
      out__.write(mu_pr_sub);
      std::vector<local_scalar_t__> sigma_pr_r =
         std::vector<local_scalar_t__>(num_par, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
        sigma_pr_r[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write_free_lb(0, sigma_pr_r);
      std::vector<std::vector<local_scalar_t__>> xi_gng_pr =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          xi_gng_pr[(sym2__ - 1)][(sym1__ - 1)] = in__.read<
                                                    local_scalar_t__>();
        }
      }
      out__.write(xi_gng_pr);
      std::vector<std::vector<local_scalar_t__>> ep_gng_pr =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          ep_gng_pr[(sym2__ - 1)][(sym1__ - 1)] = in__.read<
                                                    local_scalar_t__>();
        }
      }
      out__.write(ep_gng_pr);
      std::vector<std::vector<local_scalar_t__>> rho_gng_pr =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          rho_gng_pr[(sym2__ - 1)][(sym1__ - 1)] = in__.read<
                                                     local_scalar_t__>();
        }
      }
      out__.write(rho_gng_pr);
      std::vector<std::vector<local_scalar_t__>> b_gng_pr =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          b_gng_pr[(sym2__ - 1)][(sym1__ - 1)] = in__.read<
                                                   local_scalar_t__>();
        }
      }
      out__.write(b_gng_pr);
      std::vector<std::vector<local_scalar_t__>> pi_gng_pr =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          pi_gng_pr[(sym2__ - 1)][(sym1__ - 1)] = in__.read<
                                                    local_scalar_t__>();
        }
      }
      out__.write(pi_gng_pr);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mu_pr", "sigma_pr", "mu_pr_sub",
      "sigma_pr_r", "xi_gng_pr", "ep_gng_pr", "rho_gng_pr", "b_gng_pr",
      "pi_gng_pr", "b_gng", "pi_gng", "xi_gng", "ep_gng", "rho_gng",
      "choice_ppc_gng", "pGo_ppc_gng", "log_lik_all_subs", "b"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(num_par)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(num_par)},
      std::vector<size_t>{static_cast<size_t>(num_par),
                          static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(num_par)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(W)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(W)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(W)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(W)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(W)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(W)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(W)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(W)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(W)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(W)},
      std::vector<size_t>{static_cast<size_t>(Tr_max_gng),
                          static_cast<size_t>(Bl), static_cast<size_t>(W),
                          static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(Tr_max_gng),
                          static_cast<size_t>(Bl), static_cast<size_t>(W),
                          static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(W)},
      std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_pr" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_pr" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= num_par; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "mu_pr_sub" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_pr_r" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "xi_gng_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "ep_gng_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "rho_gng_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "b_gng_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "pi_gng_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "b_gng" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pi_gng" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "xi_gng" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ep_gng" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "rho_gng" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= Bl; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= Tr_max_gng; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "choice_ppc_gng" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= Bl; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= Tr_max_gng; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "pGo_ppc_gng" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "log_lik_all_subs" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "b");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_pr" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_pr" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= num_par; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "mu_pr_sub" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_pr_r" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "xi_gng_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "ep_gng_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "rho_gng_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "b_gng_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "pi_gng_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "b_gng" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pi_gng" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "xi_gng" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ep_gng" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "rho_gng" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= Bl; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= Tr_max_gng; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "choice_ppc_gng" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= Bl; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= Tr_max_gng; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "pGo_ppc_gng" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "log_lik_all_subs" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "b");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_pr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(num_par) + "},\"block\":\"parameters\"},{\"name\":\"sigma_pr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(num_par) + "},\"block\":\"parameters\"},{\"name\":\"mu_pr_sub\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(num_par) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"sigma_pr_r\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(num_par) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"xi_gng_pr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"ep_gng_pr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"rho_gng_pr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"b_gng_pr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"pi_gng_pr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"b_gng\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"pi_gng\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"xi_gng\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"ep_gng\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"rho_gng\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"choice_ppc_gng\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Tr_max_gng) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(Bl) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}}}},\"block\":\"generated_quantities\"},{\"name\":\"pGo_ppc_gng\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Tr_max_gng) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(Bl) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}}}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_all_subs\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"b\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_pr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(num_par) + "},\"block\":\"parameters\"},{\"name\":\"sigma_pr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(num_par) + "},\"block\":\"parameters\"},{\"name\":\"mu_pr_sub\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(num_par) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"sigma_pr_r\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(num_par) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"xi_gng_pr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"ep_gng_pr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"rho_gng_pr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"b_gng_pr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"pi_gng_pr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"b_gng\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"pi_gng\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"xi_gng\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"ep_gng\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"rho_gng\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"choice_ppc_gng\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Tr_max_gng) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(Bl) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}}}},\"block\":\"generated_quantities\"},{\"name\":\"pGo_ppc_gng\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Tr_max_gng) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(Bl) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}}}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_all_subs\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"b\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((num_par + num_par) + (num_par * N)) + num_par) + (N * W)) +
       (N * W)) + (N * W)) + (N * W)) + (N * W));
      const size_t num_transformed = emit_transformed_parameters * 
  (((((N * W) + (N * W)) + (N * W)) + (N * W)) + (N * W));
      const size_t num_gen_quantities = emit_generated_quantities * 
  ((((((Tr_max_gng * Bl) * W) * N) + (((Tr_max_gng * Bl) * W) * N)) +
     (N * W)) + 1);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((num_par + num_par) + (num_par * N)) + num_par) + (N * W)) +
       (N * W)) + (N * W)) + (N * W)) + (N * W));
      const size_t num_transformed = emit_transformed_parameters * 
  (((((N * W) + (N * W)) + (N * W)) + (N * W)) + (N * W));
      const size_t num_gen_quantities = emit_generated_quantities * 
  ((((((Tr_max_gng * Bl) * W) * N) + (((Tr_max_gng * Bl) * W) * N)) +
     (N * W)) + 1);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 9> names__{"mu_pr", "sigma_pr",
      "mu_pr_sub", "sigma_pr_r", "xi_gng_pr", "ep_gng_pr", "rho_gng_pr",
      "b_gng_pr", "pi_gng_pr"};
      const std::array<Eigen::Index, 9> constrain_param_sizes__{num_par,
       num_par, (num_par * N), num_par, (N * W), (N * W), (N * W), (N * W),
       (N * W)};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = gng_hierarchical_independent_unmodified_model_with_gq_final_model_namespace::gng_hierarchical_independent_unmodified_model_with_gq_final_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return gng_hierarchical_independent_unmodified_model_with_gq_final_model_namespace::profiles__;
}

#endif


