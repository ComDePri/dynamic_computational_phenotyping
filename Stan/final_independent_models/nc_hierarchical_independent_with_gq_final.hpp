
// Code generated by stanc v2.29.2
#include <stan/model/model_header.hpp>
namespace nc_hierarchical_independent_with_gq_final_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 112> locations_array__ = 
{" (found before start of program)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 57, column 4 to column 15)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 58, column 4 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 59, column 4 to column 22)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 60, column 4 to column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 62, column 4 to column 26)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 67, column 4 to column 32)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 71, column 12 to column 76)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 70, column 23 to line 72, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 70, column 8 to line 72, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 69, column 19 to line 73, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 69, column 4 to line 73, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 95, column 4 to column 45)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 97, column 4 to column 32)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 99, column 4 to column 10)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 105, column 16 to column 48)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 104, column 35 to line 106, column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 104, column 12 to line 106, column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 103, column 23 to line 107, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 103, column 8 to line 107, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 102, column 19 to line 108, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 102, column 4 to line 108, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 114, column 12 to column 38)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 118, column 18 to column 80)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 120, column 20 to column 126)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 121, column 20 to column 88)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 117, column 40 to line 122, column 17)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 117, column 16 to line 122, column 17)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 116, column 38 to line 123, column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 116, column 12 to line 123, column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 112, column 23 to line 124, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 112, column 8 to line 124, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 111, column 19 to line 125, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 111, column 4 to line 125, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 79, column 4 to column 26)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 80, column 4 to column 28)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 83, column 4 to column 51)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 85, column 4 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 88, column 4 to column 53)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 90, column 5 to column 113)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 29, column 4 to column 10)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 30, column 4 to column 10)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 31, column 4 to column 14)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 32, column 29 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 32, column 31 to column 32)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 32, column 4 to column 34)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 33, column 4 to column 28)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 34, column 24 to column 25)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 34, column 27 to column 28)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 34, column 4 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 35, column 31 to column 32)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 35, column 33 to column 34)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 35, column 35 to column 45)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 35, column 4 to column 47)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 36, column 32 to column 33)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 36, column 34 to column 35)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 36, column 36 to column 46)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 36, column 4 to column 48)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 37, column 30 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 37, column 32 to column 33)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 37, column 34 to column 44)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 37, column 4 to column 46)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 38, column 28 to column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 38, column 30 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 38, column 32 to column 42)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 38, column 4 to column 44)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 41, column 4 to column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 42, column 26 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 42, column 4 to column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 43, column 28 to column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 43, column 30 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 43, column 4 to column 33)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 44, column 4 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 45, column 23 to column 24)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 45, column 26 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 45, column 4 to column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 46, column 15 to column 16)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 46, column 18 to column 19)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 46, column 21 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 46, column 4 to column 32)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 47, column 16 to column 17)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 47, column 19 to column 20)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 47, column 22 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 47, column 4 to column 33)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 48, column 18 to column 19)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 48, column 21 to column 22)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 48, column 24 to column 33)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 48, column 4 to column 35)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 53, column 4 to column 22)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 59, column 19 to column 20)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 62, column 21 to column 22)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 62, column 23 to column 24)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 67, column 27 to column 28)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 67, column 29 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 95, column 29 to column 38)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 95, column 40 to column 41)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 95, column 42 to column 43)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 97, column 26 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 97, column 29 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 8, column 1 to column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 11, column 2 to column 26)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 16, column 21 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 16, column 14 to column 130)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 17, column 13 to column 71)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 15, column 36 to line 18, column 10)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 15, column 10 to line 18, column 10)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 13, column 17 to line 19, column 3)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 13, column 2 to line 19, column 3)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 9, column 28 to line 20, column 2)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 9, column 1 to line 20, column 2)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 21, column 1 to column 11)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/nc_hierarchical_independent_with_gq_final.stan', line 6, column 75 to line 22, column 2)"};

struct partial_sum_functor__ {
  template <typename T4__, typename T7__,
            stan::require_stan_scalar_t<T4__>* = nullptr,
            stan::require_stan_scalar_t<T7__>* = nullptr>
  stan::promote_args_t<T4__, T7__>
  operator()(const std::vector<std::vector<std::vector<int>>>& choice_itc,
             const int& start, const int& end,
             const std::vector<std::vector<std::vector<int>>>& choice_nc,
             const std::vector<std::vector<T4__>>& weber_nc,
             const std::vector<std::vector<int>>& idx_nc_obs,
             const std::vector<std::vector<std::vector<int>>>& deltaM,
             const std::vector<std::vector<std::vector<T7__>>>& TotalS,
             const std::vector<std::vector<int>>& Tr_nc, const int& W,
             std::ostream* pstream__) const;
};
struct partial_sum_rsfunctor__ {
  template <typename T4__, typename T7__,
            stan::require_stan_scalar_t<T4__>* = nullptr,
            stan::require_stan_scalar_t<T7__>* = nullptr>
  stan::promote_args_t<T4__, T7__>
  operator()(const std::vector<std::vector<std::vector<int>>>& choice_itc,
             const int& start, const int& end, std::ostream* pstream__,
             const std::vector<std::vector<std::vector<int>>>& choice_nc,
             const std::vector<std::vector<T4__>>& weber_nc,
             const std::vector<std::vector<int>>& idx_nc_obs,
             const std::vector<std::vector<std::vector<int>>>& deltaM,
             const std::vector<std::vector<std::vector<T7__>>>& TotalS,
             const std::vector<std::vector<int>>& Tr_nc, const int& W) const;
};

template <typename T4__, typename T7__,
          stan::require_stan_scalar_t<T4__>* = nullptr,
          stan::require_stan_scalar_t<T7__>* = nullptr>
  stan::promote_args_t<T4__, T7__>
  partial_sum(const std::vector<std::vector<std::vector<int>>>& choice_itc,
              const int& start, const int& end,
              const std::vector<std::vector<std::vector<int>>>& choice_nc,
              const std::vector<std::vector<T4__>>& weber_nc,
              const std::vector<std::vector<int>>& idx_nc_obs,
              const std::vector<std::vector<std::vector<int>>>& deltaM,
              const std::vector<std::vector<std::vector<T7__>>>& TotalS,
              const std::vector<std::vector<int>>& Tr_nc, const int& W,
              std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T4__, T7__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ lt = DUMMY_VAR__;
      current_statement__ = 99;
      lt = 0;
      current_statement__ = 109;
      for (int n = 1; n <= ((end - start) + 1); ++n) {
        int s = std::numeric_limits<int>::min();
        current_statement__ = 100;
        s = (start + (n - 1));
        current_statement__ = 107;
        for (int w = 1; w <= W; ++w) {
          current_statement__ = 105;
          if (stan::math::logical_neq(
                stan::model::rvalue(idx_nc_obs, "idx_nc_obs",
                  stan::model::index_uni(s), stan::model::index_uni(w)), 0)) {
            current_statement__ = 101;
            stan::math::validate_non_negative_index("z", "Tr_nc[s, w]",
                                                    stan::model::rvalue(
                                                      Tr_nc, "Tr_nc",
                                                      stan::model::index_uni(s),
                                                        stan::model::index_uni(w)));
            Eigen::Matrix<local_scalar_t__, -1, 1> z =
               Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
                 stan::model::rvalue(Tr_nc, "Tr_nc",
                   stan::model::index_uni(s), stan::model::index_uni(w)),
                 DUMMY_VAR__);
            current_statement__ = 102;
            stan::model::assign(z,
              stan::math::elt_divide(
                stan::math::minus(
                  stan::math::to_vector(
                    stan::model::rvalue(deltaM, "deltaM",
                      stan::model::index_uni(s), stan::model::index_uni(w),
                        stan::model::index_min_max(1, stan::model::rvalue(
                                                        Tr_nc, "Tr_nc",
                                                        stan::model::index_uni(s),
                                                          stan::model::index_uni(w)))))),
                stan::math::multiply(
                  stan::model::rvalue(weber_nc, "weber_nc",
                    stan::model::index_uni(s), stan::model::index_uni(w)),
                  stan::math::to_vector(
                    stan::model::rvalue(TotalS, "TotalS",
                      stan::model::index_uni(s), stan::model::index_uni(w),
                        stan::model::index_min_max(1, stan::model::rvalue(
                                                        Tr_nc, "Tr_nc",
                                                        stan::model::index_uni(s),
                                                          stan::model::index_uni(w))))))),
              "assigning variable z");
            current_statement__ = 103;
            lt = (lt +
                   stan::math::bernoulli_lpmf<false>(
                     stan::model::rvalue(choice_nc, "choice_nc",
                       stan::model::index_uni(s), stan::model::index_uni(w),
                         stan::model::index_min_max(1, stan::model::rvalue(
                                                         Tr_nc, "Tr_nc",
                                                         stan::model::index_uni(s),
                                                           stan::model::index_uni(w)))),
                     stan::math::Phi(z)));
          } 
        }
      }
      current_statement__ = 110;
      return lt;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T4__, typename T7__, stan::require_stan_scalar_t<T4__>*,
          stan::require_stan_scalar_t<T7__>*>
stan::promote_args_t<T4__, T7__>
partial_sum_functor__::operator()(const std::vector<std::vector<std::vector<int>>>& choice_itc,
                                  const int& start, const int& end,
                                  const std::vector<std::vector<std::vector<int>>>& choice_nc,
                                  const std::vector<std::vector<T4__>>& weber_nc,
                                  const std::vector<std::vector<int>>& idx_nc_obs,
                                  const std::vector<std::vector<std::vector<int>>>& deltaM,
                                  const std::vector<std::vector<std::vector<T7__>>>& TotalS,
                                  const std::vector<std::vector<int>>& Tr_nc,
                                  const int& W, std::ostream* pstream__) 
const
{
  return partial_sum(choice_itc, start, end, choice_nc, weber_nc, idx_nc_obs,
           deltaM, TotalS, Tr_nc, W, pstream__);
}

template <typename T4__, typename T7__, stan::require_stan_scalar_t<T4__>*,
          stan::require_stan_scalar_t<T7__>*>
stan::promote_args_t<T4__, T7__>
partial_sum_rsfunctor__::operator()(const std::vector<std::vector<std::vector<int>>>& choice_itc,
                                    const int& start, const int& end,
                                    std::ostream* pstream__,
                                    const std::vector<std::vector<std::vector<int>>>& choice_nc,
                                    const std::vector<std::vector<T4__>>& weber_nc,
                                    const std::vector<std::vector<int>>& idx_nc_obs,
                                    const std::vector<std::vector<std::vector<int>>>& deltaM,
                                    const std::vector<std::vector<std::vector<T7__>>>& TotalS,
                                    const std::vector<std::vector<int>>& Tr_nc,
                                    const int& W)  const
{
  return partial_sum(choice_itc, start + 1, end + 1, choice_nc, weber_nc,
           idx_nc_obs, deltaM, TotalS, Tr_nc, W, pstream__);
}


class nc_hierarchical_independent_with_gq_final_model final : public model_base_crtp<nc_hierarchical_independent_with_gq_final_model> {

 private:
  int N;
  int W;
  int P_itc;
  std::vector<std::vector<int>> idx_itc_obs;
  int Tr_max_itc;
  std::vector<std::vector<int>> Tr_itc;
  std::vector<std::vector<std::vector<double>>> amount_later;
  std::vector<std::vector<std::vector<double>>> amount_sooner;
  std::vector<std::vector<std::vector<double>>> delay_later;
  std::vector<std::vector<std::vector<int>>> choice_itc;
  int P_nc;
  std::vector<int> W_nc_obs;
  std::vector<std::vector<int>> idx_nc_obs;
  int Tr_max_nc;
  std::vector<std::vector<int>> Tr_nc;
  std::vector<std::vector<std::vector<int>>> deltaM;
  std::vector<std::vector<std::vector<double>>> TotalS;
  std::vector<std::vector<std::vector<int>>> choice_nc;
  int num_par; 
  
 
 public:
  ~nc_hierarchical_independent_with_gq_final_model() { }
  
  inline std::string model_name() const final { return "nc_hierarchical_independent_with_gq_final_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.2", "stancflags = "};
  }
  
  
  nc_hierarchical_independent_with_gq_final_model(stan::io::var_context& context__,
                                                  unsigned int random_seed__ = 0,
                                                  std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "nc_hierarchical_independent_with_gq_final_model_namespace::nc_hierarchical_independent_with_gq_final_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 40;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 40;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 41;
      context__.validate_dims("data initialization","W","int",
           std::vector<size_t>{});
      W = std::numeric_limits<int>::min();
      
      
      current_statement__ = 41;
      W = context__.vals_i("W")[(1 - 1)];
      current_statement__ = 42;
      context__.validate_dims("data initialization","P_itc","int",
           std::vector<size_t>{});
      P_itc = std::numeric_limits<int>::min();
      
      
      current_statement__ = 42;
      P_itc = context__.vals_i("P_itc")[(1 - 1)];
      current_statement__ = 43;
      stan::math::validate_non_negative_index("idx_itc_obs", "N", N);
      current_statement__ = 44;
      stan::math::validate_non_negative_index("idx_itc_obs", "W", W);
      current_statement__ = 45;
      context__.validate_dims("data initialization","idx_itc_obs","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W)});
      idx_itc_obs = 
        std::vector<std::vector<int>>(N, 
          std::vector<int>(W, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> idx_itc_obs_flat__;
        current_statement__ = 45;
        idx_itc_obs_flat__ = context__.vals_i("idx_itc_obs");
        current_statement__ = 45;
        pos__ = 1;
        current_statement__ = 45;
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          current_statement__ = 45;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 45;
            stan::model::assign(idx_itc_obs, idx_itc_obs_flat__[(pos__ - 1)],
              "assigning variable idx_itc_obs", stan::model::index_uni(sym2__),
                                                  stan::model::index_uni(sym1__));
            current_statement__ = 45;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 45;
      stan::math::check_greater_or_equal(function__, "idx_itc_obs",
                                            idx_itc_obs, 0);
      current_statement__ = 46;
      context__.validate_dims("data initialization","Tr_max_itc","int",
           std::vector<size_t>{});
      Tr_max_itc = std::numeric_limits<int>::min();
      
      
      current_statement__ = 46;
      Tr_max_itc = context__.vals_i("Tr_max_itc")[(1 - 1)];
      current_statement__ = 46;
      stan::math::check_greater_or_equal(function__, "Tr_max_itc",
                                            Tr_max_itc, 0);
      current_statement__ = 47;
      stan::math::validate_non_negative_index("Tr_itc", "N", N);
      current_statement__ = 48;
      stan::math::validate_non_negative_index("Tr_itc", "W", W);
      current_statement__ = 49;
      context__.validate_dims("data initialization","Tr_itc","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W)});
      Tr_itc = 
        std::vector<std::vector<int>>(N, 
          std::vector<int>(W, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> Tr_itc_flat__;
        current_statement__ = 49;
        Tr_itc_flat__ = context__.vals_i("Tr_itc");
        current_statement__ = 49;
        pos__ = 1;
        current_statement__ = 49;
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          current_statement__ = 49;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 49;
            stan::model::assign(Tr_itc, Tr_itc_flat__[(pos__ - 1)],
              "assigning variable Tr_itc", stan::model::index_uni(sym2__),
                                             stan::model::index_uni(sym1__));
            current_statement__ = 49;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 49;
      stan::math::check_greater_or_equal(function__, "Tr_itc", Tr_itc, 0);
      current_statement__ = 50;
      stan::math::validate_non_negative_index("amount_later", "N", N);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("amount_later", "W", W);
      current_statement__ = 52;
      stan::math::validate_non_negative_index("amount_later", "Tr_max_itc",
                                              Tr_max_itc);
      current_statement__ = 53;
      context__.validate_dims("data initialization","amount_later","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_itc)});
      amount_later = 
        std::vector<std::vector<std::vector<double>>>(N, 
          std::vector<std::vector<double>>(W, 
            std::vector<double>(Tr_max_itc, 
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> amount_later_flat__;
        current_statement__ = 53;
        amount_later_flat__ = context__.vals_r("amount_later");
        current_statement__ = 53;
        pos__ = 1;
        current_statement__ = 53;
        for (int sym1__ = 1; sym1__ <= Tr_max_itc; ++sym1__) {
          current_statement__ = 53;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 53;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 53;
              stan::model::assign(amount_later,
                amount_later_flat__[(pos__ - 1)],
                "assigning variable amount_later", stan::model::index_uni(sym3__),
                                                     stan::model::index_uni(sym2__),
                                                     stan::model::index_uni(sym1__));
              current_statement__ = 53;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 53;
      stan::math::check_greater_or_equal(function__, "amount_later",
                                            amount_later, 0);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("amount_sooner", "N", N);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("amount_sooner", "W", W);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("amount_sooner", "Tr_max_itc",
                                              Tr_max_itc);
      current_statement__ = 57;
      context__.validate_dims("data initialization","amount_sooner","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_itc)});
      amount_sooner = 
        std::vector<std::vector<std::vector<double>>>(N, 
          std::vector<std::vector<double>>(W, 
            std::vector<double>(Tr_max_itc, 
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> amount_sooner_flat__;
        current_statement__ = 57;
        amount_sooner_flat__ = context__.vals_r("amount_sooner");
        current_statement__ = 57;
        pos__ = 1;
        current_statement__ = 57;
        for (int sym1__ = 1; sym1__ <= Tr_max_itc; ++sym1__) {
          current_statement__ = 57;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 57;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 57;
              stan::model::assign(amount_sooner,
                amount_sooner_flat__[(pos__ - 1)],
                "assigning variable amount_sooner", stan::model::index_uni(sym3__),
                                                      stan::model::index_uni(sym2__),
                                                      stan::model::index_uni(sym1__));
              current_statement__ = 57;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 57;
      stan::math::check_greater_or_equal(function__, "amount_sooner",
                                            amount_sooner, 0);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("delay_later", "N", N);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("delay_later", "W", W);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("delay_later", "Tr_max_itc",
                                              Tr_max_itc);
      current_statement__ = 61;
      context__.validate_dims("data initialization","delay_later","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_itc)});
      delay_later = 
        std::vector<std::vector<std::vector<double>>>(N, 
          std::vector<std::vector<double>>(W, 
            std::vector<double>(Tr_max_itc, 
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> delay_later_flat__;
        current_statement__ = 61;
        delay_later_flat__ = context__.vals_r("delay_later");
        current_statement__ = 61;
        pos__ = 1;
        current_statement__ = 61;
        for (int sym1__ = 1; sym1__ <= Tr_max_itc; ++sym1__) {
          current_statement__ = 61;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 61;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 61;
              stan::model::assign(delay_later,
                delay_later_flat__[(pos__ - 1)],
                "assigning variable delay_later", stan::model::index_uni(sym3__),
                                                    stan::model::index_uni(sym2__),
                                                    stan::model::index_uni(sym1__));
              current_statement__ = 61;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 61;
      stan::math::check_greater_or_equal(function__, "delay_later",
                                            delay_later, 0);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("choice_itc", "N", N);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("choice_itc", "W", W);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("choice_itc", "Tr_max_itc",
                                              Tr_max_itc);
      current_statement__ = 65;
      context__.validate_dims("data initialization","choice_itc","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_itc)});
      choice_itc = 
        std::vector<std::vector<std::vector<int>>>(N, 
          std::vector<std::vector<int>>(W, 
            std::vector<int>(Tr_max_itc, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> choice_itc_flat__;
        current_statement__ = 65;
        choice_itc_flat__ = context__.vals_i("choice_itc");
        current_statement__ = 65;
        pos__ = 1;
        current_statement__ = 65;
        for (int sym1__ = 1; sym1__ <= Tr_max_itc; ++sym1__) {
          current_statement__ = 65;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 65;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 65;
              stan::model::assign(choice_itc, choice_itc_flat__[(pos__ - 1)],
                "assigning variable choice_itc", stan::model::index_uni(sym3__),
                                                   stan::model::index_uni(sym2__),
                                                   stan::model::index_uni(sym1__));
              current_statement__ = 65;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 65;
      stan::math::check_less_or_equal(function__, "choice_itc", choice_itc, 1);
      current_statement__ = 66;
      context__.validate_dims("data initialization","P_nc","int",
           std::vector<size_t>{});
      P_nc = std::numeric_limits<int>::min();
      
      
      current_statement__ = 66;
      P_nc = context__.vals_i("P_nc")[(1 - 1)];
      current_statement__ = 67;
      stan::math::validate_non_negative_index("W_nc_obs", "N", N);
      current_statement__ = 68;
      context__.validate_dims("data initialization","W_nc_obs","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      W_nc_obs = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 68;
      W_nc_obs = context__.vals_i("W_nc_obs");
      current_statement__ = 68;
      stan::math::check_greater_or_equal(function__, "W_nc_obs", W_nc_obs, 1);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("idx_nc_obs", "N", N);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("idx_nc_obs", "W", W);
      current_statement__ = 71;
      context__.validate_dims("data initialization","idx_nc_obs","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W)});
      idx_nc_obs = 
        std::vector<std::vector<int>>(N, 
          std::vector<int>(W, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> idx_nc_obs_flat__;
        current_statement__ = 71;
        idx_nc_obs_flat__ = context__.vals_i("idx_nc_obs");
        current_statement__ = 71;
        pos__ = 1;
        current_statement__ = 71;
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          current_statement__ = 71;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 71;
            stan::model::assign(idx_nc_obs, idx_nc_obs_flat__[(pos__ - 1)],
              "assigning variable idx_nc_obs", stan::model::index_uni(sym2__),
                                                 stan::model::index_uni(sym1__));
            current_statement__ = 71;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 71;
      stan::math::check_greater_or_equal(function__, "idx_nc_obs",
                                            idx_nc_obs, 0);
      current_statement__ = 72;
      context__.validate_dims("data initialization","Tr_max_nc","int",
           std::vector<size_t>{});
      Tr_max_nc = std::numeric_limits<int>::min();
      
      
      current_statement__ = 72;
      Tr_max_nc = context__.vals_i("Tr_max_nc")[(1 - 1)];
      current_statement__ = 72;
      stan::math::check_greater_or_equal(function__, "Tr_max_nc", Tr_max_nc,
                                            0);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("Tr_nc", "N", N);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("Tr_nc", "W", W);
      current_statement__ = 75;
      context__.validate_dims("data initialization","Tr_nc","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W)});
      Tr_nc = 
        std::vector<std::vector<int>>(N, 
          std::vector<int>(W, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> Tr_nc_flat__;
        current_statement__ = 75;
        Tr_nc_flat__ = context__.vals_i("Tr_nc");
        current_statement__ = 75;
        pos__ = 1;
        current_statement__ = 75;
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          current_statement__ = 75;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 75;
            stan::model::assign(Tr_nc, Tr_nc_flat__[(pos__ - 1)],
              "assigning variable Tr_nc", stan::model::index_uni(sym2__),
                                            stan::model::index_uni(sym1__));
            current_statement__ = 75;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 75;
      stan::math::check_greater_or_equal(function__, "Tr_nc", Tr_nc, 0);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("deltaM", "N", N);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("deltaM", "W", W);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("deltaM", "Tr_max_nc",
                                              Tr_max_nc);
      current_statement__ = 79;
      context__.validate_dims("data initialization","deltaM","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_nc)});
      deltaM = 
        std::vector<std::vector<std::vector<int>>>(N, 
          std::vector<std::vector<int>>(W, 
            std::vector<int>(Tr_max_nc, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> deltaM_flat__;
        current_statement__ = 79;
        deltaM_flat__ = context__.vals_i("deltaM");
        current_statement__ = 79;
        pos__ = 1;
        current_statement__ = 79;
        for (int sym1__ = 1; sym1__ <= Tr_max_nc; ++sym1__) {
          current_statement__ = 79;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 79;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 79;
              stan::model::assign(deltaM, deltaM_flat__[(pos__ - 1)],
                "assigning variable deltaM", stan::model::index_uni(sym3__),
                                               stan::model::index_uni(sym2__),
                                               stan::model::index_uni(sym1__));
              current_statement__ = 79;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 80;
      stan::math::validate_non_negative_index("TotalS", "N", N);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("TotalS", "W", W);
      current_statement__ = 82;
      stan::math::validate_non_negative_index("TotalS", "Tr_max_nc",
                                              Tr_max_nc);
      current_statement__ = 83;
      context__.validate_dims("data initialization","TotalS","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_nc)});
      TotalS = 
        std::vector<std::vector<std::vector<double>>>(N, 
          std::vector<std::vector<double>>(W, 
            std::vector<double>(Tr_max_nc, 
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> TotalS_flat__;
        current_statement__ = 83;
        TotalS_flat__ = context__.vals_r("TotalS");
        current_statement__ = 83;
        pos__ = 1;
        current_statement__ = 83;
        for (int sym1__ = 1; sym1__ <= Tr_max_nc; ++sym1__) {
          current_statement__ = 83;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 83;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 83;
              stan::model::assign(TotalS, TotalS_flat__[(pos__ - 1)],
                "assigning variable TotalS", stan::model::index_uni(sym3__),
                                               stan::model::index_uni(sym2__),
                                               stan::model::index_uni(sym1__));
              current_statement__ = 83;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 84;
      stan::math::validate_non_negative_index("choice_nc", "N", N);
      current_statement__ = 85;
      stan::math::validate_non_negative_index("choice_nc", "W", W);
      current_statement__ = 86;
      stan::math::validate_non_negative_index("choice_nc", "Tr_max_nc",
                                              Tr_max_nc);
      current_statement__ = 87;
      context__.validate_dims("data initialization","choice_nc","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_nc)});
      choice_nc = 
        std::vector<std::vector<std::vector<int>>>(N, 
          std::vector<std::vector<int>>(W, 
            std::vector<int>(Tr_max_nc, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> choice_nc_flat__;
        current_statement__ = 87;
        choice_nc_flat__ = context__.vals_i("choice_nc");
        current_statement__ = 87;
        pos__ = 1;
        current_statement__ = 87;
        for (int sym1__ = 1; sym1__ <= Tr_max_nc; ++sym1__) {
          current_statement__ = 87;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 87;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 87;
              stan::model::assign(choice_nc, choice_nc_flat__[(pos__ - 1)],
                "assigning variable choice_nc", stan::model::index_uni(sym3__),
                                                  stan::model::index_uni(sym2__),
                                                  stan::model::index_uni(sym1__));
              current_statement__ = 87;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 88;
      num_par = std::numeric_limits<int>::min();
      
      
      current_statement__ = 88;
      num_par = P_nc;
      current_statement__ = 89;
      stan::math::validate_non_negative_index("mu_pr_sub", "N", N);
      current_statement__ = 90;
      stan::math::validate_non_negative_index("weber_nc_pr", "N", N);
      current_statement__ = 91;
      stan::math::validate_non_negative_index("weber_nc_pr", "W", W);
      current_statement__ = 92;
      stan::math::validate_non_negative_index("weber_nc", "N", N);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("weber_nc", "W", W);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("y_pred_all_weeks_nc",
                                              "Tr_max_nc", Tr_max_nc);
      current_statement__ = 95;
      stan::math::validate_non_negative_index("y_pred_all_weeks_nc", "W", W);
      current_statement__ = 96;
      stan::math::validate_non_negative_index("y_pred_all_weeks_nc", "N", N);
      current_statement__ = 97;
      stan::math::validate_non_negative_index("log_lik_all_subs", "N", N);
      current_statement__ = 98;
      stan::math::validate_non_negative_index("log_lik_all_subs", "W", W);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + N + 1 + (N * W);
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "nc_hierarchical_independent_with_gq_final_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ mu_pr = DUMMY_VAR__;
      current_statement__ = 1;
      mu_pr = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma_pr = DUMMY_VAR__;
      current_statement__ = 2;
      sigma_pr = in__.template read_constrain_lb<local_scalar_t__, 
                   jacobian__>(0, lp__);
      std::vector<local_scalar_t__> mu_pr_sub =
         std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      current_statement__ = 3;
      mu_pr_sub = in__.template read<std::vector<local_scalar_t__>>(N);
      local_scalar_t__ sigma_pr_r = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_pr_r = in__.template read_constrain_lb<local_scalar_t__, 
                     jacobian__>(0, lp__);
      std::vector<std::vector<local_scalar_t__>> weber_nc_pr =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      current_statement__ = 5;
      weber_nc_pr = in__.template read<
                      std::vector<std::vector<local_scalar_t__>>>(N, W);
      std::vector<std::vector<local_scalar_t__>> weber_nc =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      current_statement__ = 11;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 9;
        for (int w = 1; w <= W; ++w) {
          current_statement__ = 7;
          stan::model::assign(weber_nc,
            stan::math::exp(
              (stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
                 stan::model::index_uni(n)) +
                (sigma_pr_r *
                  stan::model::rvalue(weber_nc_pr, "weber_nc_pr",
                    stan::model::index_uni(n), stan::model::index_uni(w))))),
            "assigning variable weber_nc", stan::model::index_uni(n),
                                             stan::model::index_uni(w));
        }
      }
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "weber_nc", weber_nc, 0);
      {
        current_statement__ = 34;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_pr, 0, 1));
        current_statement__ = 35;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_pr, 0, 1));
        current_statement__ = 36;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(stan::math::to_vector(mu_pr_sub),
            mu_pr, sigma_pr));
        current_statement__ = 37;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_pr_r, 0, 1));
        current_statement__ = 38;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::math::to_vector(stan::math::to_matrix(weber_nc_pr)), 0, 1));
        current_statement__ = 39;
        lp_accum__.add(
          stan::math::reduce_sum<partial_sum_rsfunctor__>(choice_itc, 1,
            pstream__, choice_nc, weber_nc, idx_nc_obs, deltaM, TotalS,
            Tr_nc, W));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "nc_hierarchical_independent_with_gq_final_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double mu_pr = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      mu_pr = in__.template read<local_scalar_t__>();
      double sigma_pr = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      sigma_pr = in__.template read_constrain_lb<local_scalar_t__, 
                   jacobian__>(0, lp__);
      std::vector<double> mu_pr_sub =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      mu_pr_sub = in__.template read<std::vector<local_scalar_t__>>(N);
      double sigma_pr_r = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      sigma_pr_r = in__.template read_constrain_lb<local_scalar_t__, 
                     jacobian__>(0, lp__);
      std::vector<std::vector<double>> weber_nc_pr =
         std::vector<std::vector<double>>(N, 
           std::vector<double>(W, std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 5;
      weber_nc_pr = in__.template read<
                      std::vector<std::vector<local_scalar_t__>>>(N, W);
      std::vector<std::vector<double>> weber_nc =
         std::vector<std::vector<double>>(N, 
           std::vector<double>(W, std::numeric_limits<double>::quiet_NaN()));
      out__.write(mu_pr);
      out__.write(sigma_pr);
      out__.write(mu_pr_sub);
      out__.write(sigma_pr_r);
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(weber_nc_pr[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 11;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 9;
        for (int w = 1; w <= W; ++w) {
          current_statement__ = 7;
          stan::model::assign(weber_nc,
            stan::math::exp(
              (stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
                 stan::model::index_uni(n)) +
                (sigma_pr_r *
                  stan::model::rvalue(weber_nc_pr, "weber_nc_pr",
                    stan::model::index_uni(n), stan::model::index_uni(w))))),
            "assigning variable weber_nc", stan::model::index_uni(n),
                                             stan::model::index_uni(w));
        }
      }
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "weber_nc", weber_nc, 0);
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            out__.write(weber_nc[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<std::vector<std::vector<double>>> y_pred_all_weeks_nc =
         std::vector<std::vector<std::vector<double>>>(Tr_max_nc, 
           std::vector<std::vector<double>>(W, 
             std::vector<double>(N, std::numeric_limits<double>::quiet_NaN())));
      std::vector<std::vector<double>> log_lik_all_subs =
         std::vector<std::vector<double>>(N, 
           std::vector<double>(W, std::numeric_limits<double>::quiet_NaN()));
      int b = std::numeric_limits<int>::min();
      current_statement__ = 21;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 19;
        for (int w = 1; w <= W; ++w) {
          current_statement__ = 17;
          for (int t = 1; t <= Tr_max_nc; ++t) {
            current_statement__ = 15;
            stan::model::assign(y_pred_all_weeks_nc, -2,
              "assigning variable y_pred_all_weeks_nc", stan::model::index_uni(t),
                                                          stan::model::index_uni(w),
                                                          stan::model::index_uni(n));
          }
        }
      }
      current_statement__ = 33;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 31;
        for (int w = 1; w <= W; ++w) {
          current_statement__ = 22;
          stan::model::assign(log_lik_all_subs, 0,
            "assigning variable log_lik_all_subs", stan::model::index_uni(n),
                                                     stan::model::index_uni(w));
          current_statement__ = 29;
          if (stan::math::logical_neq(
                stan::model::rvalue(idx_nc_obs, "idx_nc_obs",
                  stan::model::index_uni(n), stan::model::index_uni(w)), 0)) {
            current_statement__ = 27;
            for (int t = 1;
                 t <= stan::model::rvalue(Tr_nc, "Tr_nc",
                        stan::model::index_uni(n), stan::model::index_uni(w));
                 ++t) {
              double z = std::numeric_limits<double>::quiet_NaN();
              current_statement__ = 23;
              z = (-stan::model::rvalue(deltaM, "deltaM",
                      stan::model::index_uni(n), stan::model::index_uni(w),
                        stan::model::index_uni(t)) /
                    (stan::model::rvalue(weber_nc, "weber_nc",
                       stan::model::index_uni(n), stan::model::index_uni(w))
                      *
                      stan::model::rvalue(TotalS, "TotalS",
                        stan::model::index_uni(n), stan::model::index_uni(w),
                          stan::model::index_uni(t))));
              current_statement__ = 24;
              stan::model::assign(y_pred_all_weeks_nc,
                stan::math::bernoulli_rng(
                  stan::math::normal_cdf(0,
                    stan::model::rvalue(deltaM, "deltaM",
                      stan::model::index_uni(n), stan::model::index_uni(w),
                        stan::model::index_uni(t)),
                    (stan::model::rvalue(weber_nc, "weber_nc",
                       stan::model::index_uni(n), stan::model::index_uni(w))
                      *
                      stan::model::rvalue(TotalS, "TotalS",
                        stan::model::index_uni(n), stan::model::index_uni(w),
                          stan::model::index_uni(t)))), base_rng__),
                "assigning variable y_pred_all_weeks_nc", stan::model::index_uni(t),
                                                            stan::model::index_uni(w),
                                                            stan::model::index_uni(n));
              current_statement__ = 25;
              stan::model::assign(log_lik_all_subs,
                (stan::model::rvalue(log_lik_all_subs, "log_lik_all_subs",
                   stan::model::index_uni(n), stan::model::index_uni(w)) +
                  stan::math::bernoulli_lpmf<false>(
                    stan::model::rvalue(choice_nc, "choice_nc",
                      stan::model::index_uni(n), stan::model::index_uni(w),
                        stan::model::index_uni(t)), stan::math::Phi(z))),
                "assigning variable log_lik_all_subs", stan::model::index_uni(n),
                                                         stan::model::index_uni(w));
            }
          } 
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= Tr_max_nc; ++sym3__) {
            out__.write(
              y_pred_all_weeks_nc[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(log_lik_all_subs[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(b);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ mu_pr = DUMMY_VAR__;
      mu_pr = in__.read<local_scalar_t__>();
      out__.write(mu_pr);
      local_scalar_t__ sigma_pr = DUMMY_VAR__;
      sigma_pr = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_pr);
      std::vector<local_scalar_t__> mu_pr_sub =
         std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        mu_pr_sub[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(mu_pr_sub);
      local_scalar_t__ sigma_pr_r = DUMMY_VAR__;
      sigma_pr_r = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_pr_r);
      std::vector<std::vector<local_scalar_t__>> weber_nc_pr =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          weber_nc_pr[(sym2__ - 1)][(sym1__ - 1)] = in__.read<
                                                      local_scalar_t__>();
        }
      }
      out__.write(weber_nc_pr);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mu_pr", "sigma_pr", "mu_pr_sub",
      "sigma_pr_r", "weber_nc_pr", "weber_nc", "y_pred_all_weeks_nc",
      "log_lik_all_subs", "b"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(W)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(W)},
      std::vector<size_t>{static_cast<size_t>(Tr_max_nc),
                          static_cast<size_t>(W), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(W)},
      std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu_pr");
    param_names__.emplace_back(std::string() + "sigma_pr");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_pr_sub" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma_pr_r");
    for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "weber_nc_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "weber_nc" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= Tr_max_nc; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "y_pred_all_weeks_nc" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "log_lik_all_subs" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "b");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu_pr");
    param_names__.emplace_back(std::string() + "sigma_pr");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_pr_sub" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma_pr_r");
    for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "weber_nc_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "weber_nc" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= Tr_max_nc; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "y_pred_all_weeks_nc" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "log_lik_all_subs" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "b");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_pr\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_pr\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_pr_sub\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_pr_r\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"weber_nc_pr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"weber_nc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"y_pred_all_weeks_nc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Tr_max_nc) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_all_subs\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"b\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_pr\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_pr\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_pr_sub\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_pr_r\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"weber_nc_pr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"weber_nc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"y_pred_all_weeks_nc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Tr_max_nc) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_all_subs\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"b\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((1 + 1) + N) + 1) + (N * W));
      const size_t num_transformed = 
  (N * W);
      const size_t num_gen_quantities = ((((Tr_max_nc * W) * N) +
                                                      (N * W)) + 1);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((1 + 1) + N) + 1) + (N * W));
      const size_t num_transformed = 
  (N * W);
      const size_t num_gen_quantities = ((((Tr_max_nc * W) * N) +
                                                      (N * W)) + 1);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 5> names__{"mu_pr", "sigma_pr",
      "mu_pr_sub", "sigma_pr_r", "weber_nc_pr"};
      const std::array<Eigen::Index, 5> constrain_param_sizes__{1, 1, 
       N, 1, (N * W)};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = nc_hierarchical_independent_with_gq_final_model_namespace::nc_hierarchical_independent_with_gq_final_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return nc_hierarchical_independent_with_gq_final_model_namespace::profiles__;
}

#endif


