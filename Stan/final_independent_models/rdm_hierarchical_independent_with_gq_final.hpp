
// Code generated by stanc v2.30.1
#include <stan/model/model_header.hpp>
namespace rdm_hierarchical_independent_with_gq_final_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 468> locations_array__ = 
{" (found before start of program)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 339, column 4 to column 26)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 340, column 4 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 341, column 4 to column 38)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 342, column 4 to column 38)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 344, column 4 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 345, column 4 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 346, column 4 to column 25)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 351, column 4 to column 22)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 352, column 4 to column 33)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 353, column 4 to column 24)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 358, column 12 to column 141)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 358, column 142 to column 143)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 359, column 12 to column 83)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 360, column 12 to column 80)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 357, column 23 to line 361, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 357, column 8 to line 361, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 356, column 19 to line 362, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 356, column 4 to line 362, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 390, column 4 to column 60)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 391, column 4 to column 50)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 393, column 4 to column 32)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 395, column 4 to column 10)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 401, column 16 to column 49)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 402, column 16 to column 39)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 400, column 47 to line 403, column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 400, column 12 to line 403, column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 399, column 23 to line 404, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 399, column 8 to line 404, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 398, column 19 to line 405, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 398, column 4 to line 405, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 411, column 12 to column 38)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 415, column 23 to column 34)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 415, column 16 to column 102)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 416, column 23 to column 34)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 416, column 16 to column 102)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 418, column 16 to column 128)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 419, column 16 to column 129)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 423, column 17 to column 94)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 424, column 20 to column 57)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 425, column 20 to column 47)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 422, column 41 to line 426, column 14)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 422, column 16 to line 426, column 14)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 429, column 17 to column 93)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 430, column 20 to column 71)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 431, column 20 to column 61)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 428, column 41 to line 432, column 17)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 428, column 16 to line 432, column 17)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 413, column 39 to line 433, column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 413, column 12 to line 433, column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 409, column 23 to line 435, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 409, column 8 to line 435, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 408, column 19 to line 436, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 408, column 4 to line 436, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 368, column 4 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 369, column 4 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 370, column 4 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 371, column 4 to column 28)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 375, column 12 to column 69)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 374, column 25 to line 376, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 374, column 4 to line 376, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 378, column 4 to column 41)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 380, column 4 to column 54)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 381, column 4 to column 56)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 382, column 4 to column 56)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 384, column 5 to line 385, column 66)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 260, column 4 to column 10)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 261, column 4 to column 10)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 262, column 4 to column 14)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 263, column 29 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 263, column 31 to column 32)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 263, column 4 to column 34)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 264, column 4 to column 28)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 265, column 24 to column 25)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 265, column 27 to column 28)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 265, column 4 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 266, column 31 to column 32)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 266, column 33 to column 34)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 266, column 35 to column 45)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 266, column 4 to column 47)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 267, column 32 to column 33)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 267, column 34 to column 35)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 267, column 36 to column 46)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 267, column 4 to column 48)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 268, column 30 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 268, column 32 to column 33)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 268, column 34 to column 44)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 268, column 4 to column 46)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 269, column 38 to column 39)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 269, column 40 to column 41)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 269, column 42 to column 52)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 269, column 4 to column 54)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 272, column 4 to column 23)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 273, column 29 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 273, column 31 to column 32)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 273, column 4 to column 34)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 274, column 4 to column 28)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 275, column 42 to column 43)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 275, column 45 to column 46)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 275, column 4 to column 48)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 276, column 15 to column 16)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 276, column 18 to column 19)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 276, column 21 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 276, column 33 to column 38)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 276, column 4 to column 40)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 277, column 23 to column 24)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 277, column 26 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 277, column 29 to column 39)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 277, column 4 to column 41)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 280, column 4 to column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 281, column 26 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 281, column 4 to column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 282, column 28 to column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 282, column 30 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 282, column 4 to column 33)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 283, column 4 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 284, column 23 to column 24)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 284, column 26 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 284, column 4 to column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 285, column 15 to column 16)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 285, column 18 to column 19)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 285, column 21 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 285, column 4 to column 32)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 286, column 16 to column 17)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 286, column 19 to column 20)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 286, column 22 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 286, column 4 to column 33)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 287, column 18 to column 19)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 287, column 21 to column 22)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 287, column 24 to column 33)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 287, column 4 to column 35)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 289, column 4 to column 14)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 290, column 29 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 290, column 31 to column 32)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 290, column 4 to column 34)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 291, column 4 to column 20)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 292, column 4 to column 28)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 293, column 42 to column 43)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 293, column 44 to column 45)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 293, column 46 to column 48)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 293, column 4 to column 50)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 294, column 34 to column 35)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 294, column 36 to column 37)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 294, column 38 to column 40)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 294, column 41 to column 51)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 294, column 4 to column 53)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 295, column 39 to column 40)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 295, column 41 to column 42)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 295, column 43 to column 45)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 295, column 47 to column 57)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 295, column 4 to column 59)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 296, column 21 to column 22)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 296, column 24 to column 25)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 296, column 27 to column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 296, column 31 to column 41)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 296, column 4 to column 43)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 298, column 4 to column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 299, column 28 to column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 299, column 30 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 299, column 4 to column 33)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 300, column 4 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 301, column 23 to column 24)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 301, column 26 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 301, column 4 to column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 302, column 26 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 302, column 29 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 302, column 31 to column 40)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 302, column 4 to column 42)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 303, column 29 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 303, column 32 to column 33)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 303, column 35 to column 44)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 303, column 4 to column 46)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 304, column 29 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 304, column 32 to column 33)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 304, column 35 to column 44)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 304, column 4 to column 46)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 305, column 29 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 305, column 32 to column 33)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 305, column 35 to column 44)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 305, column 4 to column 46)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 306, column 29 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 306, column 32 to column 33)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 306, column 35 to column 44)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 306, column 4 to column 46)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 307, column 37 to column 38)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 307, column 40 to column 41)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 307, column 43 to column 52)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 307, column 4 to column 54)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 310, column 4 to column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 311, column 28 to column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 311, column 30 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 311, column 4 to column 33)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 312, column 4 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 313, column 23 to column 24)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 313, column 26 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 313, column 4 to column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 314, column 23 to column 24)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 314, column 26 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 314, column 29 to column 38)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 314, column 4 to column 40)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 315, column 24 to column 25)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 315, column 27 to column 28)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 315, column 30 to column 39)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 315, column 4 to column 41)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 316, column 27 to column 28)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 316, column 30 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 316, column 33 to column 42)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 316, column 4 to column 44)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 317, column 18 to column 19)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 317, column 21 to column 22)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 317, column 24 to column 33)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 317, column 4 to column 35)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 320, column 4 to column 14)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 321, column 29 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 321, column 31 to column 32)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 321, column 4 to column 34)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 322, column 4 to column 28)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 323, column 4 to column 28)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 324, column 24 to column 25)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 324, column 26 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 324, column 4 to column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 325, column 24 to column 25)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 325, column 26 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 325, column 4 to column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 326, column 17 to column 18)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 326, column 20 to column 21)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 326, column 23 to column 33)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 326, column 4 to column 35)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 327, column 17 to column 18)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 327, column 20 to column 21)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 327, column 23 to column 33)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 327, column 4 to column 35)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 328, column 18 to column 19)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 328, column 21 to column 22)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 328, column 24 to column 34)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 328, column 4 to column 36)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 329, column 18 to column 19)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 329, column 21 to column 22)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 329, column 24 to column 34)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 329, column 4 to column 36)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 330, column 11 to column 12)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 330, column 13 to column 14)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 330, column 4 to column 26)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 331, column 4 to column 21)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 335, column 4 to column 24)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 339, column 11 to column 18)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 340, column 19 to column 26)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 340, column 28 to column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 341, column 20 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 342, column 29 to column 36)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 344, column 22 to column 23)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 344, column 24 to column 25)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 345, column 22 to column 23)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 345, column 24 to column 25)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 346, column 20 to column 21)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 346, column 22 to column 23)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 351, column 17 to column 18)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 351, column 19 to column 20)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 352, column 28 to column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 352, column 30 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 353, column 19 to column 20)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 353, column 21 to column 22)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 390, column 30 to column 53)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 390, column 55 to column 56)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 390, column 57 to column 58)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 391, column 20 to column 43)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 391, column 44 to column 45)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 391, column 47 to column 48)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 393, column 26 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 393, column 29 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 7, column 6 to column 46)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 6, column 15 to line 8, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 6, column 4 to line 8, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 10, column 4 to column 37)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 5, column 28 to line 11, column 3)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 14, column 4 to column 26)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 15, column 4 to column 46)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 16, column 4 to column 41)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 17, column 4 to column 43)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 18, column 4 to column 46)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 19, column 4 to column 40)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 20, column 4 to column 39)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 21, column 4 to column 44)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 22, column 4 to column 45)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 23, column 4 to column 43)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 25, column 4 to line 34, column 20)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 13, column 28 to line 35, column 3)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 39, column 6 to column 25)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 38, column 34 to line 40, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 38, column 4 to line 40, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 42, column 6 to column 26)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 41, column 19 to line 43, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 41, column 4 to line 43, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 44, column 4 to column 36)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 45, column 4 to column 21)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 46, column 4 to column 14)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 50, column 8 to column 17)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 49, column 17 to line 51, column 7)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 49, column 6 to line 51, column 7)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 52, column 6 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 54, column 8 to column 17)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 53, column 17 to line 55, column 7)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 53, column 6 to line 55, column 7)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 56, column 6 to column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 57, column 6 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 58, column 6 to column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 48, column 14 to line 59, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 48, column 4 to line 59, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 61, column 4 to column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 37, column 48 to line 62, column 3)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 65, column 4 to column 16)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 66, column 4 to column 26)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 68, column 4 to column 23)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 69, column 4 to column 21)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 70, column 4 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 71, column 4 to column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 72, column 4 to column 24)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 73, column 4 to column 24)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 74, column 4 to column 25)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 75, column 4 to column 24)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 76, column 4 to column 26)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 78, column 4 to column 26)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 80, column 6 to column 41)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 93, column 8 to column 64)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 94, column 8 to column 40)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 96, column 10 to column 40)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 97, column 10 to column 66)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 98, column 10 to column 37)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 95, column 45 to line 99, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 95, column 8 to line 99, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 101, column 10 to column 24)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 100, column 58 to line 102, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 100, column 8 to line 102, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 92, column 13 to line 103, column 7)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 83, column 8 to column 59)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 85, column 10 to column 54)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 86, column 10 to column 61)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 84, column 52 to line 87, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 84, column 8 to line 87, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 88, column 8 to column 71)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 90, column 10 to column 24)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 89, column 56 to line 91, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 89, column 8 to line 91, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 82, column 22 to line 92, column 7)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 82, column 6 to line 103, column 7)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 79, column 14 to line 104, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 79, column 4 to line 104, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 105, column 4 to column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 64, column 40 to line 106, column 3)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 109, column 4 to column 38)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 110, column 4 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 111, column 4 to column 80)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 115, column 6 to column 23)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 114, column 11 to line 116, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 113, column 6 to column 15)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 112, column 30 to line 114, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 112, column 4 to line 116, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 108, column 49 to line 117, column 3)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 120, column 4 to column 23)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 121, column 4 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 122, column 4 to column 21)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 123, column 4 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 124, column 4 to column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 125, column 4 to column 24)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 126, column 4 to column 24)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 127, column 4 to column 25)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 128, column 4 to column 24)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 129, column 4 to column 26)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 131, column 4 to column 34)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 137, column 6 to column 85)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 138, column 6 to column 59)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 136, column 11 to line 139, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 134, column 6 to column 53)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 135, column 6 to column 15)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 133, column 28 to line 136, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 133, column 4 to line 139, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 142, column 6 to column 61)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 144, column 8 to column 39)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 143, column 26 to line 145, column 7)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 143, column 6 to line 145, column 7)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 146, column 6 to column 37)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 156, column 8 to column 100)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 158, column 10 to column 24)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 157, column 71 to line 159, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 157, column 8 to line 159, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 155, column 13 to line 160, column 7)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 148, column 8 to column 42)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 150, column 10 to column 26)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 149, column 27 to line 151, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 149, column 8 to line 151, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 153, column 10 to column 24)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 152, column 78 to line 154, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 152, column 8 to line 154, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 147, column 25 to line 155, column 7)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 147, column 6 to line 160, column 7)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 141, column 14 to line 161, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 141, column 4 to line 161, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 162, column 4 to column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 119, column 40 to line 163, column 3)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 166, column 4 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 167, column 4 to column 39)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 168, column 4 to column 12)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 173, column 6 to column 37)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 172, column 11 to line 174, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 171, column 6 to column 37)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 170, column 19 to line 172, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 170, column 4 to line 174, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 176, column 4 to column 14)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 165, column 64 to line 177, column 3)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 180, column 4 to column 16)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 181, column 4 to column 41)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 182, column 4 to column 28)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 183, column 4 to column 26)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 184, column 4 to column 19)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 185, column 4 to column 18)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 186, column 4 to column 20)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 189, column 6 to column 26)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 188, column 32 to line 190, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 188, column 4 to line 190, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 193, column 6 to column 19)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 194, column 6 to column 21)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 195, column 6 to column 28)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 217, column 8 to column 28)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 218, column 8 to column 83)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 219, column 8 to column 94)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 221, column 10 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 222, column 10 to column 22)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 223, column 10 to column 16)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 220, column 43 to line 224, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 220, column 8 to line 224, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 225, column 8 to column 18)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 215, column 13 to line 226, column 7)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 208, column 8 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 209, column 8 to column 81)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 210, column 8 to column 94)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 212, column 10 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 211, column 44 to line 213, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 211, column 8 to line 213, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 214, column 8 to column 18)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 207, column 28 to line 215, column 7)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 207, column 13 to line 226, column 7)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 201, column 8 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 202, column 8 to column 67)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 203, column 8 to column 94)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 204, column 8 to column 59)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 205, column 8 to column 58)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 200, column 34 to line 207, column 7)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 200, column 6 to line 226, column 7)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 192, column 14 to line 227, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 192, column 4 to line 227, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 228, column 4 to column 15)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 179, column 65 to line 229, column 3)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 236, column 1 to column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 239, column 2 to column 26)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 244, column 24 to column 35)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 244, column 17 to column 103)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 245, column 24 to column 35)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 245, column 17 to column 103)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 247, column 17 to column 110)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 248, column 20 to column 114)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 243, column 37 to line 249, column 10)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 243, column 10 to line 249, column 10)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 241, column 17 to line 250, column 3)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 241, column 2 to line 250, column 3)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 237, column 28 to line 251, column 2)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 237, column 1 to line 251, column 2)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 252, column 1 to column 11)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/rdm_hierarchical_independent_with_gq_final.stan', line 234, column 57 to line 253, column 2)"};

struct partial_sum_functor__ {
  template <typename T3__, typename T4__, typename T5__, typename T6__,
            typename T7__, typename T8__, typename T9__,
            stan::require_all_t<stan::is_stan_scalar<T3__>,
                                stan::is_stan_scalar<T4__>,
                                stan::is_stan_scalar<T5__>,
                                stan::is_stan_scalar<T6__>,
                                stan::is_stan_scalar<T7__>,
                                stan::is_stan_scalar<T8__>,
                                stan::is_stan_scalar<T9__>>* = nullptr>
  stan::promote_args_t<T3__, T4__, T5__, T6__, T7__,
                       stan::promote_args_t<T8__, T9__>>
  operator()(const std::vector<std::vector<std::vector<int>>>& choice_itc,
             const int& start, const int& end,
             const std::vector<std::vector<std::vector<T3__>>>& RTu_rdm,
             const std::vector<std::vector<std::vector<T4__>>>& RTl_rdm,
             const std::vector<std::vector<std::vector<T5__>>>& Cohu_rdm,
             const std::vector<std::vector<std::vector<T6__>>>& Cohl_rdm,
             const std::vector<std::vector<T7__>>& delta_rdm,
             const std::vector<std::vector<T8__>>& alpha_rdm,
             const std::vector<std::vector<T9__>>& tau_rdm,
             const std::vector<std::vector<int>>& idx_rdm_obs,
             const std::vector<std::vector<int>>& Nu_rdm,
             const std::vector<std::vector<int>>& Nl_rdm, const int& W,
             std::ostream* pstream__) const;
};
struct fast_pt_rng_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename RNG,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__, T3__>
  operator()(const T0__& alpha, const T1__& tau, const T2__& beta,
             const T3__& delta, RNG& base_rng__, std::ostream* pstream__) const;
};
struct partial_sum_rsfunctor__ {
  template <typename T3__, typename T4__, typename T5__, typename T6__,
            typename T7__, typename T8__, typename T9__,
            stan::require_all_t<stan::is_stan_scalar<T3__>,
                                stan::is_stan_scalar<T4__>,
                                stan::is_stan_scalar<T5__>,
                                stan::is_stan_scalar<T6__>,
                                stan::is_stan_scalar<T7__>,
                                stan::is_stan_scalar<T8__>,
                                stan::is_stan_scalar<T9__>>* = nullptr>
  stan::promote_args_t<T3__, T4__, T5__, T6__, T7__,
                       stan::promote_args_t<T8__, T9__>>
  operator()(const std::vector<std::vector<std::vector<int>>>& choice_itc,
             const int& start, const int& end, std::ostream* pstream__,
             const std::vector<std::vector<std::vector<T3__>>>& RTu_rdm,
             const std::vector<std::vector<std::vector<T4__>>>& RTl_rdm,
             const std::vector<std::vector<std::vector<T5__>>>& Cohu_rdm,
             const std::vector<std::vector<std::vector<T6__>>>& Cohl_rdm,
             const std::vector<std::vector<T7__>>& delta_rdm,
             const std::vector<std::vector<T8__>>& alpha_rdm,
             const std::vector<std::vector<T9__>>& tau_rdm,
             const std::vector<std::vector<int>>& idx_rdm_obs,
             const std::vector<std::vector<int>>& Nu_rdm,
             const std::vector<std::vector<int>>& Nl_rdm, const int& W) const;
};
struct wiener_rng_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename RNG,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__, T3__>, -1, 1>
  operator()(const T0__& alpha, const T1__& tau, const T2__& beta,
             const T3__& delta, RNG& base_rng__, std::ostream* pstream__) const;
};
struct make_vars_functor__ {
  template <typename T0__,
            stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
  operator()(const T0__& mu, std::ostream* pstream__) const;
};
struct sample_large_mu_rng_functor__ {
  template <typename T0__, typename RNG,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T0__>>
  operator()(const T0__& vars, RNG& base_rng__, std::ostream* pstream__) const;
};
struct sample_small_mu_rng_functor__ {
  template <typename T0__, typename RNG,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T0__>>
  operator()(const T0__& vars, RNG& base_rng__, std::ostream* pstream__) const;
};
struct acceptt_rng_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename RNG,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>>* = nullptr>
  int
  operator()(const T0__& t_star, const T1__& ft, const T2__& c,
             RNG& base_rng__, std::ostream* pstream__) const;
};
struct fs_cdf_functor__ {
  template <typename T0__, typename T1__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  operator()(const T0__& t, const T1__& a, std::ostream* pstream__) const;
};
struct inverse_gaussian_rng_functor__ {
  template <typename T0__, typename T1__, typename RNG,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  operator()(const T0__& mu, const T1__& mu_sq, RNG& base_rng__,
             std::ostream* pstream__) const;
};

template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  fs_cdf(const T0__& t, const T1__& a, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 272;
      if (stan::math::logical_lt(a, 1)) {
        current_statement__ = 270;
        std::stringstream errmsg_stream__;
        errmsg_stream__ << "a must be >= 1, found a = ";
        errmsg_stream__ << a;
        throw std::domain_error(errmsg_stream__.str());
      } 
      current_statement__ = 273;
      return stan::math::erfc(stan::math::inv_sqrt(((2 * a) * t)));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
  make_vars(const T0__& mu, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ mu2 = DUMMY_VAR__;
      current_statement__ = 275;
      mu2 = stan::math::pow(mu, 2);
      local_scalar_t__ t_tilde = DUMMY_VAR__;
      current_statement__ = 276;
      t_tilde = (0.12 + (0.5 * stan::math::exp((-mu2 / 3))));
      local_scalar_t__ a = DUMMY_VAR__;
      current_statement__ = 277;
      a = ((3 + stan::math::sqrt((9 + (4 * mu2)))) / 6);
      local_scalar_t__ sqrtamu = DUMMY_VAR__;
      current_statement__ = 278;
      sqrtamu = stan::math::sqrt((((a - 1) * mu2) / a));
      local_scalar_t__ fourmu2pi = DUMMY_VAR__;
      current_statement__ = 279;
      fourmu2pi = (((4 * mu2) + stan::math::pow(stan::math::pi(), 2)) / 8);
      local_scalar_t__ Cf1s = DUMMY_VAR__;
      current_statement__ = 280;
      Cf1s = (stan::math::sqrt(a) * stan::math::exp(-sqrtamu));
      local_scalar_t__ Cf1l = DUMMY_VAR__;
      current_statement__ = 281;
      Cf1l = (stan::math::pi() / (4 * fourmu2pi));
      local_scalar_t__ CF1st = DUMMY_VAR__;
      current_statement__ = 282;
      CF1st = (Cf1s * fs_cdf(t_tilde, a, pstream__));
      local_scalar_t__ F1lt = DUMMY_VAR__;
      current_statement__ = 283;
      F1lt = -stan::math::expm1((-t_tilde * fourmu2pi));
      local_scalar_t__ F1inf = DUMMY_VAR__;
      current_statement__ = 284;
      F1inf = (CF1st + (Cf1l * (1 - F1lt)));
      current_statement__ = 285;
      return (Eigen::Matrix<local_scalar_t__,-1,1>(10) << mu2, t_tilde, a,
          sqrtamu, fourmu2pi, Cf1s, Cf1l, CF1st, F1lt, F1inf).finished();
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename RNG,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr> int
  acceptt_rng(const T0__& t_star, const T1__& ft, const T2__& c,
              RNG& base_rng__, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 289;
      if (stan::math::logical_lte(c, 0.06385320297074884)) {
        current_statement__ = 287;
        std::stringstream errmsg_stream__;
        errmsg_stream__ << "c is ";
        errmsg_stream__ << c;
        throw std::domain_error(errmsg_stream__.str());
      } 
      current_statement__ = 292;
      if (stan::math::is_nan(c)) {
        current_statement__ = 290;
        std::stringstream errmsg_stream__;
        errmsg_stream__ << "c is nan!";
        throw std::domain_error(errmsg_stream__.str());
      } 
      local_scalar_t__ z = DUMMY_VAR__;
      current_statement__ = 293;
      z = (ft * stan::math::uniform_rng(0, 1, base_rng__));
      local_scalar_t__ b = DUMMY_VAR__;
      current_statement__ = 294;
      b = stan::math::exp(-c);
      int k = std::numeric_limits<int>::min();
      current_statement__ = 295;
      k = 3;
      current_statement__ = 307;
      while (1) {
        current_statement__ = 298;
        if (stan::math::logical_gt(z, b)) {
          current_statement__ = 296;
          return 0;
        } 
        current_statement__ = 299;
        b = (b - (k * stan::math::exp((-c * stan::math::pow(k, 2)))));
        current_statement__ = 302;
        if (stan::math::logical_lt(z, b)) {
          current_statement__ = 300;
          return 1;
        } 
        current_statement__ = 303;
        k = (k + 2);
        current_statement__ = 304;
        b = (b + (k * stan::math::exp((-c * stan::math::pow(k, 2)))));
        current_statement__ = 305;
        k = (k + 2);
      }
      current_statement__ = 308;
      return 0;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename RNG,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T0__>>
  sample_small_mu_rng(const T0__& vars_arg__, RNG& base_rng__,
                      std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
    int current_statement__ = 0; 
    const auto& vars = stan::math::to_ref(vars_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ t_star = DUMMY_VAR__;
      local_scalar_t__ pi_sq = DUMMY_VAR__;
      current_statement__ = 311;
      pi_sq = stan::math::pow(stan::math::pi(), 2);
      local_scalar_t__ mu2 = DUMMY_VAR__;
      current_statement__ = 312;
      mu2 = stan::model::rvalue(vars, "vars", stan::model::index_uni(1));
      local_scalar_t__ a = DUMMY_VAR__;
      current_statement__ = 313;
      a = stan::model::rvalue(vars, "vars", stan::model::index_uni(3));
      local_scalar_t__ sqrtamu = DUMMY_VAR__;
      current_statement__ = 314;
      sqrtamu = stan::model::rvalue(vars, "vars", stan::model::index_uni(4));
      local_scalar_t__ fourmu2pi = DUMMY_VAR__;
      current_statement__ = 315;
      fourmu2pi = stan::model::rvalue(vars, "vars",
                    stan::model::index_uni(5));
      local_scalar_t__ Cf1s = DUMMY_VAR__;
      current_statement__ = 316;
      Cf1s = stan::model::rvalue(vars, "vars", stan::model::index_uni(6));
      local_scalar_t__ Cf1l = DUMMY_VAR__;
      current_statement__ = 317;
      Cf1l = stan::model::rvalue(vars, "vars", stan::model::index_uni(7));
      local_scalar_t__ CF1st = DUMMY_VAR__;
      current_statement__ = 318;
      CF1st = stan::model::rvalue(vars, "vars", stan::model::index_uni(8));
      local_scalar_t__ F1lt = DUMMY_VAR__;
      current_statement__ = 319;
      F1lt = stan::model::rvalue(vars, "vars", stan::model::index_uni(9));
      local_scalar_t__ F1inf = DUMMY_VAR__;
      current_statement__ = 320;
      F1inf = stan::model::rvalue(vars, "vars", stan::model::index_uni(10));
      int counter_outer = std::numeric_limits<int>::min();
      current_statement__ = 321;
      counter_outer = 0;
      current_statement__ = 346;
      while (1) {
        local_scalar_t__ p = DUMMY_VAR__;
        current_statement__ = 322;
        p = (F1inf * stan::math::uniform_rng(0, 1, base_rng__));
        current_statement__ = 344;
        if (stan::math::logical_lte(p, CF1st)) {
          current_statement__ = 334;
          t_star = (1. /
                     ((2 * a) *
                       stan::math::pow(stan::math::inv_erfc((p / Cf1s)), 2)));
          current_statement__ = 338;
          while (stan::math::logical_lte((0.5 * t_star), 0.06385320297074884)) {
            current_statement__ = 335;
            p = stan::math::uniform_rng(0.06385320297074884, CF1st,
                  base_rng__);
            current_statement__ = 336;
            t_star = (1. /
                       ((2 * a) *
                         stan::math::pow(stan::math::inv_erfc((p / Cf1s)), 2)));
          }
          local_scalar_t__ ft = DUMMY_VAR__;
          current_statement__ = 339;
          ft = stan::math::exp(
                 (((-1. / ((2 * a) * t_star)) - sqrtamu) + (mu2 * t_star)));
          current_statement__ = 342;
          if (stan::math::logical_eq(
                acceptt_rng(t_star, ft,
                  (0.5 * t_star), base_rng__, pstream__), 1)) {
            current_statement__ = 340;
            return t_star;
          } 
        } else {
          current_statement__ = 323;
          t_star = (-stan::math::log1p(((-(p - CF1st) / Cf1l) - F1lt)) /
                     fourmu2pi);
          local_scalar_t__ pisqt = DUMMY_VAR__;
          current_statement__ = 324;
          pisqt = ((pi_sq * t_star) / 8);
          current_statement__ = 329;
          while (stan::math::logical_lte(pisqt, 0.06385320297074884)) {
            current_statement__ = 325;
            p = stan::math::uniform_rng(CF1st, F1inf, base_rng__);
            current_statement__ = 326;
            t_star = (-stan::math::log1p(((-(p - CF1st) / Cf1l) - F1lt)) /
                       fourmu2pi);
            current_statement__ = 327;
            pisqt = ((pi_sq * t_star) / 8);
          }
          current_statement__ = 332;
          if (stan::math::logical_eq(
                acceptt_rng(t_star, stan::math::exp(-pisqt),
                  pisqt, base_rng__, pstream__), 1)) {
            current_statement__ = 330;
            return t_star;
          } 
        }
      }
      current_statement__ = 347;
      return 0;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename RNG,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  inverse_gaussian_rng(const T0__& mu, const T1__& mu_sq, RNG& base_rng__,
                       std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ v = DUMMY_VAR__;
      current_statement__ = 349;
      v = stan::math::pow(stan::math::std_normal_rng(base_rng__), 2);
      local_scalar_t__ z = DUMMY_VAR__;
      current_statement__ = 350;
      z = stan::math::uniform_rng(0, 1, base_rng__);
      local_scalar_t__ x = DUMMY_VAR__;
      current_statement__ = 351;
      x = ((mu + ((0.5 * mu_sq) * v)) -
            ((0.5 * mu) *
              stan::math::sqrt(
                (((4 * mu) * v) + (mu_sq * stan::math::pow(v, 2))))));
      current_statement__ = 356;
      if (stan::math::logical_lte(z, (mu / (mu + x)))) {
        current_statement__ = 354;
        return x;
      } else {
        current_statement__ = 352;
        return (mu_sq / x);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename RNG,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T0__>>
  sample_large_mu_rng(const T0__& vars_arg__, RNG& base_rng__,
                      std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
    int current_statement__ = 0; 
    const auto& vars = stan::math::to_ref(vars_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ mu2 = DUMMY_VAR__;
      current_statement__ = 358;
      mu2 = stan::model::rvalue(vars, "vars", stan::model::index_uni(1));
      local_scalar_t__ t_tilde = DUMMY_VAR__;
      current_statement__ = 359;
      t_tilde = stan::model::rvalue(vars, "vars", stan::model::index_uni(2));
      local_scalar_t__ a = DUMMY_VAR__;
      current_statement__ = 360;
      a = stan::model::rvalue(vars, "vars", stan::model::index_uni(3));
      local_scalar_t__ sqrtamu = DUMMY_VAR__;
      current_statement__ = 361;
      sqrtamu = stan::model::rvalue(vars, "vars", stan::model::index_uni(4));
      local_scalar_t__ fourmu2pi = DUMMY_VAR__;
      current_statement__ = 362;
      fourmu2pi = stan::model::rvalue(vars, "vars",
                    stan::model::index_uni(5));
      local_scalar_t__ Cf1s = DUMMY_VAR__;
      current_statement__ = 363;
      Cf1s = stan::model::rvalue(vars, "vars", stan::model::index_uni(6));
      local_scalar_t__ Cf1l = DUMMY_VAR__;
      current_statement__ = 364;
      Cf1l = stan::model::rvalue(vars, "vars", stan::model::index_uni(7));
      local_scalar_t__ CF1st = DUMMY_VAR__;
      current_statement__ = 365;
      CF1st = stan::model::rvalue(vars, "vars", stan::model::index_uni(8));
      local_scalar_t__ F1lt = DUMMY_VAR__;
      current_statement__ = 366;
      F1lt = stan::model::rvalue(vars, "vars", stan::model::index_uni(9));
      local_scalar_t__ F1inf = DUMMY_VAR__;
      current_statement__ = 367;
      F1inf = stan::model::rvalue(vars, "vars", stan::model::index_uni(10));
      local_scalar_t__ invabsmu = DUMMY_VAR__;
      current_statement__ = 368;
      invabsmu = stan::math::inv_sqrt(mu2);
      current_statement__ = 375;
      if (stan::math::logical_gte(t_tilde, 0.63662)) {
        current_statement__ = 372;
        Cf1l = (-stan::math::log((stan::math::pi() * 0.25)) -
                 (0.5 * stan::math::log((2 * stan::math::pi()))));
        current_statement__ = 373;
        Cf1s = 0;
      } else {
        current_statement__ = 369;
        Cf1l = ((((-stan::math::pow(stan::math::pi(), 2) * t_tilde) / 8) +
                  ((3. / 2.) * stan::math::log(t_tilde))) +
                 (0.5 * stan::math::inv(t_tilde)));
        current_statement__ = 370;
        Cf1s = ((Cf1l + (0.5 * stan::math::log((2 * stan::math::pi())))) +
                 stan::math::log((stan::math::pi() * 0.25)));
      }
      current_statement__ = 396;
      while (1) {
        local_scalar_t__ t_star = DUMMY_VAR__;
        current_statement__ = 376;
        t_star = inverse_gaussian_rng(invabsmu,
                   stan::math::inv(mu2), base_rng__, pstream__);
        current_statement__ = 379;
        if (stan::math::is_nan(t_star)) {
          current_statement__ = 377;
          std::stringstream errmsg_stream__;
          errmsg_stream__ << "t_star is nan! ";
          errmsg_stream__ << mu2;
          throw std::domain_error(errmsg_stream__.str());
        } 
        local_scalar_t__ one2t = DUMMY_VAR__;
        current_statement__ = 380;
        one2t = (0.5 * stan::math::inv(t_star));
        current_statement__ = 394;
        if (stan::math::logical_lte(t_star, 2.5)) {
          local_scalar_t__ expone2t = DUMMY_VAR__;
          current_statement__ = 386;
          expone2t = stan::math::exp((Cf1s - one2t));
          current_statement__ = 389;
          if (stan::math::logical_eq(expone2t, 0)) {
            current_statement__ = 387;
            expone2t = 1e-8;
          } 
          current_statement__ = 392;
          if ((stan::math::primitive_value(
              stan::math::logical_eq(
                acceptt_rng(t_star, expone2t, one2t, base_rng__, pstream__),
                0)) || stan::math::primitive_value(
              stan::math::logical_lt(invabsmu, 0.000666)))) {
            current_statement__ = 390;
            return t_star;
          } 
        } else {
          local_scalar_t__ expone2t = DUMMY_VAR__;
          current_statement__ = 381;
          expone2t = stan::math::exp(
                       (((-stan::math::log((stan::math::pi() / 4)) -
                           (0.5 * stan::math::log((2 * stan::math::pi())))) -
                          one2t) - ((3. / 2.) * stan::math::log(t_star))));
          current_statement__ = 384;
          if (stan::math::logical_eq(
                acceptt_rng(t_star, expone2t,
                  ((stan::math::pow(stan::math::pi(), 2) * t_star) / 8), base_rng__, pstream__),
                0)) {
            current_statement__ = 382;
            return t_star;
          } 
        }
      }
      current_statement__ = 397;
      return 0;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename RNG,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__, T3__>
  fast_pt_rng(const T0__& alpha, const T1__& tau, const T2__& beta,
              const T3__& delta, RNG& base_rng__, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ absmu = DUMMY_VAR__;
      current_statement__ = 399;
      absmu = stan::math::fabs(delta);
      Eigen::Matrix<local_scalar_t__, -1, 1> vars =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(10, DUMMY_VAR__);
      current_statement__ = 400;
      stan::model::assign(vars, make_vars(absmu, pstream__),
        "assigning variable vars");
      local_scalar_t__ pt = DUMMY_VAR__;
      current_statement__ = 406;
      if (stan::math::logical_lt(absmu, 1)) {
        current_statement__ = 404;
        pt = sample_small_mu_rng(vars, base_rng__, pstream__);
      } else {
        current_statement__ = 402;
        pt = sample_large_mu_rng(vars, base_rng__, pstream__);
      }
      current_statement__ = 407;
      return pt;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename RNG,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__, T3__>, -1, 1>
  wiener_rng(const T0__& alpha, const T1__& tau, const T2__& beta,
             const T3__& delta, RNG& base_rng__, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ t = DUMMY_VAR__;
      current_statement__ = 409;
      t = 0;
      local_scalar_t__ sign_delta = DUMMY_VAR__;
      current_statement__ = 410;
      sign_delta = (stan::math::logical_gt(delta, 0) ?
                      stan::math::promote_scalar<int>(1) :
                      stan::math::promote_scalar<int>(-1));
      local_scalar_t__ x = DUMMY_VAR__;
      current_statement__ = 411;
      x = (beta * alpha);
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 412;
      mu = stan::math::fabs(delta);
      local_scalar_t__ hit_bound = DUMMY_VAR__;
      Eigen::Matrix<local_scalar_t__, -1, 1> out =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      int counter = std::numeric_limits<int>::min();
      current_statement__ = 415;
      counter = 0;
      current_statement__ = 418;
      if ((stan::math::primitive_value(stan::math::logical_eq(beta, 0)) ||
          stan::math::primitive_value(stan::math::logical_eq(beta, 1)))) {
        current_statement__ = 416;
        return (Eigen::Matrix<local_scalar_t__,-1,1>(2) << tau,
            beta).finished();
      } 
      current_statement__ = 449;
      while (1) {
        local_scalar_t__ mutheta = DUMMY_VAR__;
        local_scalar_t__ xlo = DUMMY_VAR__;
        current_statement__ = 420;
        xlo = x;
        local_scalar_t__ xhi = DUMMY_VAR__;
        current_statement__ = 421;
        xhi = (alpha - x);
        current_statement__ = 447;
        if (stan::math::logical_lt(stan::math::fabs((xlo - xhi)), 1e-6)) {
          current_statement__ = 441;
          mutheta = (xhi * mu);
          local_scalar_t__ pt = DUMMY_VAR__;
          current_statement__ = 442;
          pt = fast_pt_rng(alpha, tau, beta,
                 (xhi * stan::math::fabs(delta)), base_rng__, pstream__);
          current_statement__ = 443;
          hit_bound = (stan::math::logical_eq(sign_delta, 1) ?
                         stan::math::inv_logit((2 * mutheta)) :
                         (1 - stan::math::inv_logit((2 * mutheta))));
          local_scalar_t__ bound = DUMMY_VAR__;
          current_statement__ = 444;
          bound = (
                     stan::math::logical_lt(
                       stan::math::uniform_rng(0, 1, base_rng__), hit_bound)
                     ? stan::math::promote_scalar<int>(1) :
                     stan::math::promote_scalar<int>(0));
          current_statement__ = 445;
          return (Eigen::Matrix<local_scalar_t__,-1,1>(2) <<
              ((tau + t) + (stan::math::square(xhi) * pt)),
              bound).finished();
        } else {
          current_statement__ = 440;
          if (stan::math::logical_gt(xlo, xhi)) {
            current_statement__ = 432;
            mutheta = (xhi * mu);
            current_statement__ = 433;
            t = (t +
                  (stan::math::square(xhi) *
                    fast_pt_rng(alpha, tau, beta,
                      (xhi * stan::math::fabs(delta)), base_rng__, pstream__)));
            current_statement__ = 434;
            hit_bound = (stan::math::logical_eq(sign_delta, 1) ?
                           stan::math::inv_logit((2 * mutheta)) :
                           (1 - stan::math::inv_logit((2 * mutheta))));
            current_statement__ = 437;
            if (stan::math::logical_lt(
                  stan::math::uniform_rng(0, 1, base_rng__), hit_bound)) {
              current_statement__ = 435;
              return (Eigen::Matrix<local_scalar_t__,-1,1>(2) << (tau + t),
                  1).finished();
            } 
            current_statement__ = 438;
            x = (x - xhi);
          } else {
            current_statement__ = 422;
            mutheta = (xlo * mu);
            current_statement__ = 423;
            t = (t +
                  (stan::math::square(xlo) *
                    fast_pt_rng(alpha, tau, beta,
                      (xlo * stan::math::fabs(delta)), base_rng__, pstream__)));
            current_statement__ = 424;
            hit_bound = (stan::math::logical_eq(sign_delta, 1) ?
                           stan::math::inv_logit((2 * mutheta)) :
                           (1 - stan::math::inv_logit((2 * mutheta))));
            current_statement__ = 429;
            if (stan::math::logical_gt(
                  stan::math::uniform_rng(0, 1, base_rng__), hit_bound)) {
              current_statement__ = 425;
              stan::model::assign(out, (tau + t),
                "assigning variable out", stan::model::index_uni(1));
              current_statement__ = 426;
              stan::model::assign(out, 0,
                "assigning variable out", stan::model::index_uni(2));
              break;
            } 
            current_statement__ = 430;
            x = (x + xlo);
          }
        }
      }
      current_statement__ = 450;
      return out;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__, typename T8__, typename T9__,
          stan::require_all_t<stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_stan_scalar<T7__>,
                              stan::is_stan_scalar<T8__>,
                              stan::is_stan_scalar<T9__>>* = nullptr>
  stan::promote_args_t<T3__, T4__, T5__, T6__, T7__,
                     stan::promote_args_t<T8__, T9__>>
  partial_sum(const std::vector<std::vector<std::vector<int>>>& choice_itc,
              const int& start, const int& end,
              const std::vector<std::vector<std::vector<T3__>>>& RTu_rdm,
              const std::vector<std::vector<std::vector<T4__>>>& RTl_rdm,
              const std::vector<std::vector<std::vector<T5__>>>& Cohu_rdm,
              const std::vector<std::vector<std::vector<T6__>>>& Cohl_rdm,
              const std::vector<std::vector<T7__>>& delta_rdm,
              const std::vector<std::vector<T8__>>& alpha_rdm,
              const std::vector<std::vector<T9__>>& tau_rdm,
              const std::vector<std::vector<int>>& idx_rdm_obs,
              const std::vector<std::vector<int>>& Nu_rdm,
              const std::vector<std::vector<int>>& Nl_rdm, const int& W,
              std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T3__, T4__, T5__, T6__, T7__,
                                 stan::promote_args_t<T8__, T9__>>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ lt = DUMMY_VAR__;
      current_statement__ = 452;
      lt = 0;
      current_statement__ = 465;
      for (int n = 1; n <= ((end - start) + 1); ++n) {
        int s = std::numeric_limits<int>::min();
        current_statement__ = 453;
        s = (start + (n - 1));
        current_statement__ = 463;
        for (int w = 1; w <= W; ++w) {
          current_statement__ = 461;
          if (stan::math::logical_neq(
                stan::model::rvalue(idx_rdm_obs, "idx_rdm_obs",
                  stan::model::index_uni(s), stan::model::index_uni(w)), 0)) {
            current_statement__ = 454;
            stan::math::validate_non_negative_index("delta_cohu",
                                                    "Nu_rdm[s, w]",
                                                    stan::model::rvalue(
                                                      Nu_rdm, "Nu_rdm",
                                                      stan::model::index_uni(s),
                                                        stan::model::index_uni(w)));
            Eigen::Matrix<local_scalar_t__, -1, 1> delta_cohu =
               Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
                 stan::model::rvalue(Nu_rdm, "Nu_rdm",
                   stan::model::index_uni(s), stan::model::index_uni(w)),
                 DUMMY_VAR__);
            current_statement__ = 455;
            stan::model::assign(delta_cohu,
              stan::math::multiply(
                stan::model::rvalue(delta_rdm, "delta_rdm",
                  stan::model::index_uni(s), stan::model::index_uni(w)),
                stan::math::to_vector(
                  stan::model::rvalue(Cohu_rdm, "Cohu_rdm",
                    stan::model::index_uni(s), stan::model::index_uni(w),
                      stan::model::index_min_max(1, stan::model::rvalue(
                                                      Nu_rdm, "Nu_rdm",
                                                      stan::model::index_uni(s),
                                                        stan::model::index_uni(w)))))),
              "assigning variable delta_cohu");
            current_statement__ = 456;
            stan::math::validate_non_negative_index("delta_cohl",
                                                    "Nl_rdm[s, w]",
                                                    stan::model::rvalue(
                                                      Nl_rdm, "Nl_rdm",
                                                      stan::model::index_uni(s),
                                                        stan::model::index_uni(w)));
            Eigen::Matrix<local_scalar_t__, -1, 1> delta_cohl =
               Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
                 stan::model::rvalue(Nl_rdm, "Nl_rdm",
                   stan::model::index_uni(s), stan::model::index_uni(w)),
                 DUMMY_VAR__);
            current_statement__ = 457;
            stan::model::assign(delta_cohl,
              stan::math::multiply(
                stan::model::rvalue(delta_rdm, "delta_rdm",
                  stan::model::index_uni(s), stan::model::index_uni(w)),
                stan::math::to_vector(
                  stan::model::rvalue(Cohl_rdm, "Cohl_rdm",
                    stan::model::index_uni(s), stan::model::index_uni(w),
                      stan::model::index_min_max(1, stan::model::rvalue(
                                                      Nl_rdm, "Nl_rdm",
                                                      stan::model::index_uni(s),
                                                        stan::model::index_uni(w)))))),
              "assigning variable delta_cohl");
            current_statement__ = 458;
            lt = (lt +
                   stan::math::wiener_lpdf<false>(
                     stan::model::rvalue(RTu_rdm, "RTu_rdm",
                       stan::model::index_uni(s), stan::model::index_uni(w),
                         stan::model::index_min_max(1, stan::model::rvalue(
                                                         Nu_rdm, "Nu_rdm",
                                                         stan::model::index_uni(s),
                                                           stan::model::index_uni(w)))),
                     stan::model::rvalue(alpha_rdm, "alpha_rdm",
                       stan::model::index_uni(s), stan::model::index_uni(w)),
                     stan::model::rvalue(tau_rdm, "tau_rdm",
                       stan::model::index_uni(s), stan::model::index_uni(w)),
                     0.5, delta_cohu));
            current_statement__ = 459;
            lt = (lt +
                   stan::math::wiener_lpdf<false>(
                     stan::model::rvalue(RTl_rdm, "RTl_rdm",
                       stan::model::index_uni(s), stan::model::index_uni(w),
                         stan::model::index_min_max(1, stan::model::rvalue(
                                                         Nl_rdm, "Nl_rdm",
                                                         stan::model::index_uni(s),
                                                           stan::model::index_uni(w)))),
                     stan::model::rvalue(alpha_rdm, "alpha_rdm",
                       stan::model::index_uni(s), stan::model::index_uni(w)),
                     stan::model::rvalue(tau_rdm, "tau_rdm",
                       stan::model::index_uni(s), stan::model::index_uni(w)),
                     0.5, stan::math::minus(delta_cohl)));
          } 
        }
      }
      current_statement__ = 466;
      return lt;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__, typename T8__, typename T9__,
          stan::require_all_t<stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_stan_scalar<T7__>,
                              stan::is_stan_scalar<T8__>,
                              stan::is_stan_scalar<T9__>>*>
stan::promote_args_t<T3__, T4__, T5__, T6__, T7__,
                     stan::promote_args_t<T8__, T9__>>
partial_sum_functor__::operator()(const std::vector<std::vector<std::vector<int>>>& choice_itc,
                                  const int& start, const int& end,
                                  const std::vector<std::vector<std::vector<T3__>>>& RTu_rdm,
                                  const std::vector<std::vector<std::vector<T4__>>>& RTl_rdm,
                                  const std::vector<std::vector<std::vector<T5__>>>& Cohu_rdm,
                                  const std::vector<std::vector<std::vector<T6__>>>& Cohl_rdm,
                                  const std::vector<std::vector<T7__>>& delta_rdm,
                                  const std::vector<std::vector<T8__>>& alpha_rdm,
                                  const std::vector<std::vector<T9__>>& tau_rdm,
                                  const std::vector<std::vector<int>>& idx_rdm_obs,
                                  const std::vector<std::vector<int>>& Nu_rdm,
                                  const std::vector<std::vector<int>>& Nl_rdm,
                                  const int& W, std::ostream* pstream__) 
const
{
  return partial_sum(choice_itc, start, end, RTu_rdm, RTl_rdm, Cohu_rdm,
           Cohl_rdm, delta_rdm, alpha_rdm, tau_rdm, idx_rdm_obs, Nu_rdm,
           Nl_rdm, W, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename RNG,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__>
fast_pt_rng_functor__::operator()(const T0__& alpha, const T1__& tau,
                                  const T2__& beta, const T3__& delta,
                                  RNG& base_rng__, std::ostream* pstream__) 
const
{
  return fast_pt_rng(alpha, tau, beta, delta, base_rng__, pstream__);
}

template <typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__, typename T8__, typename T9__,
          stan::require_all_t<stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_stan_scalar<T7__>,
                              stan::is_stan_scalar<T8__>,
                              stan::is_stan_scalar<T9__>>*>
stan::promote_args_t<T3__, T4__, T5__, T6__, T7__,
                     stan::promote_args_t<T8__, T9__>>
partial_sum_rsfunctor__::operator()(const std::vector<std::vector<std::vector<int>>>& choice_itc,
                                    const int& start, const int& end,
                                    std::ostream* pstream__,
                                    const std::vector<std::vector<std::vector<T3__>>>& RTu_rdm,
                                    const std::vector<std::vector<std::vector<T4__>>>& RTl_rdm,
                                    const std::vector<std::vector<std::vector<T5__>>>& Cohu_rdm,
                                    const std::vector<std::vector<std::vector<T6__>>>& Cohl_rdm,
                                    const std::vector<std::vector<T7__>>& delta_rdm,
                                    const std::vector<std::vector<T8__>>& alpha_rdm,
                                    const std::vector<std::vector<T9__>>& tau_rdm,
                                    const std::vector<std::vector<int>>& idx_rdm_obs,
                                    const std::vector<std::vector<int>>& Nu_rdm,
                                    const std::vector<std::vector<int>>& Nl_rdm,
                                    const int& W)  const
{
  return partial_sum(choice_itc, start + 1, end + 1, RTu_rdm, RTl_rdm,
           Cohu_rdm, Cohl_rdm, delta_rdm, alpha_rdm, tau_rdm, idx_rdm_obs,
           Nu_rdm, Nl_rdm, W, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename RNG,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__, T3__>, -1, 1>
wiener_rng_functor__::operator()(const T0__& alpha, const T1__& tau,
                                 const T2__& beta, const T3__& delta,
                                 RNG& base_rng__, std::ostream* pstream__) 
const
{
  return wiener_rng(alpha, tau, beta, delta, base_rng__, pstream__);
}

template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
make_vars_functor__::operator()(const T0__& mu, std::ostream* pstream__) 
const
{
  return make_vars(mu, pstream__);
}

template <typename T0__, typename RNG,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
stan::promote_args_t<stan::base_type_t<T0__>>
sample_large_mu_rng_functor__::operator()(const T0__& vars, RNG& base_rng__,
                                          std::ostream* pstream__)  const
{
  return sample_large_mu_rng(vars, base_rng__, pstream__);
}

template <typename T0__, typename RNG,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
stan::promote_args_t<stan::base_type_t<T0__>>
sample_small_mu_rng_functor__::operator()(const T0__& vars, RNG& base_rng__,
                                          std::ostream* pstream__)  const
{
  return sample_small_mu_rng(vars, base_rng__, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename RNG,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
int
acceptt_rng_functor__::operator()(const T0__& t_star, const T1__& ft,
                                  const T2__& c, RNG& base_rng__,
                                  std::ostream* pstream__)  const
{
  return acceptt_rng(t_star, ft, c, base_rng__, pstream__);
}

template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T0__, T1__>
fs_cdf_functor__::operator()(const T0__& t, const T1__& a,
                             std::ostream* pstream__)  const
{
  return fs_cdf(t, a, pstream__);
}

template <typename T0__, typename T1__, typename RNG,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T0__, T1__>
inverse_gaussian_rng_functor__::operator()(const T0__& mu, const T1__& mu_sq,
                                           RNG& base_rng__,
                                           std::ostream* pstream__)  const
{
  return inverse_gaussian_rng(mu, mu_sq, base_rng__, pstream__);
}


class rdm_hierarchical_independent_with_gq_final_model final : public model_base_crtp<rdm_hierarchical_independent_with_gq_final_model> {

 private:
  int N;
  int W;
  int P_itc;
  std::vector<std::vector<int>> idx_itc_obs;
  int Tr_max_itc;
  std::vector<std::vector<int>> Tr_itc;
  std::vector<std::vector<std::vector<double>>> amount_later;
  std::vector<std::vector<std::vector<double>>> amount_sooner;
  std::vector<std::vector<std::vector<double>>> delay_later;
  std::vector<std::vector<std::vector<int>>> choice_itc;
  int P_smb;
  std::vector<std::vector<int>> idx_smb_obs;
  int Tr_max_smb;
  std::vector<std::vector<int>> Tr_smb;
  std::vector<std::vector<std::vector<std::vector<double>>>> x_smb;
  std::vector<std::vector<std::vector<int>>> y_smb;
  int P_nc;
  std::vector<int> W_nc_obs;
  std::vector<std::vector<int>> idx_nc_obs;
  int Tr_max_nc;
  std::vector<std::vector<int>> Tr_nc;
  std::vector<std::vector<std::vector<int>>> deltaM;
  std::vector<std::vector<std::vector<double>>> TotalS;
  std::vector<std::vector<std::vector<int>>> choice_nc;
  int P_gng;
  std::vector<std::vector<int>> idx_gng_obs;
  int Bl;
  int Tr_max_gng;
  std::vector<std::vector<std::vector<int>>> Tr_gng;
  std::vector<std::vector<std::vector<std::vector<int>>>> cue_gng;
  std::vector<std::vector<std::vector<std::vector<int>>>> pressed_gng;
  std::vector<std::vector<std::vector<std::vector<double>>>> outcome_gng;
  int P_lt;
  std::vector<std::vector<int>> idx_lt_obs;
  int Tr_max_lt;
  std::vector<std::vector<int>> Tr_lt;
  std::vector<std::vector<std::vector<double>>> hi_p_lt;
  std::vector<std::vector<std::vector<double>>> hi_narr_lt;
  std::vector<std::vector<std::vector<double>>> lo_narr_lt;
  std::vector<std::vector<std::vector<double>>> hi_wide_lt;
  std::vector<std::vector<std::vector<double>>> lo_wide_lt;
  std::vector<std::vector<std::vector<int>>> choice_lt;
  int P_cd;
  std::vector<std::vector<int>> idx_cd_obs;
  int Tr_max_cd;
  std::vector<std::vector<int>> Tr_cd;
  std::vector<std::vector<std::vector<int>>> Nb_cd;
  std::vector<std::vector<std::vector<int>>> Tar_cd;
  std::vector<std::vector<std::vector<double>>> delta_cd;
  std::vector<std::vector<std::vector<int>>> choice_cd;
  int P_rdm;
  std::vector<std::vector<int>> idx_rdm_obs;
  int Nu_max_rdm;
  int Nl_max_rdm;
  std::vector<std::vector<int>> Nu_rdm;
  std::vector<std::vector<int>> Nl_rdm;
  std::vector<std::vector<std::vector<double>>> RTu_rdm;
  std::vector<std::vector<std::vector<double>>> RTl_rdm;
  std::vector<std::vector<std::vector<double>>> Cohu_rdm;
  std::vector<std::vector<std::vector<double>>> Cohl_rdm;
  Eigen::Matrix<double, -1, -1> minRT_rdm_data__;
  double RTbound_rdm;
  int num_par;
  int y_pred_all_weeks_rdm_1dim__;
  int trial_type_1dim__; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> minRT_rdm{nullptr, 0, 0};
 
 public:
  ~rdm_hierarchical_independent_with_gq_final_model() { }
  
  inline std::string model_name() const final { return "rdm_hierarchical_independent_with_gq_final_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.30.1", "stancflags = "};
  }
  
  
  rdm_hierarchical_independent_with_gq_final_model(stan::io::var_context& context__,
                                                   unsigned int random_seed__ = 0,
                                                   std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "rdm_hierarchical_independent_with_gq_final_model_namespace::rdm_hierarchical_independent_with_gq_final_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 66;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 66;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 67;
      context__.validate_dims("data initialization","W","int",
           std::vector<size_t>{});
      W = std::numeric_limits<int>::min();
      
      
      current_statement__ = 67;
      W = context__.vals_i("W")[(1 - 1)];
      current_statement__ = 68;
      context__.validate_dims("data initialization","P_itc","int",
           std::vector<size_t>{});
      P_itc = std::numeric_limits<int>::min();
      
      
      current_statement__ = 68;
      P_itc = context__.vals_i("P_itc")[(1 - 1)];
      current_statement__ = 69;
      stan::math::validate_non_negative_index("idx_itc_obs", "N", N);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("idx_itc_obs", "W", W);
      current_statement__ = 71;
      context__.validate_dims("data initialization","idx_itc_obs","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W)});
      idx_itc_obs = 
        std::vector<std::vector<int>>(N, 
          std::vector<int>(W, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> idx_itc_obs_flat__;
        current_statement__ = 71;
        idx_itc_obs_flat__ = context__.vals_i("idx_itc_obs");
        current_statement__ = 71;
        pos__ = 1;
        current_statement__ = 71;
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          current_statement__ = 71;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 71;
            stan::model::assign(idx_itc_obs, idx_itc_obs_flat__[(pos__ - 1)],
              "assigning variable idx_itc_obs", stan::model::index_uni(sym2__),
                                                  stan::model::index_uni(sym1__));
            current_statement__ = 71;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 71;
      stan::math::check_greater_or_equal(function__, "idx_itc_obs",
                                            idx_itc_obs, 0);
      current_statement__ = 72;
      context__.validate_dims("data initialization","Tr_max_itc","int",
           std::vector<size_t>{});
      Tr_max_itc = std::numeric_limits<int>::min();
      
      
      current_statement__ = 72;
      Tr_max_itc = context__.vals_i("Tr_max_itc")[(1 - 1)];
      current_statement__ = 72;
      stan::math::check_greater_or_equal(function__, "Tr_max_itc",
                                            Tr_max_itc, 0);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("Tr_itc", "N", N);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("Tr_itc", "W", W);
      current_statement__ = 75;
      context__.validate_dims("data initialization","Tr_itc","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W)});
      Tr_itc = 
        std::vector<std::vector<int>>(N, 
          std::vector<int>(W, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> Tr_itc_flat__;
        current_statement__ = 75;
        Tr_itc_flat__ = context__.vals_i("Tr_itc");
        current_statement__ = 75;
        pos__ = 1;
        current_statement__ = 75;
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          current_statement__ = 75;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 75;
            stan::model::assign(Tr_itc, Tr_itc_flat__[(pos__ - 1)],
              "assigning variable Tr_itc", stan::model::index_uni(sym2__),
                                             stan::model::index_uni(sym1__));
            current_statement__ = 75;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 75;
      stan::math::check_greater_or_equal(function__, "Tr_itc", Tr_itc, 0);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("amount_later", "N", N);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("amount_later", "W", W);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("amount_later", "Tr_max_itc",
                                              Tr_max_itc);
      current_statement__ = 79;
      context__.validate_dims("data initialization","amount_later","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_itc)});
      amount_later = 
        std::vector<std::vector<std::vector<double>>>(N, 
          std::vector<std::vector<double>>(W, 
            std::vector<double>(Tr_max_itc, 
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> amount_later_flat__;
        current_statement__ = 79;
        amount_later_flat__ = context__.vals_r("amount_later");
        current_statement__ = 79;
        pos__ = 1;
        current_statement__ = 79;
        for (int sym1__ = 1; sym1__ <= Tr_max_itc; ++sym1__) {
          current_statement__ = 79;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 79;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 79;
              stan::model::assign(amount_later,
                amount_later_flat__[(pos__ - 1)],
                "assigning variable amount_later", stan::model::index_uni(sym3__),
                                                     stan::model::index_uni(sym2__),
                                                     stan::model::index_uni(sym1__));
              current_statement__ = 79;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 79;
      stan::math::check_greater_or_equal(function__, "amount_later",
                                            amount_later, 0);
      current_statement__ = 80;
      stan::math::validate_non_negative_index("amount_sooner", "N", N);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("amount_sooner", "W", W);
      current_statement__ = 82;
      stan::math::validate_non_negative_index("amount_sooner", "Tr_max_itc",
                                              Tr_max_itc);
      current_statement__ = 83;
      context__.validate_dims("data initialization","amount_sooner","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_itc)});
      amount_sooner = 
        std::vector<std::vector<std::vector<double>>>(N, 
          std::vector<std::vector<double>>(W, 
            std::vector<double>(Tr_max_itc, 
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> amount_sooner_flat__;
        current_statement__ = 83;
        amount_sooner_flat__ = context__.vals_r("amount_sooner");
        current_statement__ = 83;
        pos__ = 1;
        current_statement__ = 83;
        for (int sym1__ = 1; sym1__ <= Tr_max_itc; ++sym1__) {
          current_statement__ = 83;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 83;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 83;
              stan::model::assign(amount_sooner,
                amount_sooner_flat__[(pos__ - 1)],
                "assigning variable amount_sooner", stan::model::index_uni(sym3__),
                                                      stan::model::index_uni(sym2__),
                                                      stan::model::index_uni(sym1__));
              current_statement__ = 83;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 83;
      stan::math::check_greater_or_equal(function__, "amount_sooner",
                                            amount_sooner, 0);
      current_statement__ = 84;
      stan::math::validate_non_negative_index("delay_later", "N", N);
      current_statement__ = 85;
      stan::math::validate_non_negative_index("delay_later", "W", W);
      current_statement__ = 86;
      stan::math::validate_non_negative_index("delay_later", "Tr_max_itc",
                                              Tr_max_itc);
      current_statement__ = 87;
      context__.validate_dims("data initialization","delay_later","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_itc)});
      delay_later = 
        std::vector<std::vector<std::vector<double>>>(N, 
          std::vector<std::vector<double>>(W, 
            std::vector<double>(Tr_max_itc, 
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> delay_later_flat__;
        current_statement__ = 87;
        delay_later_flat__ = context__.vals_r("delay_later");
        current_statement__ = 87;
        pos__ = 1;
        current_statement__ = 87;
        for (int sym1__ = 1; sym1__ <= Tr_max_itc; ++sym1__) {
          current_statement__ = 87;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 87;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 87;
              stan::model::assign(delay_later,
                delay_later_flat__[(pos__ - 1)],
                "assigning variable delay_later", stan::model::index_uni(sym3__),
                                                    stan::model::index_uni(sym2__),
                                                    stan::model::index_uni(sym1__));
              current_statement__ = 87;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 87;
      stan::math::check_greater_or_equal(function__, "delay_later",
                                            delay_later, 0);
      current_statement__ = 88;
      stan::math::validate_non_negative_index("choice_itc", "N", N);
      current_statement__ = 89;
      stan::math::validate_non_negative_index("choice_itc", "W", W);
      current_statement__ = 90;
      stan::math::validate_non_negative_index("choice_itc", "Tr_max_itc",
                                              Tr_max_itc);
      current_statement__ = 91;
      context__.validate_dims("data initialization","choice_itc","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_itc)});
      choice_itc = 
        std::vector<std::vector<std::vector<int>>>(N, 
          std::vector<std::vector<int>>(W, 
            std::vector<int>(Tr_max_itc, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> choice_itc_flat__;
        current_statement__ = 91;
        choice_itc_flat__ = context__.vals_i("choice_itc");
        current_statement__ = 91;
        pos__ = 1;
        current_statement__ = 91;
        for (int sym1__ = 1; sym1__ <= Tr_max_itc; ++sym1__) {
          current_statement__ = 91;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 91;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 91;
              stan::model::assign(choice_itc, choice_itc_flat__[(pos__ - 1)],
                "assigning variable choice_itc", stan::model::index_uni(sym3__),
                                                   stan::model::index_uni(sym2__),
                                                   stan::model::index_uni(sym1__));
              current_statement__ = 91;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 91;
      stan::math::check_greater_or_equal(function__, "choice_itc",
                                            choice_itc, -1);
      current_statement__ = 91;
      stan::math::check_less_or_equal(function__, "choice_itc", choice_itc, 1);
      current_statement__ = 92;
      context__.validate_dims("data initialization","P_smb","int",
           std::vector<size_t>{});
      P_smb = std::numeric_limits<int>::min();
      
      
      current_statement__ = 92;
      P_smb = context__.vals_i("P_smb")[(1 - 1)];
      current_statement__ = 92;
      stan::math::check_greater_or_equal(function__, "P_smb", P_smb, 1);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("idx_smb_obs", "N", N);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("idx_smb_obs", "W", W);
      current_statement__ = 95;
      context__.validate_dims("data initialization","idx_smb_obs","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W)});
      idx_smb_obs = 
        std::vector<std::vector<int>>(N, 
          std::vector<int>(W, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> idx_smb_obs_flat__;
        current_statement__ = 95;
        idx_smb_obs_flat__ = context__.vals_i("idx_smb_obs");
        current_statement__ = 95;
        pos__ = 1;
        current_statement__ = 95;
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          current_statement__ = 95;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 95;
            stan::model::assign(idx_smb_obs, idx_smb_obs_flat__[(pos__ - 1)],
              "assigning variable idx_smb_obs", stan::model::index_uni(sym2__),
                                                  stan::model::index_uni(sym1__));
            current_statement__ = 95;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 95;
      stan::math::check_greater_or_equal(function__, "idx_smb_obs",
                                            idx_smb_obs, 0);
      current_statement__ = 96;
      context__.validate_dims("data initialization","Tr_max_smb","int",
           std::vector<size_t>{});
      Tr_max_smb = std::numeric_limits<int>::min();
      
      
      current_statement__ = 96;
      Tr_max_smb = context__.vals_i("Tr_max_smb")[(1 - 1)];
      current_statement__ = 96;
      stan::math::check_greater_or_equal(function__, "Tr_max_smb",
                                            Tr_max_smb, 1);
      current_statement__ = 97;
      stan::math::validate_non_negative_index("Tr_smb", "N", N);
      current_statement__ = 98;
      stan::math::validate_non_negative_index("Tr_smb", "W", W);
      current_statement__ = 99;
      context__.validate_dims("data initialization","Tr_smb","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W)});
      Tr_smb = 
        std::vector<std::vector<int>>(N, 
          std::vector<int>(W, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> Tr_smb_flat__;
        current_statement__ = 99;
        Tr_smb_flat__ = context__.vals_i("Tr_smb");
        current_statement__ = 99;
        pos__ = 1;
        current_statement__ = 99;
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          current_statement__ = 99;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 99;
            stan::model::assign(Tr_smb, Tr_smb_flat__[(pos__ - 1)],
              "assigning variable Tr_smb", stan::model::index_uni(sym2__),
                                             stan::model::index_uni(sym1__));
            current_statement__ = 99;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 99;
      stan::math::check_greater_or_equal(function__, "Tr_smb", Tr_smb, 0);
      current_statement__ = 99;
      stan::math::check_less_or_equal(function__, "Tr_smb", Tr_smb,
                                         Tr_max_smb);
      current_statement__ = 100;
      stan::math::validate_non_negative_index("x_smb", "N", N);
      current_statement__ = 101;
      stan::math::validate_non_negative_index("x_smb", "W", W);
      current_statement__ = 102;
      stan::math::validate_non_negative_index("x_smb", "Tr_max_smb",
                                              Tr_max_smb);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("x_smb", "P_smb", P_smb);
      current_statement__ = 104;
      context__.validate_dims("data initialization","x_smb","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_smb),
            static_cast<size_t>(P_smb)});
      x_smb = 
        std::vector<std::vector<std::vector<std::vector<double>>>>(N, 
          std::vector<std::vector<std::vector<double>>>(W, 
            std::vector<std::vector<double>>(Tr_max_smb, 
              std::vector<double>(P_smb, 
                std::numeric_limits<double>::quiet_NaN()))));
      
      
      {
        std::vector<local_scalar_t__> x_smb_flat__;
        current_statement__ = 104;
        x_smb_flat__ = context__.vals_r("x_smb");
        current_statement__ = 104;
        pos__ = 1;
        current_statement__ = 104;
        for (int sym1__ = 1; sym1__ <= P_smb; ++sym1__) {
          current_statement__ = 104;
          for (int sym2__ = 1; sym2__ <= Tr_max_smb; ++sym2__) {
            current_statement__ = 104;
            for (int sym3__ = 1; sym3__ <= W; ++sym3__) {
              current_statement__ = 104;
              for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                current_statement__ = 104;
                stan::model::assign(x_smb, x_smb_flat__[(pos__ - 1)],
                  "assigning variable x_smb", stan::model::index_uni(sym4__),
                                                stan::model::index_uni(sym3__),
                                                stan::model::index_uni(sym2__),
                                                stan::model::index_uni(sym1__));
                current_statement__ = 104;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      current_statement__ = 105;
      stan::math::validate_non_negative_index("y_smb", "N", N);
      current_statement__ = 106;
      stan::math::validate_non_negative_index("y_smb", "W", W);
      current_statement__ = 107;
      stan::math::validate_non_negative_index("y_smb", "Tr_max_smb",
                                              Tr_max_smb);
      current_statement__ = 108;
      context__.validate_dims("data initialization","y_smb","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_smb)});
      y_smb = 
        std::vector<std::vector<std::vector<int>>>(N, 
          std::vector<std::vector<int>>(W, 
            std::vector<int>(Tr_max_smb, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> y_smb_flat__;
        current_statement__ = 108;
        y_smb_flat__ = context__.vals_i("y_smb");
        current_statement__ = 108;
        pos__ = 1;
        current_statement__ = 108;
        for (int sym1__ = 1; sym1__ <= Tr_max_smb; ++sym1__) {
          current_statement__ = 108;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 108;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 108;
              stan::model::assign(y_smb, y_smb_flat__[(pos__ - 1)],
                "assigning variable y_smb", stan::model::index_uni(sym3__),
                                              stan::model::index_uni(sym2__),
                                              stan::model::index_uni(sym1__));
              current_statement__ = 108;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 108;
      stan::math::check_greater_or_equal(function__, "y_smb", y_smb, 0);
      current_statement__ = 109;
      context__.validate_dims("data initialization","P_nc","int",
           std::vector<size_t>{});
      P_nc = std::numeric_limits<int>::min();
      
      
      current_statement__ = 109;
      P_nc = context__.vals_i("P_nc")[(1 - 1)];
      current_statement__ = 110;
      stan::math::validate_non_negative_index("W_nc_obs", "N", N);
      current_statement__ = 111;
      context__.validate_dims("data initialization","W_nc_obs","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      W_nc_obs = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 111;
      W_nc_obs = context__.vals_i("W_nc_obs");
      current_statement__ = 111;
      stan::math::check_greater_or_equal(function__, "W_nc_obs", W_nc_obs, 1);
      current_statement__ = 112;
      stan::math::validate_non_negative_index("idx_nc_obs", "N", N);
      current_statement__ = 113;
      stan::math::validate_non_negative_index("idx_nc_obs", "W", W);
      current_statement__ = 114;
      context__.validate_dims("data initialization","idx_nc_obs","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W)});
      idx_nc_obs = 
        std::vector<std::vector<int>>(N, 
          std::vector<int>(W, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> idx_nc_obs_flat__;
        current_statement__ = 114;
        idx_nc_obs_flat__ = context__.vals_i("idx_nc_obs");
        current_statement__ = 114;
        pos__ = 1;
        current_statement__ = 114;
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          current_statement__ = 114;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 114;
            stan::model::assign(idx_nc_obs, idx_nc_obs_flat__[(pos__ - 1)],
              "assigning variable idx_nc_obs", stan::model::index_uni(sym2__),
                                                 stan::model::index_uni(sym1__));
            current_statement__ = 114;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 114;
      stan::math::check_greater_or_equal(function__, "idx_nc_obs",
                                            idx_nc_obs, 0);
      current_statement__ = 115;
      context__.validate_dims("data initialization","Tr_max_nc","int",
           std::vector<size_t>{});
      Tr_max_nc = std::numeric_limits<int>::min();
      
      
      current_statement__ = 115;
      Tr_max_nc = context__.vals_i("Tr_max_nc")[(1 - 1)];
      current_statement__ = 115;
      stan::math::check_greater_or_equal(function__, "Tr_max_nc", Tr_max_nc,
                                            0);
      current_statement__ = 116;
      stan::math::validate_non_negative_index("Tr_nc", "N", N);
      current_statement__ = 117;
      stan::math::validate_non_negative_index("Tr_nc", "W", W);
      current_statement__ = 118;
      context__.validate_dims("data initialization","Tr_nc","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W)});
      Tr_nc = 
        std::vector<std::vector<int>>(N, 
          std::vector<int>(W, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> Tr_nc_flat__;
        current_statement__ = 118;
        Tr_nc_flat__ = context__.vals_i("Tr_nc");
        current_statement__ = 118;
        pos__ = 1;
        current_statement__ = 118;
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          current_statement__ = 118;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 118;
            stan::model::assign(Tr_nc, Tr_nc_flat__[(pos__ - 1)],
              "assigning variable Tr_nc", stan::model::index_uni(sym2__),
                                            stan::model::index_uni(sym1__));
            current_statement__ = 118;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 118;
      stan::math::check_greater_or_equal(function__, "Tr_nc", Tr_nc, 0);
      current_statement__ = 119;
      stan::math::validate_non_negative_index("deltaM", "N", N);
      current_statement__ = 120;
      stan::math::validate_non_negative_index("deltaM", "W", W);
      current_statement__ = 121;
      stan::math::validate_non_negative_index("deltaM", "Tr_max_nc",
                                              Tr_max_nc);
      current_statement__ = 122;
      context__.validate_dims("data initialization","deltaM","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_nc)});
      deltaM = 
        std::vector<std::vector<std::vector<int>>>(N, 
          std::vector<std::vector<int>>(W, 
            std::vector<int>(Tr_max_nc, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> deltaM_flat__;
        current_statement__ = 122;
        deltaM_flat__ = context__.vals_i("deltaM");
        current_statement__ = 122;
        pos__ = 1;
        current_statement__ = 122;
        for (int sym1__ = 1; sym1__ <= Tr_max_nc; ++sym1__) {
          current_statement__ = 122;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 122;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 122;
              stan::model::assign(deltaM, deltaM_flat__[(pos__ - 1)],
                "assigning variable deltaM", stan::model::index_uni(sym3__),
                                               stan::model::index_uni(sym2__),
                                               stan::model::index_uni(sym1__));
              current_statement__ = 122;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 123;
      stan::math::validate_non_negative_index("TotalS", "N", N);
      current_statement__ = 124;
      stan::math::validate_non_negative_index("TotalS", "W", W);
      current_statement__ = 125;
      stan::math::validate_non_negative_index("TotalS", "Tr_max_nc",
                                              Tr_max_nc);
      current_statement__ = 126;
      context__.validate_dims("data initialization","TotalS","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_nc)});
      TotalS = 
        std::vector<std::vector<std::vector<double>>>(N, 
          std::vector<std::vector<double>>(W, 
            std::vector<double>(Tr_max_nc, 
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> TotalS_flat__;
        current_statement__ = 126;
        TotalS_flat__ = context__.vals_r("TotalS");
        current_statement__ = 126;
        pos__ = 1;
        current_statement__ = 126;
        for (int sym1__ = 1; sym1__ <= Tr_max_nc; ++sym1__) {
          current_statement__ = 126;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 126;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 126;
              stan::model::assign(TotalS, TotalS_flat__[(pos__ - 1)],
                "assigning variable TotalS", stan::model::index_uni(sym3__),
                                               stan::model::index_uni(sym2__),
                                               stan::model::index_uni(sym1__));
              current_statement__ = 126;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 127;
      stan::math::validate_non_negative_index("choice_nc", "N", N);
      current_statement__ = 128;
      stan::math::validate_non_negative_index("choice_nc", "W", W);
      current_statement__ = 129;
      stan::math::validate_non_negative_index("choice_nc", "Tr_max_nc",
                                              Tr_max_nc);
      current_statement__ = 130;
      context__.validate_dims("data initialization","choice_nc","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_nc)});
      choice_nc = 
        std::vector<std::vector<std::vector<int>>>(N, 
          std::vector<std::vector<int>>(W, 
            std::vector<int>(Tr_max_nc, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> choice_nc_flat__;
        current_statement__ = 130;
        choice_nc_flat__ = context__.vals_i("choice_nc");
        current_statement__ = 130;
        pos__ = 1;
        current_statement__ = 130;
        for (int sym1__ = 1; sym1__ <= Tr_max_nc; ++sym1__) {
          current_statement__ = 130;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 130;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 130;
              stan::model::assign(choice_nc, choice_nc_flat__[(pos__ - 1)],
                "assigning variable choice_nc", stan::model::index_uni(sym3__),
                                                  stan::model::index_uni(sym2__),
                                                  stan::model::index_uni(sym1__));
              current_statement__ = 130;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 131;
      context__.validate_dims("data initialization","P_gng","int",
           std::vector<size_t>{});
      P_gng = std::numeric_limits<int>::min();
      
      
      current_statement__ = 131;
      P_gng = context__.vals_i("P_gng")[(1 - 1)];
      current_statement__ = 132;
      stan::math::validate_non_negative_index("idx_gng_obs", "N", N);
      current_statement__ = 133;
      stan::math::validate_non_negative_index("idx_gng_obs", "W", W);
      current_statement__ = 134;
      context__.validate_dims("data initialization","idx_gng_obs","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W)});
      idx_gng_obs = 
        std::vector<std::vector<int>>(N, 
          std::vector<int>(W, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> idx_gng_obs_flat__;
        current_statement__ = 134;
        idx_gng_obs_flat__ = context__.vals_i("idx_gng_obs");
        current_statement__ = 134;
        pos__ = 1;
        current_statement__ = 134;
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          current_statement__ = 134;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 134;
            stan::model::assign(idx_gng_obs, idx_gng_obs_flat__[(pos__ - 1)],
              "assigning variable idx_gng_obs", stan::model::index_uni(sym2__),
                                                  stan::model::index_uni(sym1__));
            current_statement__ = 134;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 134;
      stan::math::check_greater_or_equal(function__, "idx_gng_obs",
                                            idx_gng_obs, 0);
      current_statement__ = 135;
      context__.validate_dims("data initialization","Bl","int",
           std::vector<size_t>{});
      Bl = std::numeric_limits<int>::min();
      
      
      current_statement__ = 135;
      Bl = context__.vals_i("Bl")[(1 - 1)];
      current_statement__ = 135;
      stan::math::check_greater_or_equal(function__, "Bl", Bl, 0);
      current_statement__ = 136;
      context__.validate_dims("data initialization","Tr_max_gng","int",
           std::vector<size_t>{});
      Tr_max_gng = std::numeric_limits<int>::min();
      
      
      current_statement__ = 136;
      Tr_max_gng = context__.vals_i("Tr_max_gng")[(1 - 1)];
      current_statement__ = 136;
      stan::math::check_greater_or_equal(function__, "Tr_max_gng",
                                            Tr_max_gng, 1);
      current_statement__ = 137;
      stan::math::validate_non_negative_index("Tr_gng", "N", N);
      current_statement__ = 138;
      stan::math::validate_non_negative_index("Tr_gng", "W", W);
      current_statement__ = 139;
      stan::math::validate_non_negative_index("Tr_gng", "Bl", Bl);
      current_statement__ = 140;
      context__.validate_dims("data initialization","Tr_gng","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Bl)});
      Tr_gng = 
        std::vector<std::vector<std::vector<int>>>(N, 
          std::vector<std::vector<int>>(W, 
            std::vector<int>(Bl, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> Tr_gng_flat__;
        current_statement__ = 140;
        Tr_gng_flat__ = context__.vals_i("Tr_gng");
        current_statement__ = 140;
        pos__ = 1;
        current_statement__ = 140;
        for (int sym1__ = 1; sym1__ <= Bl; ++sym1__) {
          current_statement__ = 140;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 140;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 140;
              stan::model::assign(Tr_gng, Tr_gng_flat__[(pos__ - 1)],
                "assigning variable Tr_gng", stan::model::index_uni(sym3__),
                                               stan::model::index_uni(sym2__),
                                               stan::model::index_uni(sym1__));
              current_statement__ = 140;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 140;
      stan::math::check_greater_or_equal(function__, "Tr_gng", Tr_gng, 0);
      current_statement__ = 140;
      stan::math::check_less_or_equal(function__, "Tr_gng", Tr_gng,
                                         Tr_max_gng);
      current_statement__ = 141;
      stan::math::validate_non_negative_index("cue_gng", "N", N);
      current_statement__ = 142;
      stan::math::validate_non_negative_index("cue_gng", "W", W);
      current_statement__ = 143;
      stan::math::validate_non_negative_index("cue_gng", "Bl", Bl);
      current_statement__ = 144;
      stan::math::validate_non_negative_index("cue_gng", "Tr_max_gng",
                                              Tr_max_gng);
      current_statement__ = 145;
      context__.validate_dims("data initialization","cue_gng","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Bl),
            static_cast<size_t>(Tr_max_gng)});
      cue_gng = 
        std::vector<std::vector<std::vector<std::vector<int>>>>(N, 
          std::vector<std::vector<std::vector<int>>>(W, 
            std::vector<std::vector<int>>(Bl, 
              std::vector<int>(Tr_max_gng, std::numeric_limits<int>::min()))));
      
      
      {
        std::vector<int> cue_gng_flat__;
        current_statement__ = 145;
        cue_gng_flat__ = context__.vals_i("cue_gng");
        current_statement__ = 145;
        pos__ = 1;
        current_statement__ = 145;
        for (int sym1__ = 1; sym1__ <= Tr_max_gng; ++sym1__) {
          current_statement__ = 145;
          for (int sym2__ = 1; sym2__ <= Bl; ++sym2__) {
            current_statement__ = 145;
            for (int sym3__ = 1; sym3__ <= W; ++sym3__) {
              current_statement__ = 145;
              for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                current_statement__ = 145;
                stan::model::assign(cue_gng, cue_gng_flat__[(pos__ - 1)],
                  "assigning variable cue_gng", stan::model::index_uni(sym4__),
                                                  stan::model::index_uni(sym3__),
                                                  stan::model::index_uni(sym2__),
                                                  stan::model::index_uni(sym1__));
                current_statement__ = 145;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      current_statement__ = 145;
      stan::math::check_greater_or_equal(function__, "cue_gng", cue_gng, 0);
      current_statement__ = 145;
      stan::math::check_less_or_equal(function__, "cue_gng", cue_gng, 4);
      current_statement__ = 146;
      stan::math::validate_non_negative_index("pressed_gng", "N", N);
      current_statement__ = 147;
      stan::math::validate_non_negative_index("pressed_gng", "W", W);
      current_statement__ = 148;
      stan::math::validate_non_negative_index("pressed_gng", "Bl", Bl);
      current_statement__ = 149;
      stan::math::validate_non_negative_index("pressed_gng", "Tr_max_gng",
                                              Tr_max_gng);
      current_statement__ = 150;
      context__.validate_dims("data initialization","pressed_gng","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Bl),
            static_cast<size_t>(Tr_max_gng)});
      pressed_gng = 
        std::vector<std::vector<std::vector<std::vector<int>>>>(N, 
          std::vector<std::vector<std::vector<int>>>(W, 
            std::vector<std::vector<int>>(Bl, 
              std::vector<int>(Tr_max_gng, std::numeric_limits<int>::min()))));
      
      
      {
        std::vector<int> pressed_gng_flat__;
        current_statement__ = 150;
        pressed_gng_flat__ = context__.vals_i("pressed_gng");
        current_statement__ = 150;
        pos__ = 1;
        current_statement__ = 150;
        for (int sym1__ = 1; sym1__ <= Tr_max_gng; ++sym1__) {
          current_statement__ = 150;
          for (int sym2__ = 1; sym2__ <= Bl; ++sym2__) {
            current_statement__ = 150;
            for (int sym3__ = 1; sym3__ <= W; ++sym3__) {
              current_statement__ = 150;
              for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                current_statement__ = 150;
                stan::model::assign(pressed_gng,
                  pressed_gng_flat__[(pos__ - 1)],
                  "assigning variable pressed_gng", stan::model::index_uni(sym4__),
                                                      stan::model::index_uni(sym3__),
                                                      stan::model::index_uni(sym2__),
                                                      stan::model::index_uni(sym1__));
                current_statement__ = 150;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      current_statement__ = 150;
      stan::math::check_greater_or_equal(function__, "pressed_gng",
                                            pressed_gng, -1);
      current_statement__ = 150;
      stan::math::check_less_or_equal(function__, "pressed_gng", pressed_gng,
                                         1);
      current_statement__ = 151;
      stan::math::validate_non_negative_index("outcome_gng", "N", N);
      current_statement__ = 152;
      stan::math::validate_non_negative_index("outcome_gng", "W", W);
      current_statement__ = 153;
      stan::math::validate_non_negative_index("outcome_gng", "Bl", Bl);
      current_statement__ = 154;
      stan::math::validate_non_negative_index("outcome_gng", "Tr_max_gng",
                                              Tr_max_gng);
      current_statement__ = 155;
      context__.validate_dims("data initialization","outcome_gng","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Bl),
            static_cast<size_t>(Tr_max_gng)});
      outcome_gng = 
        std::vector<std::vector<std::vector<std::vector<double>>>>(N, 
          std::vector<std::vector<std::vector<double>>>(W, 
            std::vector<std::vector<double>>(Bl, 
              std::vector<double>(Tr_max_gng, 
                std::numeric_limits<double>::quiet_NaN()))));
      
      
      {
        std::vector<local_scalar_t__> outcome_gng_flat__;
        current_statement__ = 155;
        outcome_gng_flat__ = context__.vals_r("outcome_gng");
        current_statement__ = 155;
        pos__ = 1;
        current_statement__ = 155;
        for (int sym1__ = 1; sym1__ <= Tr_max_gng; ++sym1__) {
          current_statement__ = 155;
          for (int sym2__ = 1; sym2__ <= Bl; ++sym2__) {
            current_statement__ = 155;
            for (int sym3__ = 1; sym3__ <= W; ++sym3__) {
              current_statement__ = 155;
              for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                current_statement__ = 155;
                stan::model::assign(outcome_gng,
                  outcome_gng_flat__[(pos__ - 1)],
                  "assigning variable outcome_gng", stan::model::index_uni(sym4__),
                                                      stan::model::index_uni(sym3__),
                                                      stan::model::index_uni(sym2__),
                                                      stan::model::index_uni(sym1__));
                current_statement__ = 155;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      current_statement__ = 156;
      context__.validate_dims("data initialization","P_lt","int",
           std::vector<size_t>{});
      P_lt = std::numeric_limits<int>::min();
      
      
      current_statement__ = 156;
      P_lt = context__.vals_i("P_lt")[(1 - 1)];
      current_statement__ = 157;
      stan::math::validate_non_negative_index("idx_lt_obs", "N", N);
      current_statement__ = 158;
      stan::math::validate_non_negative_index("idx_lt_obs", "W", W);
      current_statement__ = 159;
      context__.validate_dims("data initialization","idx_lt_obs","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W)});
      idx_lt_obs = 
        std::vector<std::vector<int>>(N, 
          std::vector<int>(W, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> idx_lt_obs_flat__;
        current_statement__ = 159;
        idx_lt_obs_flat__ = context__.vals_i("idx_lt_obs");
        current_statement__ = 159;
        pos__ = 1;
        current_statement__ = 159;
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          current_statement__ = 159;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 159;
            stan::model::assign(idx_lt_obs, idx_lt_obs_flat__[(pos__ - 1)],
              "assigning variable idx_lt_obs", stan::model::index_uni(sym2__),
                                                 stan::model::index_uni(sym1__));
            current_statement__ = 159;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 159;
      stan::math::check_greater_or_equal(function__, "idx_lt_obs",
                                            idx_lt_obs, 0);
      current_statement__ = 160;
      context__.validate_dims("data initialization","Tr_max_lt","int",
           std::vector<size_t>{});
      Tr_max_lt = std::numeric_limits<int>::min();
      
      
      current_statement__ = 160;
      Tr_max_lt = context__.vals_i("Tr_max_lt")[(1 - 1)];
      current_statement__ = 160;
      stan::math::check_greater_or_equal(function__, "Tr_max_lt", Tr_max_lt,
                                            0);
      current_statement__ = 161;
      stan::math::validate_non_negative_index("Tr_lt", "N", N);
      current_statement__ = 162;
      stan::math::validate_non_negative_index("Tr_lt", "W", W);
      current_statement__ = 163;
      context__.validate_dims("data initialization","Tr_lt","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W)});
      Tr_lt = 
        std::vector<std::vector<int>>(N, 
          std::vector<int>(W, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> Tr_lt_flat__;
        current_statement__ = 163;
        Tr_lt_flat__ = context__.vals_i("Tr_lt");
        current_statement__ = 163;
        pos__ = 1;
        current_statement__ = 163;
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          current_statement__ = 163;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 163;
            stan::model::assign(Tr_lt, Tr_lt_flat__[(pos__ - 1)],
              "assigning variable Tr_lt", stan::model::index_uni(sym2__),
                                            stan::model::index_uni(sym1__));
            current_statement__ = 163;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 163;
      stan::math::check_greater_or_equal(function__, "Tr_lt", Tr_lt, 0);
      current_statement__ = 164;
      stan::math::validate_non_negative_index("hi_p_lt", "N", N);
      current_statement__ = 165;
      stan::math::validate_non_negative_index("hi_p_lt", "W", W);
      current_statement__ = 166;
      stan::math::validate_non_negative_index("hi_p_lt", "Tr_max_lt",
                                              Tr_max_lt);
      current_statement__ = 167;
      context__.validate_dims("data initialization","hi_p_lt","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_lt)});
      hi_p_lt = 
        std::vector<std::vector<std::vector<double>>>(N, 
          std::vector<std::vector<double>>(W, 
            std::vector<double>(Tr_max_lt, 
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> hi_p_lt_flat__;
        current_statement__ = 167;
        hi_p_lt_flat__ = context__.vals_r("hi_p_lt");
        current_statement__ = 167;
        pos__ = 1;
        current_statement__ = 167;
        for (int sym1__ = 1; sym1__ <= Tr_max_lt; ++sym1__) {
          current_statement__ = 167;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 167;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 167;
              stan::model::assign(hi_p_lt, hi_p_lt_flat__[(pos__ - 1)],
                "assigning variable hi_p_lt", stan::model::index_uni(sym3__),
                                                stan::model::index_uni(sym2__),
                                                stan::model::index_uni(sym1__));
              current_statement__ = 167;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 167;
      stan::math::check_greater_or_equal(function__, "hi_p_lt", hi_p_lt, 0);
      current_statement__ = 168;
      stan::math::validate_non_negative_index("hi_narr_lt", "N", N);
      current_statement__ = 169;
      stan::math::validate_non_negative_index("hi_narr_lt", "W", W);
      current_statement__ = 170;
      stan::math::validate_non_negative_index("hi_narr_lt", "Tr_max_lt",
                                              Tr_max_lt);
      current_statement__ = 171;
      context__.validate_dims("data initialization","hi_narr_lt","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_lt)});
      hi_narr_lt = 
        std::vector<std::vector<std::vector<double>>>(N, 
          std::vector<std::vector<double>>(W, 
            std::vector<double>(Tr_max_lt, 
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> hi_narr_lt_flat__;
        current_statement__ = 171;
        hi_narr_lt_flat__ = context__.vals_r("hi_narr_lt");
        current_statement__ = 171;
        pos__ = 1;
        current_statement__ = 171;
        for (int sym1__ = 1; sym1__ <= Tr_max_lt; ++sym1__) {
          current_statement__ = 171;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 171;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 171;
              stan::model::assign(hi_narr_lt, hi_narr_lt_flat__[(pos__ - 1)],
                "assigning variable hi_narr_lt", stan::model::index_uni(sym3__),
                                                   stan::model::index_uni(sym2__),
                                                   stan::model::index_uni(sym1__));
              current_statement__ = 171;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 171;
      stan::math::check_greater_or_equal(function__, "hi_narr_lt",
                                            hi_narr_lt, 0);
      current_statement__ = 172;
      stan::math::validate_non_negative_index("lo_narr_lt", "N", N);
      current_statement__ = 173;
      stan::math::validate_non_negative_index("lo_narr_lt", "W", W);
      current_statement__ = 174;
      stan::math::validate_non_negative_index("lo_narr_lt", "Tr_max_lt",
                                              Tr_max_lt);
      current_statement__ = 175;
      context__.validate_dims("data initialization","lo_narr_lt","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_lt)});
      lo_narr_lt = 
        std::vector<std::vector<std::vector<double>>>(N, 
          std::vector<std::vector<double>>(W, 
            std::vector<double>(Tr_max_lt, 
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> lo_narr_lt_flat__;
        current_statement__ = 175;
        lo_narr_lt_flat__ = context__.vals_r("lo_narr_lt");
        current_statement__ = 175;
        pos__ = 1;
        current_statement__ = 175;
        for (int sym1__ = 1; sym1__ <= Tr_max_lt; ++sym1__) {
          current_statement__ = 175;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 175;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 175;
              stan::model::assign(lo_narr_lt, lo_narr_lt_flat__[(pos__ - 1)],
                "assigning variable lo_narr_lt", stan::model::index_uni(sym3__),
                                                   stan::model::index_uni(sym2__),
                                                   stan::model::index_uni(sym1__));
              current_statement__ = 175;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 175;
      stan::math::check_greater_or_equal(function__, "lo_narr_lt",
                                            lo_narr_lt, 0);
      current_statement__ = 176;
      stan::math::validate_non_negative_index("hi_wide_lt", "N", N);
      current_statement__ = 177;
      stan::math::validate_non_negative_index("hi_wide_lt", "W", W);
      current_statement__ = 178;
      stan::math::validate_non_negative_index("hi_wide_lt", "Tr_max_lt",
                                              Tr_max_lt);
      current_statement__ = 179;
      context__.validate_dims("data initialization","hi_wide_lt","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_lt)});
      hi_wide_lt = 
        std::vector<std::vector<std::vector<double>>>(N, 
          std::vector<std::vector<double>>(W, 
            std::vector<double>(Tr_max_lt, 
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> hi_wide_lt_flat__;
        current_statement__ = 179;
        hi_wide_lt_flat__ = context__.vals_r("hi_wide_lt");
        current_statement__ = 179;
        pos__ = 1;
        current_statement__ = 179;
        for (int sym1__ = 1; sym1__ <= Tr_max_lt; ++sym1__) {
          current_statement__ = 179;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 179;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 179;
              stan::model::assign(hi_wide_lt, hi_wide_lt_flat__[(pos__ - 1)],
                "assigning variable hi_wide_lt", stan::model::index_uni(sym3__),
                                                   stan::model::index_uni(sym2__),
                                                   stan::model::index_uni(sym1__));
              current_statement__ = 179;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 179;
      stan::math::check_greater_or_equal(function__, "hi_wide_lt",
                                            hi_wide_lt, 0);
      current_statement__ = 180;
      stan::math::validate_non_negative_index("lo_wide_lt", "N", N);
      current_statement__ = 181;
      stan::math::validate_non_negative_index("lo_wide_lt", "W", W);
      current_statement__ = 182;
      stan::math::validate_non_negative_index("lo_wide_lt", "Tr_max_lt",
                                              Tr_max_lt);
      current_statement__ = 183;
      context__.validate_dims("data initialization","lo_wide_lt","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_lt)});
      lo_wide_lt = 
        std::vector<std::vector<std::vector<double>>>(N, 
          std::vector<std::vector<double>>(W, 
            std::vector<double>(Tr_max_lt, 
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> lo_wide_lt_flat__;
        current_statement__ = 183;
        lo_wide_lt_flat__ = context__.vals_r("lo_wide_lt");
        current_statement__ = 183;
        pos__ = 1;
        current_statement__ = 183;
        for (int sym1__ = 1; sym1__ <= Tr_max_lt; ++sym1__) {
          current_statement__ = 183;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 183;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 183;
              stan::model::assign(lo_wide_lt, lo_wide_lt_flat__[(pos__ - 1)],
                "assigning variable lo_wide_lt", stan::model::index_uni(sym3__),
                                                   stan::model::index_uni(sym2__),
                                                   stan::model::index_uni(sym1__));
              current_statement__ = 183;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 183;
      stan::math::check_greater_or_equal(function__, "lo_wide_lt",
                                            lo_wide_lt, 0);
      current_statement__ = 184;
      stan::math::validate_non_negative_index("choice_lt", "N", N);
      current_statement__ = 185;
      stan::math::validate_non_negative_index("choice_lt", "W", W);
      current_statement__ = 186;
      stan::math::validate_non_negative_index("choice_lt", "Tr_max_lt",
                                              Tr_max_lt);
      current_statement__ = 187;
      context__.validate_dims("data initialization","choice_lt","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_lt)});
      choice_lt = 
        std::vector<std::vector<std::vector<int>>>(N, 
          std::vector<std::vector<int>>(W, 
            std::vector<int>(Tr_max_lt, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> choice_lt_flat__;
        current_statement__ = 187;
        choice_lt_flat__ = context__.vals_i("choice_lt");
        current_statement__ = 187;
        pos__ = 1;
        current_statement__ = 187;
        for (int sym1__ = 1; sym1__ <= Tr_max_lt; ++sym1__) {
          current_statement__ = 187;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 187;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 187;
              stan::model::assign(choice_lt, choice_lt_flat__[(pos__ - 1)],
                "assigning variable choice_lt", stan::model::index_uni(sym3__),
                                                  stan::model::index_uni(sym2__),
                                                  stan::model::index_uni(sym1__));
              current_statement__ = 187;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 187;
      stan::math::check_greater_or_equal(function__, "choice_lt", choice_lt,
                                            -1);
      current_statement__ = 187;
      stan::math::check_less_or_equal(function__, "choice_lt", choice_lt, 1);
      current_statement__ = 188;
      context__.validate_dims("data initialization","P_cd","int",
           std::vector<size_t>{});
      P_cd = std::numeric_limits<int>::min();
      
      
      current_statement__ = 188;
      P_cd = context__.vals_i("P_cd")[(1 - 1)];
      current_statement__ = 189;
      stan::math::validate_non_negative_index("idx_cd_obs", "N", N);
      current_statement__ = 190;
      stan::math::validate_non_negative_index("idx_cd_obs", "W", W);
      current_statement__ = 191;
      context__.validate_dims("data initialization","idx_cd_obs","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W)});
      idx_cd_obs = 
        std::vector<std::vector<int>>(N, 
          std::vector<int>(W, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> idx_cd_obs_flat__;
        current_statement__ = 191;
        idx_cd_obs_flat__ = context__.vals_i("idx_cd_obs");
        current_statement__ = 191;
        pos__ = 1;
        current_statement__ = 191;
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          current_statement__ = 191;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 191;
            stan::model::assign(idx_cd_obs, idx_cd_obs_flat__[(pos__ - 1)],
              "assigning variable idx_cd_obs", stan::model::index_uni(sym2__),
                                                 stan::model::index_uni(sym1__));
            current_statement__ = 191;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 191;
      stan::math::check_greater_or_equal(function__, "idx_cd_obs",
                                            idx_cd_obs, 0);
      current_statement__ = 192;
      context__.validate_dims("data initialization","Tr_max_cd","int",
           std::vector<size_t>{});
      Tr_max_cd = std::numeric_limits<int>::min();
      
      
      current_statement__ = 192;
      Tr_max_cd = context__.vals_i("Tr_max_cd")[(1 - 1)];
      current_statement__ = 192;
      stan::math::check_greater_or_equal(function__, "Tr_max_cd", Tr_max_cd,
                                            0);
      current_statement__ = 193;
      stan::math::validate_non_negative_index("Tr_cd", "N", N);
      current_statement__ = 194;
      stan::math::validate_non_negative_index("Tr_cd", "W", W);
      current_statement__ = 195;
      context__.validate_dims("data initialization","Tr_cd","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W)});
      Tr_cd = 
        std::vector<std::vector<int>>(N, 
          std::vector<int>(W, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> Tr_cd_flat__;
        current_statement__ = 195;
        Tr_cd_flat__ = context__.vals_i("Tr_cd");
        current_statement__ = 195;
        pos__ = 1;
        current_statement__ = 195;
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          current_statement__ = 195;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 195;
            stan::model::assign(Tr_cd, Tr_cd_flat__[(pos__ - 1)],
              "assigning variable Tr_cd", stan::model::index_uni(sym2__),
                                            stan::model::index_uni(sym1__));
            current_statement__ = 195;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 195;
      stan::math::check_greater_or_equal(function__, "Tr_cd", Tr_cd, 0);
      current_statement__ = 196;
      stan::math::validate_non_negative_index("Nb_cd", "N", N);
      current_statement__ = 197;
      stan::math::validate_non_negative_index("Nb_cd", "W", W);
      current_statement__ = 198;
      stan::math::validate_non_negative_index("Nb_cd", "Tr_max_cd", Tr_max_cd);
      current_statement__ = 199;
      context__.validate_dims("data initialization","Nb_cd","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_cd)});
      Nb_cd = 
        std::vector<std::vector<std::vector<int>>>(N, 
          std::vector<std::vector<int>>(W, 
            std::vector<int>(Tr_max_cd, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> Nb_cd_flat__;
        current_statement__ = 199;
        Nb_cd_flat__ = context__.vals_i("Nb_cd");
        current_statement__ = 199;
        pos__ = 1;
        current_statement__ = 199;
        for (int sym1__ = 1; sym1__ <= Tr_max_cd; ++sym1__) {
          current_statement__ = 199;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 199;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 199;
              stan::model::assign(Nb_cd, Nb_cd_flat__[(pos__ - 1)],
                "assigning variable Nb_cd", stan::model::index_uni(sym3__),
                                              stan::model::index_uni(sym2__),
                                              stan::model::index_uni(sym1__));
              current_statement__ = 199;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 199;
      stan::math::check_greater_or_equal(function__, "Nb_cd", Nb_cd, 0);
      current_statement__ = 200;
      stan::math::validate_non_negative_index("Tar_cd", "N", N);
      current_statement__ = 201;
      stan::math::validate_non_negative_index("Tar_cd", "W", W);
      current_statement__ = 202;
      stan::math::validate_non_negative_index("Tar_cd", "Tr_max_cd",
                                              Tr_max_cd);
      current_statement__ = 203;
      context__.validate_dims("data initialization","Tar_cd","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_cd)});
      Tar_cd = 
        std::vector<std::vector<std::vector<int>>>(N, 
          std::vector<std::vector<int>>(W, 
            std::vector<int>(Tr_max_cd, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> Tar_cd_flat__;
        current_statement__ = 203;
        Tar_cd_flat__ = context__.vals_i("Tar_cd");
        current_statement__ = 203;
        pos__ = 1;
        current_statement__ = 203;
        for (int sym1__ = 1; sym1__ <= Tr_max_cd; ++sym1__) {
          current_statement__ = 203;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 203;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 203;
              stan::model::assign(Tar_cd, Tar_cd_flat__[(pos__ - 1)],
                "assigning variable Tar_cd", stan::model::index_uni(sym3__),
                                               stan::model::index_uni(sym2__),
                                               stan::model::index_uni(sym1__));
              current_statement__ = 203;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 203;
      stan::math::check_greater_or_equal(function__, "Tar_cd", Tar_cd, 0);
      current_statement__ = 204;
      stan::math::validate_non_negative_index("delta_cd", "N", N);
      current_statement__ = 205;
      stan::math::validate_non_negative_index("delta_cd", "W", W);
      current_statement__ = 206;
      stan::math::validate_non_negative_index("delta_cd", "Tr_max_cd",
                                              Tr_max_cd);
      current_statement__ = 207;
      context__.validate_dims("data initialization","delta_cd","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_cd)});
      delta_cd = 
        std::vector<std::vector<std::vector<double>>>(N, 
          std::vector<std::vector<double>>(W, 
            std::vector<double>(Tr_max_cd, 
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> delta_cd_flat__;
        current_statement__ = 207;
        delta_cd_flat__ = context__.vals_r("delta_cd");
        current_statement__ = 207;
        pos__ = 1;
        current_statement__ = 207;
        for (int sym1__ = 1; sym1__ <= Tr_max_cd; ++sym1__) {
          current_statement__ = 207;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 207;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 207;
              stan::model::assign(delta_cd, delta_cd_flat__[(pos__ - 1)],
                "assigning variable delta_cd", stan::model::index_uni(sym3__),
                                                 stan::model::index_uni(sym2__),
                                                 stan::model::index_uni(sym1__));
              current_statement__ = 207;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 207;
      stan::math::check_greater_or_equal(function__, "delta_cd", delta_cd, 0);
      current_statement__ = 208;
      stan::math::validate_non_negative_index("choice_cd", "N", N);
      current_statement__ = 209;
      stan::math::validate_non_negative_index("choice_cd", "W", W);
      current_statement__ = 210;
      stan::math::validate_non_negative_index("choice_cd", "Tr_max_cd",
                                              Tr_max_cd);
      current_statement__ = 211;
      context__.validate_dims("data initialization","choice_cd","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_cd)});
      choice_cd = 
        std::vector<std::vector<std::vector<int>>>(N, 
          std::vector<std::vector<int>>(W, 
            std::vector<int>(Tr_max_cd, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> choice_cd_flat__;
        current_statement__ = 211;
        choice_cd_flat__ = context__.vals_i("choice_cd");
        current_statement__ = 211;
        pos__ = 1;
        current_statement__ = 211;
        for (int sym1__ = 1; sym1__ <= Tr_max_cd; ++sym1__) {
          current_statement__ = 211;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 211;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 211;
              stan::model::assign(choice_cd, choice_cd_flat__[(pos__ - 1)],
                "assigning variable choice_cd", stan::model::index_uni(sym3__),
                                                  stan::model::index_uni(sym2__),
                                                  stan::model::index_uni(sym1__));
              current_statement__ = 211;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 212;
      context__.validate_dims("data initialization","P_rdm","int",
           std::vector<size_t>{});
      P_rdm = std::numeric_limits<int>::min();
      
      
      current_statement__ = 212;
      P_rdm = context__.vals_i("P_rdm")[(1 - 1)];
      current_statement__ = 213;
      stan::math::validate_non_negative_index("idx_rdm_obs", "N", N);
      current_statement__ = 214;
      stan::math::validate_non_negative_index("idx_rdm_obs", "W", W);
      current_statement__ = 215;
      context__.validate_dims("data initialization","idx_rdm_obs","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W)});
      idx_rdm_obs = 
        std::vector<std::vector<int>>(N, 
          std::vector<int>(W, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> idx_rdm_obs_flat__;
        current_statement__ = 215;
        idx_rdm_obs_flat__ = context__.vals_i("idx_rdm_obs");
        current_statement__ = 215;
        pos__ = 1;
        current_statement__ = 215;
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          current_statement__ = 215;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 215;
            stan::model::assign(idx_rdm_obs, idx_rdm_obs_flat__[(pos__ - 1)],
              "assigning variable idx_rdm_obs", stan::model::index_uni(sym2__),
                                                  stan::model::index_uni(sym1__));
            current_statement__ = 215;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 215;
      stan::math::check_greater_or_equal(function__, "idx_rdm_obs",
                                            idx_rdm_obs, 0);
      current_statement__ = 216;
      context__.validate_dims("data initialization","Nu_max_rdm","int",
           std::vector<size_t>{});
      Nu_max_rdm = std::numeric_limits<int>::min();
      
      
      current_statement__ = 216;
      Nu_max_rdm = context__.vals_i("Nu_max_rdm")[(1 - 1)];
      current_statement__ = 216;
      stan::math::check_greater_or_equal(function__, "Nu_max_rdm",
                                            Nu_max_rdm, 0);
      current_statement__ = 217;
      context__.validate_dims("data initialization","Nl_max_rdm","int",
           std::vector<size_t>{});
      Nl_max_rdm = std::numeric_limits<int>::min();
      
      
      current_statement__ = 217;
      Nl_max_rdm = context__.vals_i("Nl_max_rdm")[(1 - 1)];
      current_statement__ = 217;
      stan::math::check_greater_or_equal(function__, "Nl_max_rdm",
                                            Nl_max_rdm, 0);
      current_statement__ = 218;
      stan::math::validate_non_negative_index("Nu_rdm", "N", N);
      current_statement__ = 219;
      stan::math::validate_non_negative_index("Nu_rdm", "W", W);
      current_statement__ = 220;
      context__.validate_dims("data initialization","Nu_rdm","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W)});
      Nu_rdm = 
        std::vector<std::vector<int>>(N, 
          std::vector<int>(W, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> Nu_rdm_flat__;
        current_statement__ = 220;
        Nu_rdm_flat__ = context__.vals_i("Nu_rdm");
        current_statement__ = 220;
        pos__ = 1;
        current_statement__ = 220;
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          current_statement__ = 220;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 220;
            stan::model::assign(Nu_rdm, Nu_rdm_flat__[(pos__ - 1)],
              "assigning variable Nu_rdm", stan::model::index_uni(sym2__),
                                             stan::model::index_uni(sym1__));
            current_statement__ = 220;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 220;
      stan::math::check_greater_or_equal(function__, "Nu_rdm", Nu_rdm, 0);
      current_statement__ = 221;
      stan::math::validate_non_negative_index("Nl_rdm", "N", N);
      current_statement__ = 222;
      stan::math::validate_non_negative_index("Nl_rdm", "W", W);
      current_statement__ = 223;
      context__.validate_dims("data initialization","Nl_rdm","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W)});
      Nl_rdm = 
        std::vector<std::vector<int>>(N, 
          std::vector<int>(W, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> Nl_rdm_flat__;
        current_statement__ = 223;
        Nl_rdm_flat__ = context__.vals_i("Nl_rdm");
        current_statement__ = 223;
        pos__ = 1;
        current_statement__ = 223;
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          current_statement__ = 223;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 223;
            stan::model::assign(Nl_rdm, Nl_rdm_flat__[(pos__ - 1)],
              "assigning variable Nl_rdm", stan::model::index_uni(sym2__),
                                             stan::model::index_uni(sym1__));
            current_statement__ = 223;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 223;
      stan::math::check_greater_or_equal(function__, "Nl_rdm", Nl_rdm, 0);
      current_statement__ = 224;
      stan::math::validate_non_negative_index("RTu_rdm", "N", N);
      current_statement__ = 225;
      stan::math::validate_non_negative_index("RTu_rdm", "W", W);
      current_statement__ = 226;
      stan::math::validate_non_negative_index("RTu_rdm", "Nu_max_rdm",
                                              Nu_max_rdm);
      current_statement__ = 227;
      context__.validate_dims("data initialization","RTu_rdm","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Nu_max_rdm)});
      RTu_rdm = 
        std::vector<std::vector<std::vector<double>>>(N, 
          std::vector<std::vector<double>>(W, 
            std::vector<double>(Nu_max_rdm, 
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> RTu_rdm_flat__;
        current_statement__ = 227;
        RTu_rdm_flat__ = context__.vals_r("RTu_rdm");
        current_statement__ = 227;
        pos__ = 1;
        current_statement__ = 227;
        for (int sym1__ = 1; sym1__ <= Nu_max_rdm; ++sym1__) {
          current_statement__ = 227;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 227;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 227;
              stan::model::assign(RTu_rdm, RTu_rdm_flat__[(pos__ - 1)],
                "assigning variable RTu_rdm", stan::model::index_uni(sym3__),
                                                stan::model::index_uni(sym2__),
                                                stan::model::index_uni(sym1__));
              current_statement__ = 227;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 228;
      stan::math::validate_non_negative_index("RTl_rdm", "N", N);
      current_statement__ = 229;
      stan::math::validate_non_negative_index("RTl_rdm", "W", W);
      current_statement__ = 230;
      stan::math::validate_non_negative_index("RTl_rdm", "Nl_max_rdm",
                                              Nl_max_rdm);
      current_statement__ = 231;
      context__.validate_dims("data initialization","RTl_rdm","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Nl_max_rdm)});
      RTl_rdm = 
        std::vector<std::vector<std::vector<double>>>(N, 
          std::vector<std::vector<double>>(W, 
            std::vector<double>(Nl_max_rdm, 
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> RTl_rdm_flat__;
        current_statement__ = 231;
        RTl_rdm_flat__ = context__.vals_r("RTl_rdm");
        current_statement__ = 231;
        pos__ = 1;
        current_statement__ = 231;
        for (int sym1__ = 1; sym1__ <= Nl_max_rdm; ++sym1__) {
          current_statement__ = 231;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 231;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 231;
              stan::model::assign(RTl_rdm, RTl_rdm_flat__[(pos__ - 1)],
                "assigning variable RTl_rdm", stan::model::index_uni(sym3__),
                                                stan::model::index_uni(sym2__),
                                                stan::model::index_uni(sym1__));
              current_statement__ = 231;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 232;
      stan::math::validate_non_negative_index("Cohu_rdm", "N", N);
      current_statement__ = 233;
      stan::math::validate_non_negative_index("Cohu_rdm", "W", W);
      current_statement__ = 234;
      stan::math::validate_non_negative_index("Cohu_rdm", "Nu_max_rdm",
                                              Nu_max_rdm);
      current_statement__ = 235;
      context__.validate_dims("data initialization","Cohu_rdm","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Nu_max_rdm)});
      Cohu_rdm = 
        std::vector<std::vector<std::vector<double>>>(N, 
          std::vector<std::vector<double>>(W, 
            std::vector<double>(Nu_max_rdm, 
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> Cohu_rdm_flat__;
        current_statement__ = 235;
        Cohu_rdm_flat__ = context__.vals_r("Cohu_rdm");
        current_statement__ = 235;
        pos__ = 1;
        current_statement__ = 235;
        for (int sym1__ = 1; sym1__ <= Nu_max_rdm; ++sym1__) {
          current_statement__ = 235;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 235;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 235;
              stan::model::assign(Cohu_rdm, Cohu_rdm_flat__[(pos__ - 1)],
                "assigning variable Cohu_rdm", stan::model::index_uni(sym3__),
                                                 stan::model::index_uni(sym2__),
                                                 stan::model::index_uni(sym1__));
              current_statement__ = 235;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 236;
      stan::math::validate_non_negative_index("Cohl_rdm", "N", N);
      current_statement__ = 237;
      stan::math::validate_non_negative_index("Cohl_rdm", "W", W);
      current_statement__ = 238;
      stan::math::validate_non_negative_index("Cohl_rdm", "Nl_max_rdm",
                                              Nl_max_rdm);
      current_statement__ = 239;
      context__.validate_dims("data initialization","Cohl_rdm","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Nl_max_rdm)});
      Cohl_rdm = 
        std::vector<std::vector<std::vector<double>>>(N, 
          std::vector<std::vector<double>>(W, 
            std::vector<double>(Nl_max_rdm, 
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> Cohl_rdm_flat__;
        current_statement__ = 239;
        Cohl_rdm_flat__ = context__.vals_r("Cohl_rdm");
        current_statement__ = 239;
        pos__ = 1;
        current_statement__ = 239;
        for (int sym1__ = 1; sym1__ <= Nl_max_rdm; ++sym1__) {
          current_statement__ = 239;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 239;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 239;
              stan::model::assign(Cohl_rdm, Cohl_rdm_flat__[(pos__ - 1)],
                "assigning variable Cohl_rdm", stan::model::index_uni(sym3__),
                                                 stan::model::index_uni(sym2__),
                                                 stan::model::index_uni(sym1__));
              current_statement__ = 239;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 240;
      stan::math::validate_non_negative_index("minRT_rdm", "N", N);
      current_statement__ = 241;
      stan::math::validate_non_negative_index("minRT_rdm", "W", W);
      current_statement__ = 242;
      context__.validate_dims("data initialization","minRT_rdm","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W)});
      minRT_rdm_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(N, W,
          std::numeric_limits<double>::quiet_NaN());
      new (&minRT_rdm) Eigen::Map<Eigen::Matrix<double, -1, -1>>(minRT_rdm_data__.data(), N, W);
        
      
      {
        std::vector<local_scalar_t__> minRT_rdm_flat__;
        current_statement__ = 242;
        minRT_rdm_flat__ = context__.vals_r("minRT_rdm");
        current_statement__ = 242;
        pos__ = 1;
        current_statement__ = 242;
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          current_statement__ = 242;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 242;
            stan::model::assign(minRT_rdm, minRT_rdm_flat__[(pos__ - 1)],
              "assigning variable minRT_rdm", stan::model::index_uni(sym2__),
                                                stan::model::index_uni(sym1__));
            current_statement__ = 242;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 243;
      context__.validate_dims("data initialization","RTbound_rdm","double",
           std::vector<size_t>{});
      RTbound_rdm = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 243;
      RTbound_rdm = context__.vals_r("RTbound_rdm")[(1 - 1)];
      current_statement__ = 244;
      num_par = std::numeric_limits<int>::min();
      
      
      current_statement__ = 244;
      num_par = P_rdm;
      current_statement__ = 245;
      stan::math::validate_non_negative_index("mu_pr", "num_par", num_par);
      current_statement__ = 246;
      stan::math::validate_non_negative_index("mu_pr_sub", "num_par", num_par);
      current_statement__ = 247;
      stan::math::validate_non_negative_index("mu_pr_sub", "N", N);
      current_statement__ = 248;
      stan::math::validate_non_negative_index("sigma_pr", "num_par", num_par);
      current_statement__ = 249;
      stan::math::validate_non_negative_index("sigma_pr_r", "num_par",
                                              num_par);
      current_statement__ = 250;
      stan::math::validate_non_negative_index("alpha_rdm_pr", "N", N);
      current_statement__ = 251;
      stan::math::validate_non_negative_index("alpha_rdm_pr", "W", W);
      current_statement__ = 252;
      stan::math::validate_non_negative_index("delta_rdm_pr", "N", N);
      current_statement__ = 253;
      stan::math::validate_non_negative_index("delta_rdm_pr", "W", W);
      current_statement__ = 254;
      stan::math::validate_non_negative_index("tau_rdm_pr", "N", N);
      current_statement__ = 255;
      stan::math::validate_non_negative_index("tau_rdm_pr", "W", W);
      current_statement__ = 256;
      stan::math::validate_non_negative_index("tau_rdm", "N", N);
      current_statement__ = 257;
      stan::math::validate_non_negative_index("tau_rdm", "W", W);
      current_statement__ = 258;
      stan::math::validate_non_negative_index("alpha_rdm", "N", N);
      current_statement__ = 259;
      stan::math::validate_non_negative_index("alpha_rdm", "W", W);
      current_statement__ = 260;
      stan::math::validate_non_negative_index("delta_rdm", "N", N);
      current_statement__ = 261;
      stan::math::validate_non_negative_index("delta_rdm", "W", W);
      current_statement__ = 262;
      y_pred_all_weeks_rdm_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 262;
      y_pred_all_weeks_rdm_1dim__ = (Nu_max_rdm + Nl_max_rdm);
      current_statement__ = 262;
      stan::math::validate_non_negative_index("y_pred_all_weeks_rdm",
                                              "Nu_max_rdm + Nl_max_rdm",
                                              y_pred_all_weeks_rdm_1dim__);
      current_statement__ = 263;
      stan::math::validate_non_negative_index("y_pred_all_weeks_rdm", "W", W);
      current_statement__ = 264;
      stan::math::validate_non_negative_index("y_pred_all_weeks_rdm", "N", N);
      current_statement__ = 265;
      trial_type_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 265;
      trial_type_1dim__ = (Nu_max_rdm + Nl_max_rdm);
      current_statement__ = 265;
      stan::math::validate_non_negative_index("trial_type",
                                              "Nu_max_rdm + Nl_max_rdm",
                                              trial_type_1dim__);
      current_statement__ = 266;
      stan::math::validate_non_negative_index("trial_type", "W", W);
      current_statement__ = 267;
      stan::math::validate_non_negative_index("trial_type", "N", N);
      current_statement__ = 268;
      stan::math::validate_non_negative_index("log_lik_all_subs", "N", N);
      current_statement__ = 269;
      stan::math::validate_non_negative_index("log_lik_all_subs", "W", W);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = num_par + (num_par * N) + num_par + num_par + (N * W)
       + (N * W) + (N * W);
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "rdm_hierarchical_independent_with_gq_final_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_pr =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(num_par,
           DUMMY_VAR__);
      current_statement__ = 1;
      mu_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                num_par);
      std::vector<std::vector<local_scalar_t__>> mu_pr_sub =
         std::vector<std::vector<local_scalar_t__>>(num_par, 
           std::vector<local_scalar_t__>(N, DUMMY_VAR__));
      current_statement__ = 2;
      mu_pr_sub = in__.template read<
                    std::vector<std::vector<local_scalar_t__>>>(num_par, N);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_pr =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(num_par,
           DUMMY_VAR__);
      current_statement__ = 3;
      sigma_pr = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                   lp__, num_par);
      std::vector<local_scalar_t__> sigma_pr_r =
         std::vector<local_scalar_t__>(num_par, DUMMY_VAR__);
      current_statement__ = 4;
      sigma_pr_r = in__.template read_constrain_lb<
                     std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                     num_par);
      std::vector<std::vector<local_scalar_t__>> alpha_rdm_pr =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      current_statement__ = 5;
      alpha_rdm_pr = in__.template read<
                       std::vector<std::vector<local_scalar_t__>>>(N, W);
      std::vector<std::vector<local_scalar_t__>> delta_rdm_pr =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      current_statement__ = 6;
      delta_rdm_pr = in__.template read<
                       std::vector<std::vector<local_scalar_t__>>>(N, W);
      std::vector<std::vector<local_scalar_t__>> tau_rdm_pr =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      current_statement__ = 7;
      tau_rdm_pr = in__.template read<
                     std::vector<std::vector<local_scalar_t__>>>(N, W);
      std::vector<std::vector<local_scalar_t__>> tau_rdm =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      std::vector<std::vector<local_scalar_t__>> alpha_rdm =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      std::vector<std::vector<local_scalar_t__>> delta_rdm =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      current_statement__ = 18;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 16;
        for (int w = 1; w <= W; ++w) {
          current_statement__ = 11;
          stan::model::assign(tau_rdm,
            ((stan::math::inv_logit(
                (stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
                   stan::model::index_uni(1), stan::model::index_uni(n)) +
                  (stan::model::rvalue(sigma_pr_r, "sigma_pr_r",
                     stan::model::index_uni(1)) *
                    stan::model::rvalue(tau_rdm_pr, "tau_rdm_pr",
                      stan::model::index_uni(n), stan::model::index_uni(w)))))
               *
               ((stan::model::rvalue(minRT_rdm, "minRT_rdm",
                   stan::model::index_uni(n), stan::model::index_uni(w)) -
                  RTbound_rdm) - 0.0001)) + RTbound_rdm),
            "assigning variable tau_rdm", stan::model::index_uni(n),
                                            stan::model::index_uni(w));
          ;
          current_statement__ = 13;
          stan::model::assign(alpha_rdm,
            stan::math::exp(
              (stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
                 stan::model::index_uni(2), stan::model::index_uni(n)) +
                (stan::model::rvalue(sigma_pr_r, "sigma_pr_r",
                   stan::model::index_uni(2)) *
                  stan::model::rvalue(alpha_rdm_pr, "alpha_rdm_pr",
                    stan::model::index_uni(n), stan::model::index_uni(w))))),
            "assigning variable alpha_rdm", stan::model::index_uni(n),
                                              stan::model::index_uni(w));
          current_statement__ = 14;
          stan::model::assign(delta_rdm,
            (stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
               stan::model::index_uni(3), stan::model::index_uni(n)) +
              (stan::model::rvalue(sigma_pr_r, "sigma_pr_r",
                 stan::model::index_uni(3)) *
                stan::model::rvalue(delta_rdm_pr, "delta_rdm_pr",
                  stan::model::index_uni(n), stan::model::index_uni(w)))),
            "assigning variable delta_rdm", stan::model::index_uni(n),
                                              stan::model::index_uni(w));
        }
      }
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "alpha_rdm", alpha_rdm,
                                            0);
      {
        current_statement__ = 54;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::model::rvalue(mu_pr, "mu_pr", stan::model::index_uni(1)),
            0, 1.0));
        current_statement__ = 55;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::model::rvalue(mu_pr, "mu_pr", stan::model::index_uni(2)),
            0, 1.0));
        current_statement__ = 56;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::model::rvalue(mu_pr, "mu_pr", stan::model::index_uni(3)),
            0, 1.0));
        current_statement__ = 57;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_pr, 0, 1));
        current_statement__ = 60;
        for (int p = 1; p <= num_par; ++p) {
          current_statement__ = 58;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::math::to_vector(
                stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
                  stan::model::index_uni(p), stan::model::index_omni())),
              stan::model::rvalue(mu_pr, "mu_pr", stan::model::index_uni(p)),
              stan::model::rvalue(sigma_pr, "sigma_pr",
                stan::model::index_uni(p))));
        }
        current_statement__ = 61;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::math::to_vector(sigma_pr_r), 0, 1));
        current_statement__ = 62;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::math::to_vector(stan::math::to_matrix(tau_rdm_pr)), 0, 1.0));
        current_statement__ = 63;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::math::to_vector(stan::math::to_matrix(alpha_rdm_pr)), 0,
            1.0));
        current_statement__ = 64;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::math::to_vector(stan::math::to_matrix(delta_rdm_pr)), 0,
            1.0));
        current_statement__ = 65;
        lp_accum__.add(
          stan::math::reduce_sum<partial_sum_rsfunctor__>(choice_itc, 1,
            pstream__, RTu_rdm, RTl_rdm, Cohu_rdm, Cohl_rdm, delta_rdm,
            alpha_rdm, tau_rdm, idx_rdm_obs, Nu_rdm, Nl_rdm, W));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "rdm_hierarchical_independent_with_gq_final_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> mu_pr =
         Eigen::Matrix<double, -1, 1>::Constant(num_par,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      mu_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                num_par);
      std::vector<std::vector<double>> mu_pr_sub =
         std::vector<std::vector<double>>(num_par, 
           std::vector<double>(N, std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 2;
      mu_pr_sub = in__.template read<
                    std::vector<std::vector<local_scalar_t__>>>(num_par, N);
      Eigen::Matrix<double, -1, 1> sigma_pr =
         Eigen::Matrix<double, -1, 1>::Constant(num_par,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      sigma_pr = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                   lp__, num_par);
      std::vector<double> sigma_pr_r =
         std::vector<double>(num_par, 
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      sigma_pr_r = in__.template read_constrain_lb<
                     std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                     num_par);
      std::vector<std::vector<double>> alpha_rdm_pr =
         std::vector<std::vector<double>>(N, 
           std::vector<double>(W, std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 5;
      alpha_rdm_pr = in__.template read<
                       std::vector<std::vector<local_scalar_t__>>>(N, W);
      std::vector<std::vector<double>> delta_rdm_pr =
         std::vector<std::vector<double>>(N, 
           std::vector<double>(W, std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 6;
      delta_rdm_pr = in__.template read<
                       std::vector<std::vector<local_scalar_t__>>>(N, W);
      std::vector<std::vector<double>> tau_rdm_pr =
         std::vector<std::vector<double>>(N, 
           std::vector<double>(W, std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 7;
      tau_rdm_pr = in__.template read<
                     std::vector<std::vector<local_scalar_t__>>>(N, W);
      std::vector<std::vector<double>> tau_rdm =
         std::vector<std::vector<double>>(N, 
           std::vector<double>(W, std::numeric_limits<double>::quiet_NaN()));
      std::vector<std::vector<double>> alpha_rdm =
         std::vector<std::vector<double>>(N, 
           std::vector<double>(W, std::numeric_limits<double>::quiet_NaN()));
      std::vector<std::vector<double>> delta_rdm =
         std::vector<std::vector<double>>(N, 
           std::vector<double>(W, std::numeric_limits<double>::quiet_NaN()));
      out__.write(mu_pr);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= num_par; ++sym2__) {
          out__.write(mu_pr_sub[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(sigma_pr);
      out__.write(sigma_pr_r);
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(alpha_rdm_pr[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(delta_rdm_pr[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(tau_rdm_pr[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 18;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 16;
        for (int w = 1; w <= W; ++w) {
          current_statement__ = 11;
          stan::model::assign(tau_rdm,
            ((stan::math::inv_logit(
                (stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
                   stan::model::index_uni(1), stan::model::index_uni(n)) +
                  (stan::model::rvalue(sigma_pr_r, "sigma_pr_r",
                     stan::model::index_uni(1)) *
                    stan::model::rvalue(tau_rdm_pr, "tau_rdm_pr",
                      stan::model::index_uni(n), stan::model::index_uni(w)))))
               *
               ((stan::model::rvalue(minRT_rdm, "minRT_rdm",
                   stan::model::index_uni(n), stan::model::index_uni(w)) -
                  RTbound_rdm) - 0.0001)) + RTbound_rdm),
            "assigning variable tau_rdm", stan::model::index_uni(n),
                                            stan::model::index_uni(w));
          ;
          current_statement__ = 13;
          stan::model::assign(alpha_rdm,
            stan::math::exp(
              (stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
                 stan::model::index_uni(2), stan::model::index_uni(n)) +
                (stan::model::rvalue(sigma_pr_r, "sigma_pr_r",
                   stan::model::index_uni(2)) *
                  stan::model::rvalue(alpha_rdm_pr, "alpha_rdm_pr",
                    stan::model::index_uni(n), stan::model::index_uni(w))))),
            "assigning variable alpha_rdm", stan::model::index_uni(n),
                                              stan::model::index_uni(w));
          current_statement__ = 14;
          stan::model::assign(delta_rdm,
            (stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
               stan::model::index_uni(3), stan::model::index_uni(n)) +
              (stan::model::rvalue(sigma_pr_r, "sigma_pr_r",
                 stan::model::index_uni(3)) *
                stan::model::rvalue(delta_rdm_pr, "delta_rdm_pr",
                  stan::model::index_uni(n), stan::model::index_uni(w)))),
            "assigning variable delta_rdm", stan::model::index_uni(n),
                                              stan::model::index_uni(w));
        }
      }
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "alpha_rdm", alpha_rdm,
                                            0);
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            out__.write(tau_rdm[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            out__.write(alpha_rdm[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            out__.write(delta_rdm[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<std::vector<std::vector<double>>> y_pred_all_weeks_rdm =
         std::vector<std::vector<std::vector<double>>>(
           y_pred_all_weeks_rdm_1dim__, 
           std::vector<std::vector<double>>(W, 
             std::vector<double>(N, std::numeric_limits<double>::quiet_NaN())));
      std::vector<std::vector<std::vector<double>>> trial_type =
         std::vector<std::vector<std::vector<double>>>(trial_type_1dim__, 
           std::vector<std::vector<double>>(W, 
             std::vector<double>(N, std::numeric_limits<double>::quiet_NaN())));
      std::vector<std::vector<double>> log_lik_all_subs =
         std::vector<std::vector<double>>(N, 
           std::vector<double>(W, std::numeric_limits<double>::quiet_NaN()));
      int b = std::numeric_limits<int>::min();
      current_statement__ = 30;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 28;
        for (int w = 1; w <= W; ++w) {
          current_statement__ = 26;
          for (int t = 1; t <= (Nu_max_rdm + Nl_max_rdm); ++t) {
            current_statement__ = 23;
            stan::model::assign(y_pred_all_weeks_rdm, -2,
              "assigning variable y_pred_all_weeks_rdm", stan::model::index_uni(t),
                                                           stan::model::index_uni(w),
                                                           stan::model::index_uni(n));
            current_statement__ = 24;
            stan::model::assign(trial_type, -2,
              "assigning variable trial_type", stan::model::index_uni(t),
                                                 stan::model::index_uni(w),
                                                 stan::model::index_uni(n));
          }
        }
      }
      current_statement__ = 53;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 51;
        for (int w = 1; w <= W; ++w) {
          current_statement__ = 31;
          stan::model::assign(log_lik_all_subs, 0,
            "assigning variable log_lik_all_subs", stan::model::index_uni(n),
                                                     stan::model::index_uni(w));
          current_statement__ = 49;
          if (stan::math::logical_neq(
                stan::model::rvalue(idx_rdm_obs, "idx_rdm_obs",
                  stan::model::index_uni(n), stan::model::index_uni(w)), 0)) {
            current_statement__ = 32;
            stan::math::validate_non_negative_index("delta_cohu",
                                                    "Nu_rdm[n, w]",
                                                    stan::model::rvalue(
                                                      Nu_rdm, "Nu_rdm",
                                                      stan::model::index_uni(n),
                                                        stan::model::index_uni(w)));
            Eigen::Matrix<double, -1, 1> delta_cohu =
               Eigen::Matrix<double, -1, 1>::Constant(
                 stan::model::rvalue(Nu_rdm, "Nu_rdm",
                   stan::model::index_uni(n), stan::model::index_uni(w)),
                 std::numeric_limits<double>::quiet_NaN());
            current_statement__ = 33;
            stan::model::assign(delta_cohu,
              stan::math::multiply(
                stan::model::rvalue(delta_rdm, "delta_rdm",
                  stan::model::index_uni(n), stan::model::index_uni(w)),
                stan::math::to_vector(
                  stan::model::rvalue(Cohu_rdm, "Cohu_rdm",
                    stan::model::index_uni(n), stan::model::index_uni(w),
                      stan::model::index_min_max(1, stan::model::rvalue(
                                                      Nu_rdm, "Nu_rdm",
                                                      stan::model::index_uni(n),
                                                        stan::model::index_uni(w)))))),
              "assigning variable delta_cohu");
            current_statement__ = 34;
            stan::math::validate_non_negative_index("delta_cohl",
                                                    "Nl_rdm[n, w]",
                                                    stan::model::rvalue(
                                                      Nl_rdm, "Nl_rdm",
                                                      stan::model::index_uni(n),
                                                        stan::model::index_uni(w)));
            Eigen::Matrix<double, -1, 1> delta_cohl =
               Eigen::Matrix<double, -1, 1>::Constant(
                 stan::model::rvalue(Nl_rdm, "Nl_rdm",
                   stan::model::index_uni(n), stan::model::index_uni(w)),
                 std::numeric_limits<double>::quiet_NaN());
            current_statement__ = 35;
            stan::model::assign(delta_cohl,
              stan::math::multiply(
                stan::model::rvalue(delta_rdm, "delta_rdm",
                  stan::model::index_uni(n), stan::model::index_uni(w)),
                stan::math::to_vector(
                  stan::model::rvalue(Cohl_rdm, "Cohl_rdm",
                    stan::model::index_uni(n), stan::model::index_uni(w),
                      stan::model::index_min_max(1, stan::model::rvalue(
                                                      Nl_rdm, "Nl_rdm",
                                                      stan::model::index_uni(n),
                                                        stan::model::index_uni(w)))))),
              "assigning variable delta_cohl");
            current_statement__ = 36;
            stan::model::assign(log_lik_all_subs,
              (stan::model::rvalue(log_lik_all_subs, "log_lik_all_subs",
                 stan::model::index_uni(n), stan::model::index_uni(w)) +
                stan::math::wiener_lpdf<false>(
                  stan::model::rvalue(RTu_rdm, "RTu_rdm",
                    stan::model::index_uni(n), stan::model::index_uni(w),
                      stan::model::index_min_max(1, stan::model::rvalue(
                                                      Nu_rdm, "Nu_rdm",
                                                      stan::model::index_uni(n),
                                                        stan::model::index_uni(w)))),
                  stan::model::rvalue(alpha_rdm, "alpha_rdm",
                    stan::model::index_uni(n), stan::model::index_uni(w)),
                  stan::model::rvalue(tau_rdm, "tau_rdm",
                    stan::model::index_uni(n), stan::model::index_uni(w)),
                  0.5, delta_cohu)),
              "assigning variable log_lik_all_subs", stan::model::index_uni(n),
                                                       stan::model::index_uni(w));
            current_statement__ = 37;
            stan::model::assign(log_lik_all_subs,
              (stan::model::rvalue(log_lik_all_subs, "log_lik_all_subs",
                 stan::model::index_uni(n), stan::model::index_uni(w)) +
                stan::math::wiener_lpdf<false>(
                  stan::model::rvalue(RTl_rdm, "RTl_rdm",
                    stan::model::index_uni(n), stan::model::index_uni(w),
                      stan::model::index_min_max(1, stan::model::rvalue(
                                                      Nl_rdm, "Nl_rdm",
                                                      stan::model::index_uni(n),
                                                        stan::model::index_uni(w)))),
                  stan::model::rvalue(alpha_rdm, "alpha_rdm",
                    stan::model::index_uni(n), stan::model::index_uni(w)),
                  stan::model::rvalue(tau_rdm, "tau_rdm",
                    stan::model::index_uni(n), stan::model::index_uni(w)),
                  0.5, stan::math::minus(delta_cohl))),
              "assigning variable log_lik_all_subs", stan::model::index_uni(n),
                                                       stan::model::index_uni(w));
            current_statement__ = 42;
            for (int t = 1;
                 t <= stan::model::rvalue(Nu_rdm, "Nu_rdm",
                        stan::model::index_uni(n), stan::model::index_uni(w));
                 ++t) {
              Eigen::Matrix<double, -1, 1> out =
                 Eigen::Matrix<double, -1, 1>::Constant(2,
                   std::numeric_limits<double>::quiet_NaN());
              current_statement__ = 38;
              stan::model::assign(out,
                wiener_rng(
                  stan::model::rvalue(alpha_rdm, "alpha_rdm",
                    stan::model::index_uni(n), stan::model::index_uni(w)),
                  stan::model::rvalue(tau_rdm, "tau_rdm",
                    stan::model::index_uni(n), stan::model::index_uni(w)),
                  0.5,
                  stan::model::rvalue(delta_cohu, "delta_cohu",
                    stan::model::index_uni(t)), base_rng__, pstream__),
                "assigning variable out");
              current_statement__ = 39;
              stan::model::assign(y_pred_all_weeks_rdm,
                stan::model::rvalue(out, "out", stan::model::index_uni(1)),
                "assigning variable y_pred_all_weeks_rdm", stan::model::index_uni(t),
                                                             stan::model::index_uni(w),
                                                             stan::model::index_uni(n));
              current_statement__ = 40;
              stan::model::assign(trial_type,
                stan::model::rvalue(out, "out", stan::model::index_uni(2)),
                "assigning variable trial_type", stan::model::index_uni(t),
                                                   stan::model::index_uni(w),
                                                   stan::model::index_uni(n));
            }
            current_statement__ = 47;
            for (int t = 1;
                 t <= stan::model::rvalue(Nl_rdm, "Nl_rdm",
                        stan::model::index_uni(n), stan::model::index_uni(w));
                 ++t) {
              Eigen::Matrix<double, -1, 1> out =
                 Eigen::Matrix<double, -1, 1>::Constant(2,
                   std::numeric_limits<double>::quiet_NaN());
              current_statement__ = 43;
              stan::model::assign(out,
                wiener_rng(
                  stan::model::rvalue(alpha_rdm, "alpha_rdm",
                    stan::model::index_uni(n), stan::model::index_uni(w)),
                  stan::model::rvalue(tau_rdm, "tau_rdm",
                    stan::model::index_uni(n), stan::model::index_uni(w)),
                  0.5,
                  stan::model::rvalue(delta_cohl, "delta_cohl",
                    stan::model::index_uni(t)), base_rng__, pstream__),
                "assigning variable out");
              current_statement__ = 44;
              stan::model::assign(y_pred_all_weeks_rdm,
                stan::model::rvalue(out, "out", stan::model::index_uni(1)),
                "assigning variable y_pred_all_weeks_rdm", stan::model::index_uni(
                                                             (stan::model::rvalue(
                                                                Nu_rdm,
                                                                "Nu_rdm",
                                                                stan::model::index_uni(n),
                                                                  stan::model::index_uni(w))
                                                               + t)),
                                                             stan::model::index_uni(w),
                                                             stan::model::index_uni(n));
              current_statement__ = 45;
              stan::model::assign(trial_type,
                stan::model::rvalue(out, "out", stan::model::index_uni(2)),
                "assigning variable trial_type", stan::model::index_uni(
                                                   (stan::model::rvalue(
                                                      Nu_rdm, "Nu_rdm",
                                                      stan::model::index_uni(n),
                                                        stan::model::index_uni(w))
                                                     + t)),
                                                   stan::model::index_uni(w),
                                                   stan::model::index_uni(n));
            }
          } 
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= y_pred_all_weeks_rdm_1dim__;
               ++sym3__) {
            out__.write(
              y_pred_all_weeks_rdm[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= trial_type_1dim__; ++sym3__) {
            out__.write(
              trial_type[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(log_lik_all_subs[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(b);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_pr =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(num_par,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
        stan::model::assign(mu_pr, in__.read<local_scalar_t__>(),
          "assigning variable mu_pr", stan::model::index_uni(sym1__));
      }
      out__.write(mu_pr);
      std::vector<std::vector<local_scalar_t__>> mu_pr_sub =
         std::vector<std::vector<local_scalar_t__>>(num_par, 
           std::vector<local_scalar_t__>(N, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= num_par; ++sym2__) {
          mu_pr_sub[(sym2__ - 1)][(sym1__ - 1)] = in__.read<
                                                    local_scalar_t__>();
        }
      }
      out__.write(mu_pr_sub);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_pr =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(num_par,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
        stan::model::assign(sigma_pr, in__.read<local_scalar_t__>(),
          "assigning variable sigma_pr", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, sigma_pr);
      std::vector<local_scalar_t__> sigma_pr_r =
         std::vector<local_scalar_t__>(num_par, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
        sigma_pr_r[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write_free_lb(0, sigma_pr_r);
      std::vector<std::vector<local_scalar_t__>> alpha_rdm_pr =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          alpha_rdm_pr[(sym2__ - 1)][(sym1__ - 1)] = in__.read<
                                                       local_scalar_t__>();
        }
      }
      out__.write(alpha_rdm_pr);
      std::vector<std::vector<local_scalar_t__>> delta_rdm_pr =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          delta_rdm_pr[(sym2__ - 1)][(sym1__ - 1)] = in__.read<
                                                       local_scalar_t__>();
        }
      }
      out__.write(delta_rdm_pr);
      std::vector<std::vector<local_scalar_t__>> tau_rdm_pr =
         std::vector<std::vector<local_scalar_t__>>(N, 
           std::vector<local_scalar_t__>(W, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          tau_rdm_pr[(sym2__ - 1)][(sym1__ - 1)] = in__.read<
                                                     local_scalar_t__>();
        }
      }
      out__.write(tau_rdm_pr);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mu_pr", "mu_pr_sub", "sigma_pr",
      "sigma_pr_r", "alpha_rdm_pr", "delta_rdm_pr", "tau_rdm_pr", "tau_rdm",
      "alpha_rdm", "delta_rdm", "y_pred_all_weeks_rdm", "trial_type",
      "log_lik_all_subs", "b"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(num_par)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(num_par),
                          static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(num_par)},
      std::vector<size_t>{static_cast<size_t>(num_par)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(W)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(W)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(W)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(W)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(W)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(W)},
      std::vector<size_t>{static_cast<size_t>(y_pred_all_weeks_rdm_1dim__),
                          static_cast<size_t>(W), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(trial_type_1dim__),
                          static_cast<size_t>(W), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(W)},
      std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_pr" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= num_par; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "mu_pr_sub" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_pr" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_pr_r" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "alpha_rdm_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "delta_rdm_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "tau_rdm_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tau_rdm" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "alpha_rdm" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "delta_rdm" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= y_pred_all_weeks_rdm_1dim__;
                   ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "y_pred_all_weeks_rdm" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= trial_type_1dim__; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "trial_type" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "log_lik_all_subs" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "b");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_pr" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= num_par; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "mu_pr_sub" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_pr" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_pr_r" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "alpha_rdm_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "delta_rdm_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "tau_rdm_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tau_rdm" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "alpha_rdm" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "delta_rdm" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= y_pred_all_weeks_rdm_1dim__;
                   ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "y_pred_all_weeks_rdm" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= trial_type_1dim__; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "trial_type" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "log_lik_all_subs" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "b");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_pr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(num_par) + "},\"block\":\"parameters\"},{\"name\":\"mu_pr_sub\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(num_par) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"sigma_pr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(num_par) + "},\"block\":\"parameters\"},{\"name\":\"sigma_pr_r\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(num_par) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"alpha_rdm_pr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"delta_rdm_pr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"tau_rdm_pr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"tau_rdm\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"alpha_rdm\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"delta_rdm\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"y_pred_all_weeks_rdm\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(y_pred_all_weeks_rdm_1dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"generated_quantities\"},{\"name\":\"trial_type\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(trial_type_1dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_all_subs\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"b\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_pr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(num_par) + "},\"block\":\"parameters\"},{\"name\":\"mu_pr_sub\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(num_par) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"sigma_pr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(num_par) + "},\"block\":\"parameters\"},{\"name\":\"sigma_pr_r\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(num_par) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"alpha_rdm_pr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"delta_rdm_pr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"tau_rdm_pr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"tau_rdm\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"alpha_rdm\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"delta_rdm\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"y_pred_all_weeks_rdm\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(y_pred_all_weeks_rdm_1dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"generated_quantities\"},{\"name\":\"trial_type\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(trial_type_1dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_all_subs\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"b\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((num_par + (num_par * N)) + num_par) + num_par) + (N * W)) + (N * W))
    + (N * W));
      const size_t num_transformed = emit_transformed_parameters * 
  (((N * W) + (N * W)) + (N * W));
      const size_t num_gen_quantities = emit_generated_quantities * 
  (((((y_pred_all_weeks_rdm_1dim__ * W) * N) + ((trial_type_1dim__ * W) * N))
     + (N * W)) + 1);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((num_par + (num_par * N)) + num_par) + num_par) + (N * W)) + (N * W))
    + (N * W));
      const size_t num_transformed = emit_transformed_parameters * 
  (((N * W) + (N * W)) + (N * W));
      const size_t num_gen_quantities = emit_generated_quantities * 
  (((((y_pred_all_weeks_rdm_1dim__ * W) * N) + ((trial_type_1dim__ * W) * N))
     + (N * W)) + 1);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 7> names__{"mu_pr", "mu_pr_sub",
      "sigma_pr", "sigma_pr_r", "alpha_rdm_pr", "delta_rdm_pr",
      "tau_rdm_pr"};
      const std::array<Eigen::Index, 7> constrain_param_sizes__{num_par,
       (num_par * N), num_par, num_par, (N * W), (N * W), (N * W)};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = rdm_hierarchical_independent_with_gq_final_model_namespace::rdm_hierarchical_independent_with_gq_final_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return rdm_hierarchical_independent_with_gq_final_model_namespace::profiles__;
}

#endif


