
// Code generated by stanc v2.29.2
#include <stan/model/model_header.hpp>
namespace smb_hierarchical_independent_with_gq_final_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 118> locations_array__ = 
{" (found before start of program)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 57, column 4 to column 26)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 58, column 4 to column 38)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 59, column 4 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 60, column 4 to column 38)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 62, column 4 to column 32)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 67, column 4 to column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 71, column 12 to column 86)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 72, column 12 to column 87)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 73, column 12 to column 86)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 70, column 23 to line 74, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 70, column 8 to line 74, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 69, column 19 to line 75, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 69, column 4 to line 75, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 101, column 4 to column 48)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 103, column 4 to column 32)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 105, column 4 to column 10)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 111, column 16 to column 51)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 110, column 36 to line 112, column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 110, column 12 to line 112, column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 109, column 23 to line 113, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 109, column 8 to line 113, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 108, column 19 to line 114, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 108, column 4 to line 114, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 120, column 12 to column 38)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 123, column 27 to column 38)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 123, column 40 to column 45)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 123, column 20 to column 53)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 124, column 20 to column 64)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 125, column 20 to column 119)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 126, column 20 to column 128)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 122, column 39 to line 127, column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 122, column 12 to line 127, column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 118, column 23 to line 128, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 118, column 8 to line 128, column 9)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 117, column 19 to line 129, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 117, column 4 to line 129, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 81, column 4 to column 26)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 82, column 4 to column 28)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 86, column 12 to column 69)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 85, column 25 to line 87, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 85, column 4 to line 87, column 5)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 89, column 4 to column 41)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 92, column 4 to column 60)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 93, column 4 to column 60)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 94, column 4 to column 60)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 96, column 5 to column 104)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 30, column 4 to column 10)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 31, column 4 to column 10)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 32, column 4 to column 14)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 33, column 29 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 33, column 31 to column 32)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 33, column 4 to column 34)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 34, column 4 to column 28)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 35, column 24 to column 25)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 35, column 27 to column 28)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 35, column 4 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 36, column 31 to column 32)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 36, column 33 to column 34)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 36, column 35 to column 45)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 36, column 4 to column 47)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 37, column 32 to column 33)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 37, column 34 to column 35)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 37, column 36 to column 46)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 37, column 4 to column 48)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 38, column 30 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 38, column 32 to column 33)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 38, column 34 to column 44)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 38, column 4 to column 46)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 39, column 28 to column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 39, column 30 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 39, column 32 to column 42)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 39, column 4 to column 44)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 42, column 4 to column 23)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 43, column 29 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 43, column 31 to column 32)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 43, column 4 to column 34)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 44, column 4 to column 28)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 45, column 42 to column 43)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 45, column 45 to column 46)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 45, column 4 to column 48)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 46, column 15 to column 16)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 46, column 18 to column 19)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 46, column 21 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 46, column 33 to column 38)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 46, column 4 to column 40)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 47, column 14 to column 15)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 47, column 17 to column 18)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 47, column 20 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 47, column 4 to column 32)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 52, column 4 to column 24)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 57, column 11 to column 18)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 58, column 20 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 59, column 19 to column 26)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 59, column 28 to column 29)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 60, column 29 to column 36)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 62, column 23 to column 24)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 62, column 26 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 67, column 20 to column 21)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 67, column 23 to column 24)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 101, column 30 to column 40)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 101, column 42 to column 43)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 101, column 45 to column 46)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 103, column 26 to column 27)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 103, column 29 to column 30)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 8, column 1 to column 13)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 11, column 2 to column 26)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 17, column 20 to column 31)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 17, column 13 to column 80)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 18, column 13 to column 102)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 15, column 36 to line 19, column 10)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 15, column 9 to line 19, column 10)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 13, column 17 to line 20, column 3)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 13, column 2 to line 20, column 3)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 9, column 28 to line 21, column 2)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 9, column 1 to line 21, column 2)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 22, column 1 to column 11)",
 " (in '/net/rcstorenfs02/ifs/rc_labs/gershman_lab/users/Stan/1_code/publish_code/stan/final_independent_models/smb_hierarchical_independent_with_gq_final.stan', line 6, column 64 to line 23, column 2)"};

struct partial_sum_functor__ {
  template <typename T4__, typename T6__,
            stan::require_stan_scalar_t<T4__>* = nullptr,
            stan::require_stan_scalar_t<T6__>* = nullptr>
  stan::promote_args_t<T4__, T6__>
  operator()(const std::vector<std::vector<std::vector<int>>>& choice_itc,
             const int& start, const int& end,
             const std::vector<std::vector<std::vector<int>>>& y_smb,
             const std::vector<std::vector<std::vector<T4__>>>& params_smb,
             const std::vector<std::vector<int>>& idx_smb_obs,
             const std::vector<std::vector<std::vector<std::vector<T6__>>>>& x_smb,
             const std::vector<std::vector<int>>& Tr_smb, const int& W,
             std::ostream* pstream__) const;
};
struct partial_sum_rsfunctor__ {
  template <typename T4__, typename T6__,
            stan::require_stan_scalar_t<T4__>* = nullptr,
            stan::require_stan_scalar_t<T6__>* = nullptr>
  stan::promote_args_t<T4__, T6__>
  operator()(const std::vector<std::vector<std::vector<int>>>& choice_itc,
             const int& start, const int& end, std::ostream* pstream__,
             const std::vector<std::vector<std::vector<int>>>& y_smb,
             const std::vector<std::vector<std::vector<T4__>>>& params_smb,
             const std::vector<std::vector<int>>& idx_smb_obs,
             const std::vector<std::vector<std::vector<std::vector<T6__>>>>& x_smb,
             const std::vector<std::vector<int>>& Tr_smb, const int& W) const;
};

template <typename T4__, typename T6__,
          stan::require_stan_scalar_t<T4__>* = nullptr,
          stan::require_stan_scalar_t<T6__>* = nullptr>
  stan::promote_args_t<T4__, T6__>
  partial_sum(const std::vector<std::vector<std::vector<int>>>& choice_itc,
              const int& start, const int& end,
              const std::vector<std::vector<std::vector<int>>>& y_smb,
              const std::vector<std::vector<std::vector<T4__>>>& params_smb,
              const std::vector<std::vector<int>>& idx_smb_obs,
              const std::vector<std::vector<std::vector<std::vector<T6__>>>>& x_smb,
              const std::vector<std::vector<int>>& Tr_smb, const int& W,
              std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T4__, T6__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ lt = DUMMY_VAR__;
      current_statement__ = 105;
      lt = 0;
      current_statement__ = 115;
      for (int n = 1; n <= ((end - start) + 1); ++n) {
        int s = std::numeric_limits<int>::min();
        current_statement__ = 106;
        s = (start + (n - 1));
        current_statement__ = 113;
        for (int w = 1; w <= W; ++w) {
          current_statement__ = 111;
          if (stan::math::logical_neq(
                stan::model::rvalue(idx_smb_obs, "idx_smb_obs",
                  stan::model::index_uni(s), stan::model::index_uni(w)), 0)) {
            current_statement__ = 107;
            stan::math::validate_non_negative_index("X_smb", "Tr_smb[s, w]",
                                                    stan::model::rvalue(
                                                      Tr_smb, "Tr_smb",
                                                      stan::model::index_uni(s),
                                                        stan::model::index_uni(w)));
            Eigen::Matrix<local_scalar_t__, -1, -1> X_smb =
               Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(
                 stan::model::rvalue(Tr_smb, "Tr_smb",
                   stan::model::index_uni(s), stan::model::index_uni(w)), 3,
                 DUMMY_VAR__);
            current_statement__ = 108;
            stan::model::assign(X_smb,
              stan::math::to_matrix(
                stan::model::rvalue(x_smb, "x_smb",
                  stan::model::index_uni(s), stan::model::index_uni(w),
                    stan::model::index_min_max(1, stan::model::rvalue(Tr_smb,
                                                    "Tr_smb",
                                                    stan::model::index_uni(s),
                                                      stan::model::index_uni(w))),
                    stan::model::index_omni())), "assigning variable X_smb");
            current_statement__ = 109;
            lt = (lt +
                   stan::math::bernoulli_lpmf<false>(
                     stan::model::rvalue(y_smb, "y_smb",
                       stan::model::index_uni(s), stan::model::index_uni(w),
                         stan::model::index_min_max(1, stan::model::rvalue(
                                                         Tr_smb, "Tr_smb",
                                                         stan::model::index_uni(s),
                                                           stan::model::index_uni(w)))),
                     stan::math::Phi(
                       stan::math::multiply(X_smb,
                         stan::math::to_vector(
                           stan::model::rvalue(params_smb, "params_smb",
                             stan::model::index_uni(s),
                               stan::model::index_uni(w),
                               stan::model::index_omni()))))));
          } 
        }
      }
      current_statement__ = 116;
      return lt;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T4__, typename T6__, stan::require_stan_scalar_t<T4__>*,
          stan::require_stan_scalar_t<T6__>*>
stan::promote_args_t<T4__, T6__>
partial_sum_functor__::operator()(const std::vector<std::vector<std::vector<int>>>& choice_itc,
                                  const int& start, const int& end,
                                  const std::vector<std::vector<std::vector<int>>>& y_smb,
                                  const std::vector<std::vector<std::vector<T4__>>>& params_smb,
                                  const std::vector<std::vector<int>>& idx_smb_obs,
                                  const std::vector<std::vector<std::vector<std::vector<T6__>>>>& x_smb,
                                  const std::vector<std::vector<int>>& Tr_smb,
                                  const int& W, std::ostream* pstream__) 
const
{
  return partial_sum(choice_itc, start, end, y_smb, params_smb, idx_smb_obs,
           x_smb, Tr_smb, W, pstream__);
}

template <typename T4__, typename T6__, stan::require_stan_scalar_t<T4__>*,
          stan::require_stan_scalar_t<T6__>*>
stan::promote_args_t<T4__, T6__>
partial_sum_rsfunctor__::operator()(const std::vector<std::vector<std::vector<int>>>& choice_itc,
                                    const int& start, const int& end,
                                    std::ostream* pstream__,
                                    const std::vector<std::vector<std::vector<int>>>& y_smb,
                                    const std::vector<std::vector<std::vector<T4__>>>& params_smb,
                                    const std::vector<std::vector<int>>& idx_smb_obs,
                                    const std::vector<std::vector<std::vector<std::vector<T6__>>>>& x_smb,
                                    const std::vector<std::vector<int>>& Tr_smb,
                                    const int& W)  const
{
  return partial_sum(choice_itc, start + 1, end + 1, y_smb, params_smb,
           idx_smb_obs, x_smb, Tr_smb, W, pstream__);
}


class smb_hierarchical_independent_with_gq_final_model final : public model_base_crtp<smb_hierarchical_independent_with_gq_final_model> {

 private:
  int N;
  int W;
  int P_itc;
  std::vector<std::vector<int>> idx_itc_obs;
  int Tr_max_itc;
  std::vector<std::vector<int>> Tr_itc;
  std::vector<std::vector<std::vector<double>>> amount_later;
  std::vector<std::vector<std::vector<double>>> amount_sooner;
  std::vector<std::vector<std::vector<double>>> delay_later;
  std::vector<std::vector<std::vector<int>>> choice_itc;
  int P_smb;
  std::vector<std::vector<int>> idx_smb_obs;
  int Tr_max_smb;
  std::vector<std::vector<int>> Tr_smb;
  std::vector<std::vector<std::vector<std::vector<double>>>> x_smb;
  std::vector<std::vector<std::vector<int>>> y_smb;
  int num_par; 
  
 
 public:
  ~smb_hierarchical_independent_with_gq_final_model() { }
  
  inline std::string model_name() const final { return "smb_hierarchical_independent_with_gq_final_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.2", "stancflags = "};
  }
  
  
  smb_hierarchical_independent_with_gq_final_model(stan::io::var_context& context__,
                                                   unsigned int random_seed__ = 0,
                                                   std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "smb_hierarchical_independent_with_gq_final_model_namespace::smb_hierarchical_independent_with_gq_final_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 47;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 47;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 48;
      context__.validate_dims("data initialization","W","int",
           std::vector<size_t>{});
      W = std::numeric_limits<int>::min();
      
      
      current_statement__ = 48;
      W = context__.vals_i("W")[(1 - 1)];
      current_statement__ = 49;
      context__.validate_dims("data initialization","P_itc","int",
           std::vector<size_t>{});
      P_itc = std::numeric_limits<int>::min();
      
      
      current_statement__ = 49;
      P_itc = context__.vals_i("P_itc")[(1 - 1)];
      current_statement__ = 50;
      stan::math::validate_non_negative_index("idx_itc_obs", "N", N);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("idx_itc_obs", "W", W);
      current_statement__ = 52;
      context__.validate_dims("data initialization","idx_itc_obs","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W)});
      idx_itc_obs = 
        std::vector<std::vector<int>>(N, 
          std::vector<int>(W, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> idx_itc_obs_flat__;
        current_statement__ = 52;
        idx_itc_obs_flat__ = context__.vals_i("idx_itc_obs");
        current_statement__ = 52;
        pos__ = 1;
        current_statement__ = 52;
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          current_statement__ = 52;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 52;
            stan::model::assign(idx_itc_obs, idx_itc_obs_flat__[(pos__ - 1)],
              "assigning variable idx_itc_obs", stan::model::index_uni(sym2__),
                                                  stan::model::index_uni(sym1__));
            current_statement__ = 52;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 52;
      stan::math::check_greater_or_equal(function__, "idx_itc_obs",
                                            idx_itc_obs, 0);
      current_statement__ = 53;
      context__.validate_dims("data initialization","Tr_max_itc","int",
           std::vector<size_t>{});
      Tr_max_itc = std::numeric_limits<int>::min();
      
      
      current_statement__ = 53;
      Tr_max_itc = context__.vals_i("Tr_max_itc")[(1 - 1)];
      current_statement__ = 53;
      stan::math::check_greater_or_equal(function__, "Tr_max_itc",
                                            Tr_max_itc, 0);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("Tr_itc", "N", N);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("Tr_itc", "W", W);
      current_statement__ = 56;
      context__.validate_dims("data initialization","Tr_itc","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W)});
      Tr_itc = 
        std::vector<std::vector<int>>(N, 
          std::vector<int>(W, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> Tr_itc_flat__;
        current_statement__ = 56;
        Tr_itc_flat__ = context__.vals_i("Tr_itc");
        current_statement__ = 56;
        pos__ = 1;
        current_statement__ = 56;
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          current_statement__ = 56;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 56;
            stan::model::assign(Tr_itc, Tr_itc_flat__[(pos__ - 1)],
              "assigning variable Tr_itc", stan::model::index_uni(sym2__),
                                             stan::model::index_uni(sym1__));
            current_statement__ = 56;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 56;
      stan::math::check_greater_or_equal(function__, "Tr_itc", Tr_itc, 0);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("amount_later", "N", N);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("amount_later", "W", W);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("amount_later", "Tr_max_itc",
                                              Tr_max_itc);
      current_statement__ = 60;
      context__.validate_dims("data initialization","amount_later","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_itc)});
      amount_later = 
        std::vector<std::vector<std::vector<double>>>(N, 
          std::vector<std::vector<double>>(W, 
            std::vector<double>(Tr_max_itc, 
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> amount_later_flat__;
        current_statement__ = 60;
        amount_later_flat__ = context__.vals_r("amount_later");
        current_statement__ = 60;
        pos__ = 1;
        current_statement__ = 60;
        for (int sym1__ = 1; sym1__ <= Tr_max_itc; ++sym1__) {
          current_statement__ = 60;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 60;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 60;
              stan::model::assign(amount_later,
                amount_later_flat__[(pos__ - 1)],
                "assigning variable amount_later", stan::model::index_uni(sym3__),
                                                     stan::model::index_uni(sym2__),
                                                     stan::model::index_uni(sym1__));
              current_statement__ = 60;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 60;
      stan::math::check_greater_or_equal(function__, "amount_later",
                                            amount_later, 0);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("amount_sooner", "N", N);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("amount_sooner", "W", W);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("amount_sooner", "Tr_max_itc",
                                              Tr_max_itc);
      current_statement__ = 64;
      context__.validate_dims("data initialization","amount_sooner","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_itc)});
      amount_sooner = 
        std::vector<std::vector<std::vector<double>>>(N, 
          std::vector<std::vector<double>>(W, 
            std::vector<double>(Tr_max_itc, 
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> amount_sooner_flat__;
        current_statement__ = 64;
        amount_sooner_flat__ = context__.vals_r("amount_sooner");
        current_statement__ = 64;
        pos__ = 1;
        current_statement__ = 64;
        for (int sym1__ = 1; sym1__ <= Tr_max_itc; ++sym1__) {
          current_statement__ = 64;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 64;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 64;
              stan::model::assign(amount_sooner,
                amount_sooner_flat__[(pos__ - 1)],
                "assigning variable amount_sooner", stan::model::index_uni(sym3__),
                                                      stan::model::index_uni(sym2__),
                                                      stan::model::index_uni(sym1__));
              current_statement__ = 64;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 64;
      stan::math::check_greater_or_equal(function__, "amount_sooner",
                                            amount_sooner, 0);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("delay_later", "N", N);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("delay_later", "W", W);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("delay_later", "Tr_max_itc",
                                              Tr_max_itc);
      current_statement__ = 68;
      context__.validate_dims("data initialization","delay_later","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_itc)});
      delay_later = 
        std::vector<std::vector<std::vector<double>>>(N, 
          std::vector<std::vector<double>>(W, 
            std::vector<double>(Tr_max_itc, 
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> delay_later_flat__;
        current_statement__ = 68;
        delay_later_flat__ = context__.vals_r("delay_later");
        current_statement__ = 68;
        pos__ = 1;
        current_statement__ = 68;
        for (int sym1__ = 1; sym1__ <= Tr_max_itc; ++sym1__) {
          current_statement__ = 68;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 68;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 68;
              stan::model::assign(delay_later,
                delay_later_flat__[(pos__ - 1)],
                "assigning variable delay_later", stan::model::index_uni(sym3__),
                                                    stan::model::index_uni(sym2__),
                                                    stan::model::index_uni(sym1__));
              current_statement__ = 68;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 68;
      stan::math::check_greater_or_equal(function__, "delay_later",
                                            delay_later, 0);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("choice_itc", "N", N);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("choice_itc", "W", W);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("choice_itc", "Tr_max_itc",
                                              Tr_max_itc);
      current_statement__ = 72;
      context__.validate_dims("data initialization","choice_itc","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_itc)});
      choice_itc = 
        std::vector<std::vector<std::vector<int>>>(N, 
          std::vector<std::vector<int>>(W, 
            std::vector<int>(Tr_max_itc, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> choice_itc_flat__;
        current_statement__ = 72;
        choice_itc_flat__ = context__.vals_i("choice_itc");
        current_statement__ = 72;
        pos__ = 1;
        current_statement__ = 72;
        for (int sym1__ = 1; sym1__ <= Tr_max_itc; ++sym1__) {
          current_statement__ = 72;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 72;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 72;
              stan::model::assign(choice_itc, choice_itc_flat__[(pos__ - 1)],
                "assigning variable choice_itc", stan::model::index_uni(sym3__),
                                                   stan::model::index_uni(sym2__),
                                                   stan::model::index_uni(sym1__));
              current_statement__ = 72;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 72;
      stan::math::check_less_or_equal(function__, "choice_itc", choice_itc, 1);
      current_statement__ = 73;
      context__.validate_dims("data initialization","P_smb","int",
           std::vector<size_t>{});
      P_smb = std::numeric_limits<int>::min();
      
      
      current_statement__ = 73;
      P_smb = context__.vals_i("P_smb")[(1 - 1)];
      current_statement__ = 73;
      stan::math::check_greater_or_equal(function__, "P_smb", P_smb, 1);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("idx_smb_obs", "N", N);
      current_statement__ = 75;
      stan::math::validate_non_negative_index("idx_smb_obs", "W", W);
      current_statement__ = 76;
      context__.validate_dims("data initialization","idx_smb_obs","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W)});
      idx_smb_obs = 
        std::vector<std::vector<int>>(N, 
          std::vector<int>(W, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> idx_smb_obs_flat__;
        current_statement__ = 76;
        idx_smb_obs_flat__ = context__.vals_i("idx_smb_obs");
        current_statement__ = 76;
        pos__ = 1;
        current_statement__ = 76;
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          current_statement__ = 76;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 76;
            stan::model::assign(idx_smb_obs, idx_smb_obs_flat__[(pos__ - 1)],
              "assigning variable idx_smb_obs", stan::model::index_uni(sym2__),
                                                  stan::model::index_uni(sym1__));
            current_statement__ = 76;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 76;
      stan::math::check_greater_or_equal(function__, "idx_smb_obs",
                                            idx_smb_obs, 0);
      current_statement__ = 77;
      context__.validate_dims("data initialization","Tr_max_smb","int",
           std::vector<size_t>{});
      Tr_max_smb = std::numeric_limits<int>::min();
      
      
      current_statement__ = 77;
      Tr_max_smb = context__.vals_i("Tr_max_smb")[(1 - 1)];
      current_statement__ = 77;
      stan::math::check_greater_or_equal(function__, "Tr_max_smb",
                                            Tr_max_smb, 1);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("Tr_smb", "N", N);
      current_statement__ = 79;
      stan::math::validate_non_negative_index("Tr_smb", "W", W);
      current_statement__ = 80;
      context__.validate_dims("data initialization","Tr_smb","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W)});
      Tr_smb = 
        std::vector<std::vector<int>>(N, 
          std::vector<int>(W, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> Tr_smb_flat__;
        current_statement__ = 80;
        Tr_smb_flat__ = context__.vals_i("Tr_smb");
        current_statement__ = 80;
        pos__ = 1;
        current_statement__ = 80;
        for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
          current_statement__ = 80;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 80;
            stan::model::assign(Tr_smb, Tr_smb_flat__[(pos__ - 1)],
              "assigning variable Tr_smb", stan::model::index_uni(sym2__),
                                             stan::model::index_uni(sym1__));
            current_statement__ = 80;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 80;
      stan::math::check_greater_or_equal(function__, "Tr_smb", Tr_smb, 0);
      current_statement__ = 80;
      stan::math::check_less_or_equal(function__, "Tr_smb", Tr_smb,
                                         Tr_max_smb);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("x_smb", "N", N);
      current_statement__ = 82;
      stan::math::validate_non_negative_index("x_smb", "W", W);
      current_statement__ = 83;
      stan::math::validate_non_negative_index("x_smb", "Tr_max_smb",
                                              Tr_max_smb);
      current_statement__ = 84;
      stan::math::validate_non_negative_index("x_smb", "P_smb", P_smb);
      current_statement__ = 85;
      context__.validate_dims("data initialization","x_smb","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_smb),
            static_cast<size_t>(P_smb)});
      x_smb = 
        std::vector<std::vector<std::vector<std::vector<double>>>>(N, 
          std::vector<std::vector<std::vector<double>>>(W, 
            std::vector<std::vector<double>>(Tr_max_smb, 
              std::vector<double>(P_smb, 
                std::numeric_limits<double>::quiet_NaN()))));
      
      
      {
        std::vector<local_scalar_t__> x_smb_flat__;
        current_statement__ = 85;
        x_smb_flat__ = context__.vals_r("x_smb");
        current_statement__ = 85;
        pos__ = 1;
        current_statement__ = 85;
        for (int sym1__ = 1; sym1__ <= P_smb; ++sym1__) {
          current_statement__ = 85;
          for (int sym2__ = 1; sym2__ <= Tr_max_smb; ++sym2__) {
            current_statement__ = 85;
            for (int sym3__ = 1; sym3__ <= W; ++sym3__) {
              current_statement__ = 85;
              for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                current_statement__ = 85;
                stan::model::assign(x_smb, x_smb_flat__[(pos__ - 1)],
                  "assigning variable x_smb", stan::model::index_uni(sym4__),
                                                stan::model::index_uni(sym3__),
                                                stan::model::index_uni(sym2__),
                                                stan::model::index_uni(sym1__));
                current_statement__ = 85;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      current_statement__ = 86;
      stan::math::validate_non_negative_index("y_smb", "N", N);
      current_statement__ = 87;
      stan::math::validate_non_negative_index("y_smb", "W", W);
      current_statement__ = 88;
      stan::math::validate_non_negative_index("y_smb", "Tr_max_smb",
                                              Tr_max_smb);
      current_statement__ = 89;
      context__.validate_dims("data initialization","y_smb","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(W), static_cast<size_t>(Tr_max_smb)});
      y_smb = 
        std::vector<std::vector<std::vector<int>>>(N, 
          std::vector<std::vector<int>>(W, 
            std::vector<int>(Tr_max_smb, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> y_smb_flat__;
        current_statement__ = 89;
        y_smb_flat__ = context__.vals_i("y_smb");
        current_statement__ = 89;
        pos__ = 1;
        current_statement__ = 89;
        for (int sym1__ = 1; sym1__ <= Tr_max_smb; ++sym1__) {
          current_statement__ = 89;
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            current_statement__ = 89;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 89;
              stan::model::assign(y_smb, y_smb_flat__[(pos__ - 1)],
                "assigning variable y_smb", stan::model::index_uni(sym3__),
                                              stan::model::index_uni(sym2__),
                                              stan::model::index_uni(sym1__));
              current_statement__ = 89;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 90;
      num_par = std::numeric_limits<int>::min();
      
      
      current_statement__ = 90;
      num_par = P_smb;
      current_statement__ = 91;
      stan::math::validate_non_negative_index("mu_pr", "num_par", num_par);
      current_statement__ = 92;
      stan::math::validate_non_negative_index("sigma_pr", "num_par", num_par);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("mu_pr_sub", "num_par", num_par);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("mu_pr_sub", "N", N);
      current_statement__ = 95;
      stan::math::validate_non_negative_index("sigma_pr_r", "num_par",
                                              num_par);
      current_statement__ = 96;
      stan::math::validate_non_negative_index("params_smb_pr", "N", N);
      current_statement__ = 97;
      stan::math::validate_non_negative_index("params_smb_pr", "W", W);
      current_statement__ = 98;
      stan::math::validate_non_negative_index("params_smb", "N", N);
      current_statement__ = 99;
      stan::math::validate_non_negative_index("params_smb", "W", W);
      current_statement__ = 100;
      stan::math::validate_non_negative_index("y_pred_all_weeks_smb",
                                              "Tr_max_smb", Tr_max_smb);
      current_statement__ = 101;
      stan::math::validate_non_negative_index("y_pred_all_weeks_smb", "W", W);
      current_statement__ = 102;
      stan::math::validate_non_negative_index("y_pred_all_weeks_smb", "N", N);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("log_lik_all_subs", "N", N);
      current_statement__ = 104;
      stan::math::validate_non_negative_index("log_lik_all_subs", "W", W);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = num_par + num_par + (num_par * N) + num_par
       + (N * W * 3);
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "smb_hierarchical_independent_with_gq_final_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_pr =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(num_par,
           DUMMY_VAR__);
      current_statement__ = 1;
      mu_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                num_par);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_pr =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(num_par,
           DUMMY_VAR__);
      current_statement__ = 2;
      sigma_pr = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                   lp__, num_par);
      std::vector<std::vector<local_scalar_t__>> mu_pr_sub =
         std::vector<std::vector<local_scalar_t__>>(num_par, 
           std::vector<local_scalar_t__>(N, DUMMY_VAR__));
      current_statement__ = 3;
      mu_pr_sub = in__.template read<
                    std::vector<std::vector<local_scalar_t__>>>(num_par, N);
      std::vector<local_scalar_t__> sigma_pr_r =
         std::vector<local_scalar_t__>(num_par, DUMMY_VAR__);
      current_statement__ = 4;
      sigma_pr_r = in__.template read_constrain_lb<
                     std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                     num_par);
      std::vector<std::vector<std::vector<local_scalar_t__>>> params_smb_pr =
         std::vector<std::vector<std::vector<local_scalar_t__>>>(N, 
           std::vector<std::vector<local_scalar_t__>>(W, 
             std::vector<local_scalar_t__>(3, DUMMY_VAR__)));
      current_statement__ = 5;
      params_smb_pr = in__.template read<
                        std::vector<
                          std::vector<std::vector<local_scalar_t__>>>>(N, W,
                        3);
      std::vector<std::vector<std::vector<local_scalar_t__>>> params_smb =
         std::vector<std::vector<std::vector<local_scalar_t__>>>(N, 
           std::vector<std::vector<local_scalar_t__>>(W, 
             std::vector<local_scalar_t__>(3, DUMMY_VAR__)));
      current_statement__ = 13;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 11;
        for (int w = 1; w <= W; ++w) {
          current_statement__ = 7;
          stan::model::assign(params_smb,
            (stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
               stan::model::index_uni(1), stan::model::index_uni(n)) +
              (stan::model::rvalue(sigma_pr_r, "sigma_pr_r",
                 stan::model::index_uni(1)) *
                stan::model::rvalue(params_smb_pr, "params_smb_pr",
                  stan::model::index_uni(n), stan::model::index_uni(w),
                    stan::model::index_uni(1)))),
            "assigning variable params_smb", stan::model::index_uni(n),
                                               stan::model::index_uni(w),
                                               stan::model::index_uni(1));
          current_statement__ = 8;
          stan::model::assign(params_smb,
            (stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
               stan::model::index_uni(2), stan::model::index_uni(n)) +
              (stan::model::rvalue(sigma_pr_r, "sigma_pr_r",
                 stan::model::index_uni(2)) *
                stan::model::rvalue(params_smb_pr, "params_smb_pr",
                  stan::model::index_uni(n), stan::model::index_uni(w),
                    stan::model::index_uni(2)))),
            "assigning variable params_smb", stan::model::index_uni(n),
                                               stan::model::index_uni(w),
                                               stan::model::index_uni(2));
          current_statement__ = 9;
          stan::model::assign(params_smb,
            (stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
               stan::model::index_uni(3), stan::model::index_uni(n)) +
              (stan::model::rvalue(sigma_pr_r, "sigma_pr_r",
                 stan::model::index_uni(3)) *
                stan::model::rvalue(params_smb_pr, "params_smb_pr",
                  stan::model::index_uni(n), stan::model::index_uni(w),
                    stan::model::index_uni(3)))),
            "assigning variable params_smb", stan::model::index_uni(n),
                                               stan::model::index_uni(w),
                                               stan::model::index_uni(3));
        }
      }
      {
        current_statement__ = 37;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_pr, 0, 1));
        current_statement__ = 38;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_pr, 0, 1));
        current_statement__ = 41;
        for (int p = 1; p <= num_par; ++p) {
          current_statement__ = 39;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::math::to_vector(
                stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
                  stan::model::index_uni(p), stan::model::index_omni())),
              stan::model::rvalue(mu_pr, "mu_pr", stan::model::index_uni(p)),
              stan::model::rvalue(sigma_pr, "sigma_pr",
                stan::model::index_uni(p))));
        }
        current_statement__ = 42;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::math::to_vector(sigma_pr_r), 0, 1));
        current_statement__ = 43;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::math::to_vector(
              stan::math::to_matrix(
                stan::model::rvalue(params_smb_pr, "params_smb_pr",
                  stan::model::index_omni(), stan::model::index_omni(),
                    stan::model::index_uni(1)))), 0, 1));
        current_statement__ = 44;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::math::to_vector(
              stan::math::to_matrix(
                stan::model::rvalue(params_smb_pr, "params_smb_pr",
                  stan::model::index_omni(), stan::model::index_omni(),
                    stan::model::index_uni(2)))), 0, 1));
        current_statement__ = 45;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::math::to_vector(
              stan::math::to_matrix(
                stan::model::rvalue(params_smb_pr, "params_smb_pr",
                  stan::model::index_omni(), stan::model::index_omni(),
                    stan::model::index_uni(3)))), 0, 1));
        current_statement__ = 46;
        lp_accum__.add(
          stan::math::reduce_sum<partial_sum_rsfunctor__>(choice_itc, 1,
            pstream__, y_smb, params_smb, idx_smb_obs, x_smb, Tr_smb, W));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "smb_hierarchical_independent_with_gq_final_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> mu_pr =
         Eigen::Matrix<double, -1, 1>::Constant(num_par,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      mu_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                num_par);
      Eigen::Matrix<double, -1, 1> sigma_pr =
         Eigen::Matrix<double, -1, 1>::Constant(num_par,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      sigma_pr = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                   lp__, num_par);
      std::vector<std::vector<double>> mu_pr_sub =
         std::vector<std::vector<double>>(num_par, 
           std::vector<double>(N, std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 3;
      mu_pr_sub = in__.template read<
                    std::vector<std::vector<local_scalar_t__>>>(num_par, N);
      std::vector<double> sigma_pr_r =
         std::vector<double>(num_par, 
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      sigma_pr_r = in__.template read_constrain_lb<
                     std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                     num_par);
      std::vector<std::vector<std::vector<double>>> params_smb_pr =
         std::vector<std::vector<std::vector<double>>>(N, 
           std::vector<std::vector<double>>(W, 
             std::vector<double>(3, std::numeric_limits<double>::quiet_NaN())));
      current_statement__ = 5;
      params_smb_pr = in__.template read<
                        std::vector<
                          std::vector<std::vector<local_scalar_t__>>>>(N, W,
                        3);
      std::vector<std::vector<std::vector<double>>> params_smb =
         std::vector<std::vector<std::vector<double>>>(N, 
           std::vector<std::vector<double>>(W, 
             std::vector<double>(3, std::numeric_limits<double>::quiet_NaN())));
      out__.write(mu_pr);
      out__.write(sigma_pr);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= num_par; ++sym2__) {
          out__.write(mu_pr_sub[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(sigma_pr_r);
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            out__.write(
              params_smb_pr[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 13;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 11;
        for (int w = 1; w <= W; ++w) {
          current_statement__ = 7;
          stan::model::assign(params_smb,
            (stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
               stan::model::index_uni(1), stan::model::index_uni(n)) +
              (stan::model::rvalue(sigma_pr_r, "sigma_pr_r",
                 stan::model::index_uni(1)) *
                stan::model::rvalue(params_smb_pr, "params_smb_pr",
                  stan::model::index_uni(n), stan::model::index_uni(w),
                    stan::model::index_uni(1)))),
            "assigning variable params_smb", stan::model::index_uni(n),
                                               stan::model::index_uni(w),
                                               stan::model::index_uni(1));
          current_statement__ = 8;
          stan::model::assign(params_smb,
            (stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
               stan::model::index_uni(2), stan::model::index_uni(n)) +
              (stan::model::rvalue(sigma_pr_r, "sigma_pr_r",
                 stan::model::index_uni(2)) *
                stan::model::rvalue(params_smb_pr, "params_smb_pr",
                  stan::model::index_uni(n), stan::model::index_uni(w),
                    stan::model::index_uni(2)))),
            "assigning variable params_smb", stan::model::index_uni(n),
                                               stan::model::index_uni(w),
                                               stan::model::index_uni(2));
          current_statement__ = 9;
          stan::model::assign(params_smb,
            (stan::model::rvalue(mu_pr_sub, "mu_pr_sub",
               stan::model::index_uni(3), stan::model::index_uni(n)) +
              (stan::model::rvalue(sigma_pr_r, "sigma_pr_r",
                 stan::model::index_uni(3)) *
                stan::model::rvalue(params_smb_pr, "params_smb_pr",
                  stan::model::index_uni(n), stan::model::index_uni(w),
                    stan::model::index_uni(3)))),
            "assigning variable params_smb", stan::model::index_uni(n),
                                               stan::model::index_uni(w),
                                               stan::model::index_uni(3));
        }
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              out__.write(
                params_smb[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
            }
          }
        }
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<std::vector<std::vector<double>>> y_pred_all_weeks_smb =
         std::vector<std::vector<std::vector<double>>>(Tr_max_smb, 
           std::vector<std::vector<double>>(W, 
             std::vector<double>(N, std::numeric_limits<double>::quiet_NaN())));
      std::vector<std::vector<double>> log_lik_all_subs =
         std::vector<std::vector<double>>(N, 
           std::vector<double>(W, std::numeric_limits<double>::quiet_NaN()));
      int b = std::numeric_limits<int>::min();
      current_statement__ = 23;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 21;
        for (int w = 1; w <= W; ++w) {
          current_statement__ = 19;
          for (int t = 1; t <= Tr_max_smb; ++t) {
            current_statement__ = 17;
            stan::model::assign(y_pred_all_weeks_smb, -2,
              "assigning variable y_pred_all_weeks_smb", stan::model::index_uni(t),
                                                           stan::model::index_uni(w),
                                                           stan::model::index_uni(n));
          }
        }
      }
      current_statement__ = 36;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 34;
        for (int w = 1; w <= W; ++w) {
          current_statement__ = 24;
          stan::model::assign(log_lik_all_subs, 0,
            "assigning variable log_lik_all_subs", stan::model::index_uni(n),
                                                     stan::model::index_uni(w));
          current_statement__ = 32;
          if (stan::math::logical_neq(
                stan::model::rvalue(idx_smb_obs, "idx_smb_obs",
                  stan::model::index_uni(n), stan::model::index_uni(w)), 0)) {
            current_statement__ = 25;
            stan::math::validate_non_negative_index("X_smb", "Tr_smb[n, w]",
                                                    stan::model::rvalue(
                                                      Tr_smb, "Tr_smb",
                                                      stan::model::index_uni(n),
                                                        stan::model::index_uni(w)));
            current_statement__ = 26;
            stan::math::validate_non_negative_index("X_smb", "P_smb", P_smb);
            Eigen::Matrix<double, -1, -1> X_smb =
               Eigen::Matrix<double, -1, -1>::Constant(
                 stan::model::rvalue(Tr_smb, "Tr_smb",
                   stan::model::index_uni(n), stan::model::index_uni(w)),
                 P_smb, std::numeric_limits<double>::quiet_NaN());
            current_statement__ = 28;
            stan::model::assign(X_smb,
              stan::math::to_matrix(
                stan::model::rvalue(x_smb, "x_smb",
                  stan::model::index_uni(n), stan::model::index_uni(w),
                    stan::model::index_min_max(1, stan::model::rvalue(Tr_smb,
                                                    "Tr_smb",
                                                    stan::model::index_uni(n),
                                                      stan::model::index_uni(w))),
                    stan::model::index_omni())), "assigning variable X_smb");
            current_statement__ = 29;
            stan::model::assign(y_pred_all_weeks_smb,
              stan::math::bernoulli_rng(
                stan::math::Phi(
                  stan::math::multiply(X_smb,
                    stan::math::to_vector(
                      stan::model::rvalue(params_smb, "params_smb",
                        stan::model::index_uni(n), stan::model::index_uni(w),
                          stan::model::index_omni())))), base_rng__),
              "assigning variable y_pred_all_weeks_smb", stan::model::index_min_max(1, 
                                                           stan::model::rvalue(
                                                             Tr_smb,
                                                             "Tr_smb",
                                                             stan::model::index_uni(n),
                                                               stan::model::index_uni(w))),
                                                           stan::model::index_uni(w),
                                                           stan::model::index_uni(n));
            current_statement__ = 30;
            stan::model::assign(log_lik_all_subs,
              (stan::model::rvalue(log_lik_all_subs, "log_lik_all_subs",
                 stan::model::index_uni(n), stan::model::index_uni(w)) +
                stan::math::bernoulli_lpmf<false>(
                  stan::model::rvalue(y_smb, "y_smb",
                    stan::model::index_uni(n), stan::model::index_uni(w),
                      stan::model::index_min_max(1, stan::model::rvalue(
                                                      Tr_smb, "Tr_smb",
                                                      stan::model::index_uni(n),
                                                        stan::model::index_uni(w)))),
                  stan::math::Phi(
                    stan::math::multiply(X_smb,
                      stan::math::to_vector(
                        stan::model::rvalue(params_smb, "params_smb",
                          stan::model::index_uni(n),
                            stan::model::index_uni(w),
                            stan::model::index_omni())))))),
              "assigning variable log_lik_all_subs", stan::model::index_uni(n),
                                                       stan::model::index_uni(w));
          } 
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= Tr_max_smb; ++sym3__) {
            out__.write(
              y_pred_all_weeks_smb[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(log_lik_all_subs[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(b);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_pr =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(num_par,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
        stan::model::assign(mu_pr, in__.read<local_scalar_t__>(),
          "assigning variable mu_pr", stan::model::index_uni(sym1__));
      }
      out__.write(mu_pr);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_pr =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(num_par,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
        stan::model::assign(sigma_pr, in__.read<local_scalar_t__>(),
          "assigning variable sigma_pr", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, sigma_pr);
      std::vector<std::vector<local_scalar_t__>> mu_pr_sub =
         std::vector<std::vector<local_scalar_t__>>(num_par, 
           std::vector<local_scalar_t__>(N, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= num_par; ++sym2__) {
          mu_pr_sub[(sym2__ - 1)][(sym1__ - 1)] = in__.read<
                                                    local_scalar_t__>();
        }
      }
      out__.write(mu_pr_sub);
      std::vector<local_scalar_t__> sigma_pr_r =
         std::vector<local_scalar_t__>(num_par, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
        sigma_pr_r[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write_free_lb(0, sigma_pr_r);
      std::vector<std::vector<std::vector<local_scalar_t__>>> params_smb_pr =
         std::vector<std::vector<std::vector<local_scalar_t__>>>(N, 
           std::vector<std::vector<local_scalar_t__>>(W, 
             std::vector<local_scalar_t__>(3, DUMMY_VAR__)));
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            params_smb_pr[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)] = 
                in__.read<local_scalar_t__>();
          }
        }
      }
      out__.write(params_smb_pr);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mu_pr", "sigma_pr", "mu_pr_sub",
      "sigma_pr_r", "params_smb_pr", "params_smb", "y_pred_all_weeks_smb",
      "log_lik_all_subs", "b"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(num_par)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(num_par)},
      std::vector<size_t>{static_cast<size_t>(num_par),
                          static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(num_par)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(W),
                          static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(W),
                          static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(Tr_max_smb),
                          static_cast<size_t>(W), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(W)},
      std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_pr" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_pr" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= num_par; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "mu_pr_sub" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_pr_r" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "params_smb_pr" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "params_smb" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= Tr_max_smb; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "y_pred_all_weeks_smb" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "log_lik_all_subs" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "b");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_pr" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_pr" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= num_par; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "mu_pr_sub" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= num_par; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_pr_r" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "params_smb_pr" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "params_smb" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= W; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= Tr_max_smb; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "y_pred_all_weeks_smb" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= W; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "log_lik_all_subs" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "b");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_pr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(num_par) + "},\"block\":\"parameters\"},{\"name\":\"sigma_pr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(num_par) + "},\"block\":\"parameters\"},{\"name\":\"mu_pr_sub\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(num_par) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"sigma_pr_r\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(num_par) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"params_smb_pr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"parameters\"},{\"name\":\"params_smb\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"},{\"name\":\"y_pred_all_weeks_smb\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Tr_max_smb) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_all_subs\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"b\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_pr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(num_par) + "},\"block\":\"parameters\"},{\"name\":\"sigma_pr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(num_par) + "},\"block\":\"parameters\"},{\"name\":\"mu_pr_sub\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(num_par) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"sigma_pr_r\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(num_par) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"params_smb_pr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"parameters\"},{\"name\":\"params_smb\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"},{\"name\":\"y_pred_all_weeks_smb\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Tr_max_smb) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_all_subs\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(W) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"b\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((num_par + num_par) + (num_par * N)) + num_par) + ((N * W) * 3));
      const size_t num_transformed = 
  ((N * W) * 3);
      const size_t num_gen_quantities = ((((Tr_max_smb * W)
                                                             * N) + (N * W))
                                                           + 1);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((num_par + num_par) + (num_par * N)) + num_par) + ((N * W) * 3));
      const size_t num_transformed = 
  ((N * W) * 3);
      const size_t num_gen_quantities = ((((Tr_max_smb * W)
                                                             * N) + (N * W))
                                                           + 1);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 5> names__{"mu_pr", "sigma_pr",
      "mu_pr_sub", "sigma_pr_r", "params_smb_pr"};
      const std::array<Eigen::Index, 5> constrain_param_sizes__{num_par,
       num_par, (num_par * N), num_par, (N * W * 3)};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = smb_hierarchical_independent_with_gq_final_model_namespace::smb_hierarchical_independent_with_gq_final_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return smb_hierarchical_independent_with_gq_final_model_namespace::profiles__;
}

#endif


